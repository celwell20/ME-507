
TOF Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000870c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  080088ac  080088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e20  08008e20  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  08008e20  08008e20  00018e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e28  08008e28  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e28  08008e28  00018e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e2c  08008e2c  00018e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  08008e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000330  08009160  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08009160  00020560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180c5  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad8  00000000  00000000  00038425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  0003af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  0003be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b06a  00000000  00000000  0003cc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014302  00000000  00000000  00057cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009151a  00000000  00000000  0006bfdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd4f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f4  00000000  00000000  000fd548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000330 	.word	0x20000330
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008894 	.word	0x08008894

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000334 	.word	0x20000334
 80001dc:	08008894 	.word	0x08008894

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <check_ref_reg>:


#include "lidar.h"

void check_ref_reg(VL53L0X_DEV lidar, UART_HandleTypeDef* huart)
{
 8000594:	b5b0      	push	{r4, r5, r7, lr}
 8000596:	b0bc      	sub	sp, #240	; 0xf0
 8000598:	af04      	add	r7, sp, #16
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	uint8_t data1[3] = {0};
 800059e:	4b28      	ldr	r3, [pc, #160]	; (8000640 <check_ref_reg+0xac>)
 80005a0:	881b      	ldrh	r3, [r3, #0]
 80005a2:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	uint16_t data2 = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	uint16_t data3 = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	uint8_t message[200] = {0};
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	22c4      	movs	r2, #196	; 0xc4
 80005c2:	2100      	movs	r1, #0
 80005c4:	4618      	mov	r0, r3
 80005c6:	f007 fcf5 	bl	8007fb4 <memset>
	uint16_t mess_len;

	// Check the reference registers
	VL53L0X_ReadMulti(lidar, LIDAR_REF1, data1, 3);
 80005ca:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80005ce:	2303      	movs	r3, #3
 80005d0:	21c0      	movs	r1, #192	; 0xc0
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f007 fb86 	bl	8007ce4 <VL53L0X_ReadMulti>
	VL53L0X_RdWord(lidar, LIDAR_REF4, &data2);
 80005d8:	f107 03d6 	add.w	r3, r7, #214	; 0xd6
 80005dc:	461a      	mov	r2, r3
 80005de:	2151      	movs	r1, #81	; 0x51
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f007 fc4f 	bl	8007e84 <VL53L0X_RdWord>
	VL53L0X_RdWord(lidar, LIDAR_REF5, &data3);
 80005e6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005ea:	461a      	mov	r2, r3
 80005ec:	2161      	movs	r1, #97	; 0x61
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f007 fc48 	bl	8007e84 <VL53L0X_RdWord>

	mess_len = (uint16_t) sprintf((char*) message,
				"Ref1 (0xC0): 0x%02X\r\nRef2 (0xC1): 0x%02X\r\nRef3 (0xC2): 0x%02X\r\nRef4 (0x51): 0x%04X\r\nRef5 (0x61): 0x%04X\r\n\r\n",
				data1[0], data1[1],	data1[2], data2, data3);
 80005f4:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
	mess_len = (uint16_t) sprintf((char*) message,
 80005f8:	461c      	mov	r4, r3
				data1[0], data1[1],	data1[2], data2, data3);
 80005fa:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
	mess_len = (uint16_t) sprintf((char*) message,
 80005fe:	461d      	mov	r5, r3
				data1[0], data1[1],	data1[2], data2, data3);
 8000600:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
	mess_len = (uint16_t) sprintf((char*) message,
 8000604:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8000608:	f8b7 10d4 	ldrh.w	r1, [r7, #212]	; 0xd4
 800060c:	f107 000c 	add.w	r0, r7, #12
 8000610:	9102      	str	r1, [sp, #8]
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	462b      	mov	r3, r5
 8000618:	4622      	mov	r2, r4
 800061a:	490a      	ldr	r1, [pc, #40]	; (8000644 <check_ref_reg+0xb0>)
 800061c:	f007 fcd2 	bl	8007fc4 <siprintf>
 8000620:	4603      	mov	r3, r0
 8000622:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde

	HAL_UART_Transmit(huart, message, mess_len, 1000);
 8000626:	f8b7 20de 	ldrh.w	r2, [r7, #222]	; 0xde
 800062a:	f107 010c 	add.w	r1, r7, #12
 800062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000632:	6838      	ldr	r0, [r7, #0]
 8000634:	f002 faa1 	bl	8002b7a <HAL_UART_Transmit>
}
 8000638:	bf00      	nop
 800063a:	37e0      	adds	r7, #224	; 0xe0
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08008918 	.word	0x08008918
 8000644:	080088ac 	.word	0x080088ac

08000648 <init_lidar>:
void init_lidar(VL53L0X_DEV lidar, I2C_HandleTypeDef* i2c)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	lidar->I2cDevAddr = LIDAR_ADDR;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2252      	movs	r2, #82	; 0x52
 8000656:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	lidar->comms_speed_khz = 100;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2264      	movs	r2, #100	; 0x64
 800065e:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
	lidar->comms_type = 1; // i2c
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2201      	movs	r2, #1
 8000666:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
	lidar->i2c = i2c;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
}
 8000672:	bf00      	nop
 8000674:	370c      	adds	r7, #12
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr

0800067e <setup_lidar_continuous>:

	return Status;
}

VL53L0X_Error setup_lidar_continuous(VL53L0X_DEV lidar)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b09e      	sub	sp, #120	; 0x78
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
	VL53L0X_DeviceInfo_t lidar_info = {0};
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2263      	movs	r2, #99	; 0x63
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fc90 	bl	8007fb4 <memset>

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8000694:	2300      	movs	r3, #0
 8000696:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	Status = VL53L0X_DataInit(lidar);
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f002 fe08 	bl	80032b0 <VL53L0X_DataInit>
 80006a0:	4603      	mov	r3, r0
 80006a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 80006a6:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d108      	bne.n	80006c0 <setup_lidar_continuous+0x42>
		Status = VL53L0X_GetDeviceInfo(lidar, &lidar_info);
 80006ae:	f107 0308 	add.w	r3, r7, #8
 80006b2:	4619      	mov	r1, r3
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f002 fdd5 	bl	8003264 <VL53L0X_GetDeviceInfo>
 80006ba:	4603      	mov	r3, r0
 80006bc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 80006c0:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d105      	bne.n	80006d4 <setup_lidar_continuous+0x56>
		Status = VL53L0X_StaticInit(lidar);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f002 ff67 	bl	800359c <VL53L0X_StaticInit>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 80006d4:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10a      	bne.n	80006f2 <setup_lidar_continuous+0x74>
	// from https://github.com/STMicroelectronics/STM32CubeL4/blob/master/Projects/B-L475E-IOT01A/Applications/Proximity/Src/vl53l0x/vl53l0x_tof.c
		Status = VL53L0X_PerformRefCalibration(lidar, &VhvSettings, &PhaseCal);
 80006dc:	f107 026d 	add.w	r2, r7, #109	; 0x6d
 80006e0:	f107 036e 	add.w	r3, r7, #110	; 0x6e
 80006e4:	4619      	mov	r1, r3
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f003 fe08 	bl	80042fc <VL53L0X_PerformRefCalibration>
 80006ec:	4603      	mov	r3, r0
 80006ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 80006f2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d10a      	bne.n	8000710 <setup_lidar_continuous+0x92>
		Status = VL53L0X_PerformRefSpadManagement(lidar, &refSpadCount, &isApertureSpads);
 80006fa:	f107 026f 	add.w	r2, r7, #111	; 0x6f
 80006fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000702:	4619      	mov	r1, r3
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f004 fa86 	bl	8004c16 <VL53L0X_PerformRefSpadManagement>
 800070a:	4603      	mov	r3, r0
 800070c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 8000710:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8000714:	2b00      	cmp	r3, #0
 8000716:	d106      	bne.n	8000726 <setup_lidar_continuous+0xa8>
		Status = VL53L0X_SetDeviceMode(lidar, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8000718:	2101      	movs	r1, #1
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f003 f946 	bl	80039ac <VL53L0X_SetDeviceMode>
 8000720:	4603      	mov	r3, r0
 8000722:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	if (Status == VL53L0X_ERROR_NONE)
 8000726:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800072a:	2b00      	cmp	r3, #0
 800072c:	d105      	bne.n	800073a <setup_lidar_continuous+0xbc>
		Status = VL53L0X_StartMeasurement(lidar);
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f003 fe60 	bl	80043f4 <VL53L0X_StartMeasurement>
 8000734:	4603      	mov	r3, r0
 8000736:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
}
 800073a:	bf00      	nop
 800073c:	4618      	mov	r0, r3
 800073e:	3778      	adds	r7, #120	; 0x78
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b090      	sub	sp, #64	; 0x40
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t mdr1;
	VL53L0X_RangingMeasurementData_t range_data1;
	uint8_t buff[24] = {0};
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]
	HAL_StatusTypeDef ret;
	uint16_t tof_data = {0};
 800075e:	2300      	movs	r3, #0
 8000760:	87fb      	strh	r3, [r7, #62]	; 0x3e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000762:	f000 facf 	bl	8000d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000766:	f000 f86d 	bl	8000844 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076a:	f000 f92b 	bl	80009c4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800076e:	f000 f8d1 	bl	8000914 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000772:	f000 f8fd 	bl	8000970 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  init_lidar(lidar1, &hi2c2);
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <main+0xf0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	492f      	ldr	r1, [pc, #188]	; (8000838 <main+0xf4>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff63 	bl	8000648 <init_lidar>
  check_ref_reg(lidar1, &huart1);
 8000782:	4b2c      	ldr	r3, [pc, #176]	; (8000834 <main+0xf0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	492d      	ldr	r1, [pc, #180]	; (800083c <main+0xf8>)
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff ff03 	bl	8000594 <check_ref_reg>

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  if (Status == VL53L0X_ERROR_NONE)
 8000794:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 8000798:	2b00      	cmp	r3, #0
 800079a:	d107      	bne.n	80007ac <main+0x68>
	  Status = setup_lidar_continuous(lidar1);
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <main+0xf0>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff6c 	bl	800067e <setup_lidar_continuous>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  if (Status == VL53L0X_ERROR_NONE)
 80007ac:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d10a      	bne.n	80007ca <main+0x86>
	  {
		  Status = VL53L0X_GetMeasurementDataReady(lidar1, &mdr1);
 80007b4:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <main+0xf0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f107 023b 	add.w	r2, r7, #59	; 0x3b
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fed9 	bl	8004576 <VL53L0X_GetMeasurementDataReady>
 80007c4:	4603      	mov	r3, r0
 80007c6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  }

	  if (mdr1 && Status == VL53L0X_ERROR_NONE)
 80007ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d016      	beq.n	8000800 <main+0xbc>
 80007d2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d112      	bne.n	8000800 <main+0xbc>
	  {
		  Status = VL53L0X_GetRangingMeasurementData(lidar1, &range_data1);
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <main+0xf0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f107 021c 	add.w	r2, r7, #28
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 ff07 	bl	80045f8 <VL53L0X_GetRangingMeasurementData>
 80007ea:	4603      	mov	r3, r0
 80007ec:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
		  tof_data = range_data1.RangeMilliMeter;
 80007f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
		  VL53L0X_ClearInterruptMask(lidar1, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY);
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <main+0xf0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2104      	movs	r1, #4
 80007fa:	4618      	mov	r0, r3
 80007fc:	f004 f9a8 	bl	8004b50 <VL53L0X_ClearInterruptMask>
	  }
    /* USER CODE BEGIN 3 */
	  sprintf((char*)buff, "TOF Distance: %d\n\r", tof_data);
 8000800:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	490e      	ldr	r1, [pc, #56]	; (8000840 <main+0xfc>)
 8000806:	4618      	mov	r0, r3
 8000808:	f007 fbdc 	bl	8007fc4 <siprintf>
	  ret = HAL_UART_Transmit(&huart1, buff, strlen((char*)buff), HAL_MAX_DELAY);
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fce6 	bl	80001e0 <strlen>
 8000814:	4603      	mov	r3, r0
 8000816:	b29a      	uxth	r2, r3
 8000818:	1d39      	adds	r1, r7, #4
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <main+0xf8>)
 8000820:	f002 f9ab 	bl	8002b7a <HAL_UART_Transmit>
 8000824:	4603      	mov	r3, r0
 8000826:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	  HAL_Delay(100);
 800082a:	2064      	movs	r0, #100	; 0x64
 800082c:	f000 fadc 	bl	8000de8 <HAL_Delay>
	  if (Status == VL53L0X_ERROR_NONE)
 8000830:	e7bc      	b.n	80007ac <main+0x68>
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000
 8000838:	2000034c 	.word	0x2000034c
 800083c:	200003a0 	.word	0x200003a0
 8000840:	0800891c 	.word	0x0800891c

08000844 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f007 fbae 	bl	8007fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b27      	ldr	r3, [pc, #156]	; (800090c <SystemClock_Config+0xc8>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	4a26      	ldr	r2, [pc, #152]	; (800090c <SystemClock_Config+0xc8>)
 8000872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000876:	6413      	str	r3, [r2, #64]	; 0x40
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <SystemClock_Config+0xc8>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <SystemClock_Config+0xcc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a20      	ldr	r2, [pc, #128]	; (8000910 <SystemClock_Config+0xcc>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b1e      	ldr	r3, [pc, #120]	; (8000910 <SystemClock_Config+0xcc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a0:	2302      	movs	r3, #2
 80008a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a8:	2310      	movs	r3, #16
 80008aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ac:	2302      	movs	r3, #2
 80008ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b0:	2300      	movs	r3, #0
 80008b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008b4:	2308      	movs	r3, #8
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008c0:	2304      	movs	r3, #4
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c4:	f107 0320 	add.w	r3, r7, #32
 80008c8:	4618      	mov	r0, r3
 80008ca:	f001 fcb1 	bl	8002230 <HAL_RCC_OscConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d4:	f000 f8ac 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d8:	230f      	movs	r3, #15
 80008da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008dc:	2302      	movs	r3, #2
 80008de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2103      	movs	r1, #3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 ff13 	bl	8002720 <HAL_RCC_ClockConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000900:	f000 f896 	bl	8000a30 <Error_Handler>
  }
}
 8000904:	bf00      	nop
 8000906:	3750      	adds	r7, #80	; 0x50
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C2_Init+0x50>)
 800091a:	4a13      	ldr	r2, [pc, #76]	; (8000968 <MX_I2C2_Init+0x54>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C2_Init+0x50>)
 8000920:	4a12      	ldr	r2, [pc, #72]	; (800096c <MX_I2C2_Init+0x58>)
 8000922:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C2_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2C2_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_I2C2_Init+0x50>)
 8000932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000936:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_I2C2_Init+0x50>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2C2_Init+0x50>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_I2C2_Init+0x50>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2C2_Init+0x50>)
 800094c:	2200      	movs	r2, #0
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2C2_Init+0x50>)
 8000952:	f000 fcd7 	bl	8001304 <HAL_I2C_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800095c:	f000 f868 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000034c 	.word	0x2000034c
 8000968:	40005800 	.word	0x40005800
 800096c:	000186a0 	.word	0x000186a0

08000970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	; (80009c0 <MX_USART1_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 800097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART1_UART_Init+0x4c>)
 80009a8:	f002 f89a 	bl	8002ae0 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f000 f83d 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200003a0 	.word	0x200003a0
 80009c0:	40011000 	.word	0x40011000

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <MX_GPIO_Init+0x68>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a16      	ldr	r2, [pc, #88]	; (8000a2c <MX_GPIO_Init+0x68>)
 80009d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_GPIO_Init+0x68>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_GPIO_Init+0x68>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a0f      	ldr	r2, [pc, #60]	; (8000a2c <MX_GPIO_Init+0x68>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_GPIO_Init+0x68>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_GPIO_Init+0x68>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <MX_GPIO_Init+0x68>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x68>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

}
 8000a1e:	bf00      	nop
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
 8000a52:	4b0d      	ldr	r3, [pc, #52]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	603b      	str	r3, [r7, #0]
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800

08000a8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <HAL_I2C_MspInit+0xa4>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d13c      	bne.n	8000b28 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <HAL_I2C_MspInit+0xa8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_I2C_MspInit+0xa8>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_I2C_MspInit+0xa8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad0:	2312      	movs	r3, #18
 8000ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000adc:	2304      	movs	r3, #4
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4814      	ldr	r0, [pc, #80]	; (8000b38 <HAL_I2C_MspInit+0xac>)
 8000ae8:	f000 fa88 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aec:	2308      	movs	r3, #8
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af0:	2312      	movs	r3, #18
 8000af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000afc:	2309      	movs	r3, #9
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	4619      	mov	r1, r3
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <HAL_I2C_MspInit+0xac>)
 8000b08:	f000 fa78 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b08      	ldr	r3, [pc, #32]	; (8000b34 <HAL_I2C_MspInit+0xa8>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_I2C_MspInit+0xa8>)
 8000b16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b05      	ldr	r3, [pc, #20]	; (8000b34 <HAL_I2C_MspInit+0xa8>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000b28:	bf00      	nop
 8000b2a:	3728      	adds	r7, #40	; 0x28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	40005800 	.word	0x40005800
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a19      	ldr	r2, [pc, #100]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d12c      	bne.n	8000bb8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a17      	ldr	r2, [pc, #92]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <HAL_UART_MspInit+0x88>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b96:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <HAL_UART_MspInit+0x8c>)
 8000bb4:	f000 fa22 	bl	8000ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40020000 	.word	0x40020000

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <MemManage_Handler+0x4>

08000bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f8c6 	bl	8000da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <_sbrk+0x5c>)
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <_sbrk+0x60>)
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d102      	bne.n	8000c42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <_sbrk+0x64>)
 8000c3e:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <_sbrk+0x68>)
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d207      	bcs.n	8000c60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c50:	f007 f978 	bl	8007f44 <__errno>
 8000c54:	4603      	mov	r3, r0
 8000c56:	220c      	movs	r2, #12
 8000c58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5e:	e009      	b.n	8000c74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <_sbrk+0x64>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <_sbrk+0x64>)
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <_sbrk+0x64>)
 8000c70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20020000 	.word	0x20020000
 8000c80:	00000400 	.word	0x00000400
 8000c84:	20000548 	.word	0x20000548
 8000c88:	20000560 	.word	0x20000560

08000c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <SystemInit+0x20>)
 8000c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c96:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemInit+0x20>)
 8000c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb4:	480d      	ldr	r0, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb6:	490e      	ldr	r1, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb8:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ccc:	4c0b      	ldr	r4, [pc, #44]	; (8000cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cda:	f7ff ffd7 	bl	8000c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cde:	f007 f937 	bl	8007f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce2:	f7ff fd2f 	bl	8000744 <main>
  bx  lr    
 8000ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8000cf4:	08008e30 	.word	0x08008e30
  ldr r2, =_sbss
 8000cf8:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8000cfc:	20000560 	.word	0x20000560

08000d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d08:	4b0e      	ldr	r3, [pc, #56]	; (8000d44 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <HAL_Init+0x40>)
 8000d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0a      	ldr	r2, [pc, #40]	; (8000d44 <HAL_Init+0x40>)
 8000d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a07      	ldr	r2, [pc, #28]	; (8000d44 <HAL_Init+0x40>)
 8000d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f000 f931 	bl	8000f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d32:	200f      	movs	r0, #15
 8000d34:	f000 f808 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d38:	f7ff fe80 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_InitTick+0x54>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_InitTick+0x58>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 f93b 	bl	8000fe2 <HAL_SYSTICK_Config>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e00e      	b.n	8000d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d80a      	bhi.n	8000d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	6879      	ldr	r1, [r7, #4]
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	f000 f911 	bl	8000faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d88:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_InitTick+0x5c>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	e000      	b.n	8000d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	2000000c 	.word	0x2000000c
 8000da4:	20000008 	.word	0x20000008

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	2000000c 	.word	0x2000000c
 8000dcc:	2000054c 	.word	0x2000054c

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	2000054c 	.word	0x2000054c

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_Delay+0x44>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000000c 	.word	0x2000000c

08000e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e62:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <__NVIC_SetPriorityGrouping+0x44>)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	60d3      	str	r3, [r2, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e7c:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <__NVIC_GetPriorityGrouping+0x18>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0a1b      	lsrs	r3, r3, #8
 8000e82:	f003 0307 	and.w	r3, r3, #7
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f60:	d301      	bcc.n	8000f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00f      	b.n	8000f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <SysTick_Config+0x40>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6e:	210f      	movs	r1, #15
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295
 8000f74:	f7ff ff8e 	bl	8000e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <SysTick_Config+0x40>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7e:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <SysTick_Config+0x40>)
 8000f80:	2207      	movs	r2, #7
 8000f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	e000e010 	.word	0xe000e010

08000f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff47 	bl	8000e30 <__NVIC_SetPriorityGrouping>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
 8000fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fbc:	f7ff ff5c 	bl	8000e78 <__NVIC_GetPriorityGrouping>
 8000fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	6978      	ldr	r0, [r7, #20]
 8000fc8:	f7ff ff8e 	bl	8000ee8 <NVIC_EncodePriority>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff5d 	bl	8000e94 <__NVIC_SetPriority>
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff ffb0 	bl	8000f50 <SysTick_Config>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
 8001016:	e159      	b.n	80012cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001018:	2201      	movs	r2, #1
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	429a      	cmp	r2, r3
 8001032:	f040 8148 	bne.w	80012c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f003 0303 	and.w	r3, r3, #3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104a:	2b02      	cmp	r3, #2
 800104c:	d130      	bne.n	80010b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001084:	2201      	movs	r2, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	f003 0201 	and.w	r2, r3, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d017      	beq.n	80010ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d123      	bne.n	8001140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	08da      	lsrs	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3208      	adds	r2, #8
 8001100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	f003 0307 	and.w	r3, r3, #7
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	220f      	movs	r2, #15
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	691a      	ldr	r2, [r3, #16]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4313      	orrs	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	08da      	lsrs	r2, r3, #3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	3208      	adds	r2, #8
 800113a:	69b9      	ldr	r1, [r7, #24]
 800113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	2203      	movs	r2, #3
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4013      	ands	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0203 	and.w	r2, r3, #3
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117c:	2b00      	cmp	r3, #0
 800117e:	f000 80a2 	beq.w	80012c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b57      	ldr	r3, [pc, #348]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a56      	ldr	r2, [pc, #344]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b54      	ldr	r3, [pc, #336]	; (80012e4 <HAL_GPIO_Init+0x2e8>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800119e:	4a52      	ldr	r2, [pc, #328]	; (80012e8 <HAL_GPIO_Init+0x2ec>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a49      	ldr	r2, [pc, #292]	; (80012ec <HAL_GPIO_Init+0x2f0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d019      	beq.n	80011fe <HAL_GPIO_Init+0x202>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2f4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d013      	beq.n	80011fa <HAL_GPIO_Init+0x1fe>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a47      	ldr	r2, [pc, #284]	; (80012f4 <HAL_GPIO_Init+0x2f8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d00d      	beq.n	80011f6 <HAL_GPIO_Init+0x1fa>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a46      	ldr	r2, [pc, #280]	; (80012f8 <HAL_GPIO_Init+0x2fc>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d007      	beq.n	80011f2 <HAL_GPIO_Init+0x1f6>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a45      	ldr	r2, [pc, #276]	; (80012fc <HAL_GPIO_Init+0x300>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d101      	bne.n	80011ee <HAL_GPIO_Init+0x1f2>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e008      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e006      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e004      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e002      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x204>
 80011fe:	2300      	movs	r3, #0
 8001200:	69fa      	ldr	r2, [r7, #28]
 8001202:	f002 0203 	and.w	r2, r2, #3
 8001206:	0092      	lsls	r2, r2, #2
 8001208:	4093      	lsls	r3, r2
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001210:	4935      	ldr	r1, [pc, #212]	; (80012e8 <HAL_GPIO_Init+0x2ec>)
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3302      	adds	r3, #2
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800121e:	4b38      	ldr	r3, [pc, #224]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_GPIO_Init+0x304>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	43db      	mvns	r3, r3
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4013      	ands	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800126c:	4a24      	ldr	r2, [pc, #144]	; (8001300 <HAL_GPIO_Init+0x304>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	43db      	mvns	r3, r3
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	4013      	ands	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d003      	beq.n	8001296 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_GPIO_Init+0x304>)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_GPIO_Init+0x304>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d003      	beq.n	80012c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	4313      	orrs	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012c0:	4a0f      	ldr	r2, [pc, #60]	; (8001300 <HAL_GPIO_Init+0x304>)
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0f      	cmp	r3, #15
 80012d0:	f67f aea2 	bls.w	8001018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40013800 	.word	0x40013800
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400
 80012f4:	40020800 	.word	0x40020800
 80012f8:	40020c00 	.word	0x40020c00
 80012fc:	40021000 	.word	0x40021000
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e12b      	b.n	800156e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d106      	bne.n	8001330 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fbae 	bl	8000a8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2224      	movs	r2, #36	; 0x24
 8001334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f022 0201 	bic.w	r2, r2, #1
 8001346:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001356:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001366:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001368:	f001 fb92 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 800136c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4a81      	ldr	r2, [pc, #516]	; (8001578 <HAL_I2C_Init+0x274>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d807      	bhi.n	8001388 <HAL_I2C_Init+0x84>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4a80      	ldr	r2, [pc, #512]	; (800157c <HAL_I2C_Init+0x278>)
 800137c:	4293      	cmp	r3, r2
 800137e:	bf94      	ite	ls
 8001380:	2301      	movls	r3, #1
 8001382:	2300      	movhi	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	e006      	b.n	8001396 <HAL_I2C_Init+0x92>
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4a7d      	ldr	r2, [pc, #500]	; (8001580 <HAL_I2C_Init+0x27c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	bf94      	ite	ls
 8001390:	2301      	movls	r3, #1
 8001392:	2300      	movhi	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0e7      	b.n	800156e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a78      	ldr	r2, [pc, #480]	; (8001584 <HAL_I2C_Init+0x280>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	0c9b      	lsrs	r3, r3, #18
 80013a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	4a6a      	ldr	r2, [pc, #424]	; (8001578 <HAL_I2C_Init+0x274>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d802      	bhi.n	80013d8 <HAL_I2C_Init+0xd4>
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	3301      	adds	r3, #1
 80013d6:	e009      	b.n	80013ec <HAL_I2C_Init+0xe8>
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	4a69      	ldr	r2, [pc, #420]	; (8001588 <HAL_I2C_Init+0x284>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	099b      	lsrs	r3, r3, #6
 80013ea:	3301      	adds	r3, #1
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6812      	ldr	r2, [r2, #0]
 80013f0:	430b      	orrs	r3, r1
 80013f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	69db      	ldr	r3, [r3, #28]
 80013fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80013fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	495c      	ldr	r1, [pc, #368]	; (8001578 <HAL_I2C_Init+0x274>)
 8001408:	428b      	cmp	r3, r1
 800140a:	d819      	bhi.n	8001440 <HAL_I2C_Init+0x13c>
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	1e59      	subs	r1, r3, #1
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	fbb1 f3f3 	udiv	r3, r1, r3
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001420:	400b      	ands	r3, r1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <HAL_I2C_Init+0x138>
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	1e59      	subs	r1, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fbb1 f3f3 	udiv	r3, r1, r3
 8001434:	3301      	adds	r3, #1
 8001436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143a:	e051      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 800143c:	2304      	movs	r3, #4
 800143e:	e04f      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d111      	bne.n	800146c <HAL_I2C_Init+0x168>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	1e58      	subs	r0, r3, #1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6859      	ldr	r1, [r3, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	440b      	add	r3, r1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	3301      	adds	r3, #1
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	e012      	b.n	8001492 <HAL_I2C_Init+0x18e>
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	1e58      	subs	r0, r3, #1
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6859      	ldr	r1, [r3, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	0099      	lsls	r1, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001482:	3301      	adds	r3, #1
 8001484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001488:	2b00      	cmp	r3, #0
 800148a:	bf0c      	ite	eq
 800148c:	2301      	moveq	r3, #1
 800148e:	2300      	movne	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_I2C_Init+0x196>
 8001496:	2301      	movs	r3, #1
 8001498:	e022      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10e      	bne.n	80014c0 <HAL_I2C_Init+0x1bc>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	1e58      	subs	r0, r3, #1
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6859      	ldr	r1, [r3, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	440b      	add	r3, r1
 80014b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014be:	e00f      	b.n	80014e0 <HAL_I2C_Init+0x1dc>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	1e58      	subs	r0, r3, #1
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6859      	ldr	r1, [r3, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	0099      	lsls	r1, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	6809      	ldr	r1, [r1, #0]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	69da      	ldr	r2, [r3, #28]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800150e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6911      	ldr	r1, [r2, #16]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68d2      	ldr	r2, [r2, #12]
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	430b      	orrs	r3, r1
 8001522:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	430a      	orrs	r2, r1
 800153e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0201 	orr.w	r2, r2, #1
 800154e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	000186a0 	.word	0x000186a0
 800157c:	001e847f 	.word	0x001e847f
 8001580:	003d08ff 	.word	0x003d08ff
 8001584:	431bde83 	.word	0x431bde83
 8001588:	10624dd3 	.word	0x10624dd3

0800158c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	461a      	mov	r2, r3
 8001598:	460b      	mov	r3, r1
 800159a:	817b      	strh	r3, [r7, #10]
 800159c:	4613      	mov	r3, r2
 800159e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fc16 	bl	8000dd0 <HAL_GetTick>
 80015a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	f040 80e0 	bne.w	8001774 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	2319      	movs	r3, #25
 80015ba:	2201      	movs	r2, #1
 80015bc:	4970      	ldr	r1, [pc, #448]	; (8001780 <HAL_I2C_Master_Transmit+0x1f4>)
 80015be:	68f8      	ldr	r0, [r7, #12]
 80015c0:	f000 fc58 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80015ca:	2302      	movs	r3, #2
 80015cc:	e0d3      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d101      	bne.n	80015dc <HAL_I2C_Master_Transmit+0x50>
 80015d8:	2302      	movs	r3, #2
 80015da:	e0cc      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2201      	movs	r2, #1
 80015e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d007      	beq.n	8001602 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001610:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2221      	movs	r2, #33	; 0x21
 8001616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2210      	movs	r2, #16
 800161e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	893a      	ldrh	r2, [r7, #8]
 8001632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001638:	b29a      	uxth	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4a50      	ldr	r2, [pc, #320]	; (8001784 <HAL_I2C_Master_Transmit+0x1f8>)
 8001642:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001644:	8979      	ldrh	r1, [r7, #10]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	6a3a      	ldr	r2, [r7, #32]
 800164a:	68f8      	ldr	r0, [r7, #12]
 800164c:	f000 fac2 	bl	8001bd4 <I2C_MasterRequestWrite>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e08d      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001670:	e066      	b.n	8001740 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	6a39      	ldr	r1, [r7, #32]
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fcd2 	bl	8002020 <I2C_WaitOnTXEFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00d      	beq.n	800169e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2b04      	cmp	r3, #4
 8001688:	d107      	bne.n	800169a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e06b      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	781a      	ldrb	r2, [r3, #0]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c6:	3b01      	subs	r3, #1
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d11b      	bne.n	8001714 <HAL_I2C_Master_Transmit+0x188>
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d017      	beq.n	8001714 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	781a      	ldrb	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016fe:	b29b      	uxth	r3, r3
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170c:	3b01      	subs	r3, #1
 800170e:	b29a      	uxth	r2, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	6a39      	ldr	r1, [r7, #32]
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fcc2 	bl	80020a2 <I2C_WaitOnBTFFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00d      	beq.n	8001740 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	2b04      	cmp	r3, #4
 800172a:	d107      	bne.n	800173c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800173a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e01a      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	2b00      	cmp	r3, #0
 8001746:	d194      	bne.n	8001672 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2220      	movs	r2, #32
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001770:	2300      	movs	r3, #0
 8001772:	e000      	b.n	8001776 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001774:	2302      	movs	r3, #2
  }
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	00100002 	.word	0x00100002
 8001784:	ffff0000 	.word	0xffff0000

08001788 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	461a      	mov	r2, r3
 8001794:	460b      	mov	r3, r1
 8001796:	817b      	strh	r3, [r7, #10]
 8001798:	4613      	mov	r3, r2
 800179a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff fb18 	bl	8000dd0 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b20      	cmp	r3, #32
 80017ac:	f040 820b 	bne.w	8001bc6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	2319      	movs	r3, #25
 80017b6:	2201      	movs	r2, #1
 80017b8:	497c      	ldr	r1, [pc, #496]	; (80019ac <HAL_I2C_Master_Receive+0x224>)
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 fb5a 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
 80017c8:	e1fe      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_I2C_Master_Receive+0x50>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e1f7      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d007      	beq.n	80017fe <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f042 0201 	orr.w	r2, r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2222      	movs	r2, #34	; 0x22
 8001812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2210      	movs	r2, #16
 800181a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2200      	movs	r2, #0
 8001822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	893a      	ldrh	r2, [r7, #8]
 800182e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4a5c      	ldr	r2, [pc, #368]	; (80019b0 <HAL_I2C_Master_Receive+0x228>)
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001840:	8979      	ldrh	r1, [r7, #10]
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fa46 	bl	8001cd8 <I2C_MasterRequestRead>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e1b8      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185a:	2b00      	cmp	r3, #0
 800185c:	d113      	bne.n	8001886 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	623b      	str	r3, [r7, #32]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	623b      	str	r3, [r7, #32]
 8001872:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	e18c      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188a:	2b01      	cmp	r3, #1
 800188c:	d11b      	bne.n	80018c6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800189c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	61fb      	str	r3, [r7, #28]
 80018b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e16c      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d11b      	bne.n	8001906 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	61bb      	str	r3, [r7, #24]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	e14c      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800192c:	e138      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b03      	cmp	r3, #3
 8001934:	f200 80f1 	bhi.w	8001b1a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800193c:	2b01      	cmp	r3, #1
 800193e:	d123      	bne.n	8001988 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 fbed 	bl	8002124 <I2C_WaitOnRXNEFlagUntilTimeout>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e139      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001970:	3b01      	subs	r3, #1
 8001972:	b29a      	uxth	r2, r3
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800197c:	b29b      	uxth	r3, r3
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001986:	e10b      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800198c:	2b02      	cmp	r3, #2
 800198e:	d14e      	bne.n	8001a2e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001996:	2200      	movs	r2, #0
 8001998:	4906      	ldr	r1, [pc, #24]	; (80019b4 <HAL_I2C_Master_Receive+0x22c>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fa6a 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d008      	beq.n	80019b8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e10e      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
 80019aa:	bf00      	nop
 80019ac:	00100002 	.word	0x00100002
 80019b0:	ffff0000 	.word	0xffff0000
 80019b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691a      	ldr	r2, [r3, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	3b01      	subs	r3, #1
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	b2d2      	uxtb	r2, r2
 8001a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a16:	3b01      	subs	r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a2c:	e0b8      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	2200      	movs	r2, #0
 8001a36:	4966      	ldr	r1, [pc, #408]	; (8001bd0 <HAL_I2C_Master_Receive+0x448>)
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 fa1b 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0bf      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	9300      	str	r3, [sp, #0]
 8001a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a90:	2200      	movs	r2, #0
 8001a92:	494f      	ldr	r1, [pc, #316]	; (8001bd0 <HAL_I2C_Master_Receive+0x448>)
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f000 f9ed 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e091      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ab2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3b01      	subs	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b18:	e042      	b.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fb00 	bl	8002124 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e04c      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	691a      	ldr	r2, [r3, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	3b01      	subs	r3, #1
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d118      	bne.n	8001ba0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f aec2 	bne.w	800192e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001bc6:	2302      	movs	r3, #2
  }
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3728      	adds	r7, #40	; 0x28
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	00010004 	.word	0x00010004

08001bd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	460b      	mov	r3, r1
 8001be2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2b08      	cmp	r3, #8
 8001bee:	d006      	beq.n	8001bfe <I2C_MasterRequestWrite+0x2a>
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d003      	beq.n	8001bfe <I2C_MasterRequestWrite+0x2a>
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bfc:	d108      	bne.n	8001c10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e00b      	b.n	8001c28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	2b12      	cmp	r3, #18
 8001c16:	d107      	bne.n	8001c28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f91d 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00d      	beq.n	8001c5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c4e:	d103      	bne.n	8001c58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e035      	b.n	8001cc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c64:	d108      	bne.n	8001c78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c74:	611a      	str	r2, [r3, #16]
 8001c76:	e01b      	b.n	8001cb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	11db      	asrs	r3, r3, #7
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 0306 	and.w	r3, r3, #6
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f063 030f 	orn	r3, r3, #15
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <I2C_MasterRequestWrite+0xfc>)
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	f000 f943 	bl	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e010      	b.n	8001cc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001ca6:	897b      	ldrh	r3, [r7, #10]
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	4907      	ldr	r1, [pc, #28]	; (8001cd4 <I2C_MasterRequestWrite+0x100>)
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f933 	bl	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	00010008 	.word	0x00010008
 8001cd4:	00010002 	.word	0x00010002

08001cd8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cfc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d006      	beq.n	8001d12 <I2C_MasterRequestRead+0x3a>
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d003      	beq.n	8001d12 <I2C_MasterRequestRead+0x3a>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d10:	d108      	bne.n	8001d24 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	e00b      	b.n	8001d3c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	2b11      	cmp	r3, #17
 8001d2a:	d107      	bne.n	8001d3c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d3a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f893 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00d      	beq.n	8001d70 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d62:	d103      	bne.n	8001d6c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e079      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d78:	d108      	bne.n	8001d8c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	e05f      	b.n	8001e4c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	11db      	asrs	r3, r3, #7
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f003 0306 	and.w	r3, r3, #6
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f063 030f 	orn	r3, r3, #15
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4930      	ldr	r1, [pc, #192]	; (8001e6c <I2C_MasterRequestRead+0x194>)
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f8b9 	bl	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e054      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dba:	897b      	ldrh	r3, [r7, #10]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4929      	ldr	r1, [pc, #164]	; (8001e70 <I2C_MasterRequestRead+0x198>)
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f8a9 	bl	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e044      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dfe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 f831 	bl	8001e74 <I2C_WaitOnFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e26:	d103      	bne.n	8001e30 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e017      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001e34:	897b      	ldrh	r3, [r7, #10]
 8001e36:	11db      	asrs	r3, r3, #7
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f003 0306 	and.w	r3, r3, #6
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	f063 030e 	orn	r3, r3, #14
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <I2C_MasterRequestRead+0x198>)
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f865 	bl	8001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	00010008 	.word	0x00010008
 8001e70:	00010002 	.word	0x00010002

08001e74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e84:	e025      	b.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d021      	beq.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e8e:	f7fe ff9f 	bl	8000dd0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d116      	bne.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e023      	b.n	8001f1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d10d      	bne.n	8001ef8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	e00c      	b.n	8001f12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	4013      	ands	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d0b6      	beq.n	8001e86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f30:	e051      	b.n	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f40:	d123      	bne.n	8001f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2220      	movs	r2, #32
 8001f66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f043 0204 	orr.w	r2, r3, #4
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e046      	b.n	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f90:	d021      	beq.n	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f92:	f7fe ff1d 	bl	8000dd0 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d116      	bne.n	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f043 0220 	orr.w	r2, r3, #32
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e020      	b.n	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0c1b      	lsrs	r3, r3, #16
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d10c      	bne.n	8001ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	4013      	ands	r3, r2
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	bf14      	ite	ne
 8001ff2:	2301      	movne	r3, #1
 8001ff4:	2300      	moveq	r3, #0
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	e00b      	b.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	43da      	mvns	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	4013      	ands	r3, r2
 8002006:	b29b      	uxth	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	bf14      	ite	ne
 800200c:	2301      	movne	r3, #1
 800200e:	2300      	moveq	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d18d      	bne.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800202c:	e02d      	b.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 f8ce 	bl	80021d0 <I2C_IsAcknowledgeFailed>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e02d      	b.n	800209a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d021      	beq.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7fe fec3 	bl	8000dd0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d116      	bne.n	800208a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e007      	b.n	800209a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d1ca      	bne.n	800202e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ae:	e02d      	b.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f88d 	bl	80021d0 <I2C_IsAcknowledgeFailed>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e02d      	b.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c6:	d021      	beq.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c8:	f7fe fe82 	bl	8000dd0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d302      	bcc.n	80020de <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d116      	bne.n	800210c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e007      	b.n	800211c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b04      	cmp	r3, #4
 8002118:	d1ca      	bne.n	80020b0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002130:	e042      	b.n	80021b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b10      	cmp	r3, #16
 800213e:	d119      	bne.n	8002174 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0210 	mvn.w	r2, #16
 8002148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2220      	movs	r2, #32
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e029      	b.n	80021c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002174:	f7fe fe2c 	bl	8000dd0 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	429a      	cmp	r2, r3
 8002182:	d302      	bcc.n	800218a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d116      	bne.n	80021b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0220 	orr.w	r2, r3, #32
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e007      	b.n	80021c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c2:	2b40      	cmp	r3, #64	; 0x40
 80021c4:	d1b5      	bne.n	8002132 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d11b      	bne.n	8002220 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021f0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220c:	f043 0204 	orr.w	r2, r3, #4
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e267      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d075      	beq.n	800233a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800224e:	4b88      	ldr	r3, [pc, #544]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b04      	cmp	r3, #4
 8002258:	d00c      	beq.n	8002274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b85      	ldr	r3, [pc, #532]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002262:	2b08      	cmp	r3, #8
 8002264:	d112      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002266:	4b82      	ldr	r3, [pc, #520]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800226e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002272:	d10b      	bne.n	800228c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	4b7e      	ldr	r3, [pc, #504]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d05b      	beq.n	8002338 <HAL_RCC_OscConfig+0x108>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d157      	bne.n	8002338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e242      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0x74>
 8002296:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a75      	ldr	r2, [pc, #468]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x98>
 80022ae:	4b70      	ldr	r3, [pc, #448]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6f      	ldr	r2, [pc, #444]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a6c      	ldr	r2, [pc, #432]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xb0>
 80022c8:	4b69      	ldr	r3, [pc, #420]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a68      	ldr	r2, [pc, #416]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b66      	ldr	r3, [pc, #408]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a65      	ldr	r2, [pc, #404]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd72 	bl	8000dd0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe fd6e 	bl	8000dd0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e207      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xc0>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002310:	f7fe fd5e 	bl	8000dd0 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe fd5a 	bl	8000dd0 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	; 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e1f3      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b51      	ldr	r3, [pc, #324]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0xe8>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d063      	beq.n	800240e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002346:	4b4a      	ldr	r3, [pc, #296]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1c7      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4937      	ldr	r1, [pc, #220]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e03a      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCC_OscConfig+0x244>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fd13 	bl	8000dd0 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ae:	f7fe fd0f 	bl	8000dd0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1a8      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023cc:	4b28      	ldr	r3, [pc, #160]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4925      	ldr	r1, [pc, #148]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]
 80023e0:	e015      	b.n	800240e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e2:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_RCC_OscConfig+0x244>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e8:	f7fe fcf2 	bl	8000dd0 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f0:	f7fe fcee 	bl	8000dd0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e187      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d036      	beq.n	8002488 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002424:	2201      	movs	r2, #1
 8002426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7fe fcd2 	bl	8000dd0 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002430:	f7fe fcce 	bl	8000dd0 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e167      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_OscConfig+0x240>)
 8002444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x200>
 800244e:	e01b      	b.n	8002488 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_OscConfig+0x248>)
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7fe fcbb 	bl	8000dd0 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	e00e      	b.n	800247c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800245e:	f7fe fcb7 	bl	8000dd0 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d907      	bls.n	800247c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e150      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
 8002470:	40023800 	.word	0x40023800
 8002474:	42470000 	.word	0x42470000
 8002478:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	4b88      	ldr	r3, [pc, #544]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800247e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ea      	bne.n	800245e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8097 	beq.w	80025c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800249a:	4b81      	ldr	r3, [pc, #516]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10f      	bne.n	80024c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	4b7d      	ldr	r3, [pc, #500]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	4a7c      	ldr	r2, [pc, #496]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	; 0x40
 80024b6:	4b7a      	ldr	r3, [pc, #488]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c2:	2301      	movs	r3, #1
 80024c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c6:	4b77      	ldr	r3, [pc, #476]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d118      	bne.n	8002504 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024d2:	4b74      	ldr	r3, [pc, #464]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a73      	ldr	r2, [pc, #460]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024de:	f7fe fc77 	bl	8000dd0 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e6:	f7fe fc73 	bl	8000dd0 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e10c      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f8:	4b6a      	ldr	r3, [pc, #424]	; (80026a4 <HAL_RCC_OscConfig+0x474>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d106      	bne.n	800251a <HAL_RCC_OscConfig+0x2ea>
 800250c:	4b64      	ldr	r3, [pc, #400]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a63      	ldr	r2, [pc, #396]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x324>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x30c>
 8002522:	4b5f      	ldr	r3, [pc, #380]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	4a5e      	ldr	r2, [pc, #376]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6713      	str	r3, [r2, #112]	; 0x70
 800252e:	4b5c      	ldr	r3, [pc, #368]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a5b      	ldr	r2, [pc, #364]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x324>
 800253c:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	4a57      	ldr	r2, [pc, #348]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	6713      	str	r3, [r2, #112]	; 0x70
 8002548:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800254e:	f023 0304 	bic.w	r3, r3, #4
 8002552:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7fe fc38 	bl	8000dd0 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7fe fc34 	bl	8000dd0 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e0cb      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800257a:	4b49      	ldr	r3, [pc, #292]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ee      	beq.n	8002564 <HAL_RCC_OscConfig+0x334>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002588:	f7fe fc22 	bl	8000dd0 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7fe fc1e 	bl	8000dd0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0b5      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a6:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ee      	bne.n	8002590 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b2:	7dfb      	ldrb	r3, [r7, #23]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b8:	4b39      	ldr	r3, [pc, #228]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	4a38      	ldr	r2, [pc, #224]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80a1 	beq.w	8002710 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ce:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b08      	cmp	r3, #8
 80025d8:	d05c      	beq.n	8002694 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d141      	bne.n	8002666 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e2:	4b31      	ldr	r3, [pc, #196]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fbf2 	bl	8000dd0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fbee 	bl	8000dd0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e087      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	4b27      	ldr	r3, [pc, #156]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69da      	ldr	r2, [r3, #28]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	019b      	lsls	r3, r3, #6
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	3b01      	subs	r3, #1
 8002628:	041b      	lsls	r3, r3, #16
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	491b      	ldr	r1, [pc, #108]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe fbc7 	bl	8000dd0 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002646:	f7fe fbc3 	bl	8000dd0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e05c      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x416>
 8002664:	e054      	b.n	8002710 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002666:	4b10      	ldr	r3, [pc, #64]	; (80026a8 <HAL_RCC_OscConfig+0x478>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800266c:	f7fe fbb0 	bl	8000dd0 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fbac 	bl	8000dd0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e045      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_OscConfig+0x470>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x444>
 8002692:	e03d      	b.n	8002710 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d107      	bne.n	80026ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e038      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40007000 	.word	0x40007000
 80026a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x4ec>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d028      	beq.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d121      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d11a      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026dc:	4013      	ands	r3, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d111      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f2:	085b      	lsrs	r3, r3, #1
 80026f4:	3b01      	subs	r3, #1
 80026f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0cc      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b68      	ldr	r3, [pc, #416]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d90c      	bls.n	800275c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800274a:	4b63      	ldr	r3, [pc, #396]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d001      	beq.n	800275c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e0b8      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d020      	beq.n	80027aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d005      	beq.n	8002780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002774:	4b59      	ldr	r3, [pc, #356]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	4a58      	ldr	r2, [pc, #352]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800277a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800277e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0308 	and.w	r3, r3, #8
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800278c:	4b53      	ldr	r3, [pc, #332]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b50      	ldr	r3, [pc, #320]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	494d      	ldr	r1, [pc, #308]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d044      	beq.n	8002840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b47      	ldr	r3, [pc, #284]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d119      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e07f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d003      	beq.n	80027de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e06f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e067      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b37      	ldr	r3, [pc, #220]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4934      	ldr	r1, [pc, #208]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe fade 	bl	8000dd0 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fada 	bl	8000dd0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e04f      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d20c      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_ClockConfig+0x1b8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d001      	beq.n	8002868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e032      	b.n	80028ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4916      	ldr	r1, [pc, #88]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0308 	and.w	r3, r3, #8
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028a6:	f000 f821 	bl	80028ec <HAL_RCC_GetSysClockFreq>
 80028aa:	4602      	mov	r2, r0
 80028ac:	4b0b      	ldr	r3, [pc, #44]	; (80028dc <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	f003 030f 	and.w	r3, r3, #15
 80028b6:	490a      	ldr	r1, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	5ccb      	ldrb	r3, [r1, r3]
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a09      	ldr	r2, [pc, #36]	; (80028e4 <HAL_RCC_ClockConfig+0x1c4>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1c8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fa3e 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00
 80028dc:	40023800 	.word	0x40023800
 80028e0:	08008dd4 	.word	0x08008dd4
 80028e4:	20000004 	.word	0x20000004
 80028e8:	20000008 	.word	0x20000008

080028ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f0:	b090      	sub	sp, #64	; 0x40
 80028f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	637b      	str	r3, [r7, #52]	; 0x34
 80028f8:	2300      	movs	r3, #0
 80028fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028fc:	2300      	movs	r3, #0
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002904:	4b59      	ldr	r3, [pc, #356]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d00d      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x40>
 8002910:	2b08      	cmp	r3, #8
 8002912:	f200 80a1 	bhi.w	8002a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d002      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x34>
 800291a:	2b04      	cmp	r3, #4
 800291c:	d003      	beq.n	8002926 <HAL_RCC_GetSysClockFreq+0x3a>
 800291e:	e09b      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002922:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002924:	e09b      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002926:	4b53      	ldr	r3, [pc, #332]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800292a:	e098      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800292c:	4b4f      	ldr	r3, [pc, #316]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002934:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002936:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d028      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	099b      	lsrs	r3, r3, #6
 8002948:	2200      	movs	r2, #0
 800294a:	623b      	str	r3, [r7, #32]
 800294c:	627a      	str	r2, [r7, #36]	; 0x24
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002954:	2100      	movs	r1, #0
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002958:	fb03 f201 	mul.w	r2, r3, r1
 800295c:	2300      	movs	r3, #0
 800295e:	fb00 f303 	mul.w	r3, r0, r3
 8002962:	4413      	add	r3, r2
 8002964:	4a43      	ldr	r2, [pc, #268]	; (8002a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002966:	fba0 1202 	umull	r1, r2, r0, r2
 800296a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800296c:	460a      	mov	r2, r1
 800296e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002972:	4413      	add	r3, r2
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	2200      	movs	r2, #0
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	61fa      	str	r2, [r7, #28]
 800297e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002986:	f7fd fc83 	bl	8000290 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4613      	mov	r3, r2
 8002990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002992:	e053      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	099b      	lsrs	r3, r3, #6
 800299a:	2200      	movs	r2, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	617a      	str	r2, [r7, #20]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80029a6:	f04f 0b00 	mov.w	fp, #0
 80029aa:	4652      	mov	r2, sl
 80029ac:	465b      	mov	r3, fp
 80029ae:	f04f 0000 	mov.w	r0, #0
 80029b2:	f04f 0100 	mov.w	r1, #0
 80029b6:	0159      	lsls	r1, r3, #5
 80029b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029bc:	0150      	lsls	r0, r2, #5
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	ebb2 080a 	subs.w	r8, r2, sl
 80029c6:	eb63 090b 	sbc.w	r9, r3, fp
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80029d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80029da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029de:	ebb2 0408 	subs.w	r4, r2, r8
 80029e2:	eb63 0509 	sbc.w	r5, r3, r9
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	f04f 0300 	mov.w	r3, #0
 80029ee:	00eb      	lsls	r3, r5, #3
 80029f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029f4:	00e2      	lsls	r2, r4, #3
 80029f6:	4614      	mov	r4, r2
 80029f8:	461d      	mov	r5, r3
 80029fa:	eb14 030a 	adds.w	r3, r4, sl
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	eb45 030b 	adc.w	r3, r5, fp
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a12:	4629      	mov	r1, r5
 8002a14:	028b      	lsls	r3, r1, #10
 8002a16:	4621      	mov	r1, r4
 8002a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a1c:	4621      	mov	r1, r4
 8002a1e:	028a      	lsls	r2, r1, #10
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	2200      	movs	r2, #0
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	60fa      	str	r2, [r7, #12]
 8002a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a30:	f7fd fc2e 	bl	8000290 <__aeabi_uldivmod>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	4613      	mov	r3, r2
 8002a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	3301      	adds	r3, #1
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a56:	e002      	b.n	8002a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3740      	adds	r7, #64	; 0x40
 8002a64:	46bd      	mov	sp, r7
 8002a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	00f42400 	.word	0x00f42400
 8002a74:	017d7840 	.word	0x017d7840

08002a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000004 	.word	0x20000004

08002a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a94:	f7ff fff0 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4903      	ldr	r1, [pc, #12]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	08008de4 	.word	0x08008de4

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff ffdc 	bl	8002a78 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0b5b      	lsrs	r3, r3, #13
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08008de4 	.word	0x08008de4

08002ae0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e03f      	b.n	8002b72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe f818 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2224      	movs	r2, #36	; 0x24
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f929 	bl	8002d7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68da      	ldr	r2, [r3, #12]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b08a      	sub	sp, #40	; 0x28
 8002b7e:	af02      	add	r7, sp, #8
 8002b80:	60f8      	str	r0, [r7, #12]
 8002b82:	60b9      	str	r1, [r7, #8]
 8002b84:	603b      	str	r3, [r7, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d17c      	bne.n	8002c94 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <HAL_UART_Transmit+0x2c>
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e075      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_UART_Transmit+0x3e>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e06e      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2221      	movs	r2, #33	; 0x21
 8002bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bce:	f7fe f8ff 	bl	8000dd0 <HAL_GetTick>
 8002bd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	88fa      	ldrh	r2, [r7, #6]
 8002bd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be8:	d108      	bne.n	8002bfc <HAL_UART_Transmit+0x82>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	61bb      	str	r3, [r7, #24]
 8002bfa:	e003      	b.n	8002c04 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c0c:	e02a      	b.n	8002c64 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2200      	movs	r2, #0
 8002c16:	2180      	movs	r1, #128	; 0x80
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f840 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e036      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	881b      	ldrh	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	3302      	adds	r3, #2
 8002c42:	61bb      	str	r3, [r7, #24]
 8002c44:	e007      	b.n	8002c56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	781a      	ldrb	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	3301      	adds	r3, #1
 8002c54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1cf      	bne.n	8002c0e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2140      	movs	r1, #64	; 0x40
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f000 f810 	bl	8002c9e <UART_WaitOnFlagUntilTimeout>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e006      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3720      	adds	r7, #32
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b090      	sub	sp, #64	; 0x40
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	60b9      	str	r1, [r7, #8]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	4613      	mov	r3, r2
 8002cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cae:	e050      	b.n	8002d52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb6:	d04c      	beq.n	8002d52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002cb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <UART_WaitOnFlagUntilTimeout+0x30>
 8002cbe:	f7fe f887 	bl	8000dd0 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d241      	bcs.n	8002d52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	330c      	adds	r3, #12
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd8:	e853 3f00 	ldrex	r3, [r3]
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cee:	637a      	str	r2, [r7, #52]	; 0x34
 8002cf0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cf4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e5      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3314      	adds	r3, #20
 8002d08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	613b      	str	r3, [r7, #16]
   return(result);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3314      	adds	r3, #20
 8002d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d22:	623a      	str	r2, [r7, #32]
 8002d24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	69f9      	ldr	r1, [r7, #28]
 8002d28:	6a3a      	ldr	r2, [r7, #32]
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2220      	movs	r2, #32
 8002d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00f      	b.n	8002d72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	bf0c      	ite	eq
 8002d62:	2301      	moveq	r3, #1
 8002d64:	2300      	movne	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d09f      	beq.n	8002cb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3740      	adds	r7, #64	; 0x40
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d80:	b0c0      	sub	sp, #256	; 0x100
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d98:	68d9      	ldr	r1, [r3, #12]
 8002d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	ea40 0301 	orr.w	r3, r0, r1
 8002da4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002dd4:	f021 010c 	bic.w	r1, r1, #12
 8002dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002de2:	430b      	orrs	r3, r1
 8002de4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002df6:	6999      	ldr	r1, [r3, #24]
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	ea40 0301 	orr.w	r3, r0, r1
 8002e02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b8f      	ldr	r3, [pc, #572]	; (8003048 <UART_SetConfig+0x2cc>)
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d005      	beq.n	8002e1c <UART_SetConfig+0xa0>
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b8d      	ldr	r3, [pc, #564]	; (800304c <UART_SetConfig+0x2d0>)
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d104      	bne.n	8002e26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e1c:	f7ff fe4c 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8002e20:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002e24:	e003      	b.n	8002e2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e26:	f7ff fe33 	bl	8002a90 <HAL_RCC_GetPCLK1Freq>
 8002e2a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e38:	f040 810c 	bne.w	8003054 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e40:	2200      	movs	r2, #0
 8002e42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002e46:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002e4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002e4e:	4622      	mov	r2, r4
 8002e50:	462b      	mov	r3, r5
 8002e52:	1891      	adds	r1, r2, r2
 8002e54:	65b9      	str	r1, [r7, #88]	; 0x58
 8002e56:	415b      	adcs	r3, r3
 8002e58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e5e:	4621      	mov	r1, r4
 8002e60:	eb12 0801 	adds.w	r8, r2, r1
 8002e64:	4629      	mov	r1, r5
 8002e66:	eb43 0901 	adc.w	r9, r3, r1
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e7e:	4690      	mov	r8, r2
 8002e80:	4699      	mov	r9, r3
 8002e82:	4623      	mov	r3, r4
 8002e84:	eb18 0303 	adds.w	r3, r8, r3
 8002e88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002e8c:	462b      	mov	r3, r5
 8002e8e:	eb49 0303 	adc.w	r3, r9, r3
 8002e92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ea2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002ea6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002eaa:	460b      	mov	r3, r1
 8002eac:	18db      	adds	r3, r3, r3
 8002eae:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	eb42 0303 	adc.w	r3, r2, r3
 8002eb6:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ebc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ec0:	f7fd f9e6 	bl	8000290 <__aeabi_uldivmod>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4b61      	ldr	r3, [pc, #388]	; (8003050 <UART_SetConfig+0x2d4>)
 8002eca:	fba3 2302 	umull	r2, r3, r3, r2
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	011c      	lsls	r4, r3, #4
 8002ed2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002edc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002ee0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002ee4:	4642      	mov	r2, r8
 8002ee6:	464b      	mov	r3, r9
 8002ee8:	1891      	adds	r1, r2, r2
 8002eea:	64b9      	str	r1, [r7, #72]	; 0x48
 8002eec:	415b      	adcs	r3, r3
 8002eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ef0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	eb12 0a01 	adds.w	sl, r2, r1
 8002efa:	4649      	mov	r1, r9
 8002efc:	eb43 0b01 	adc.w	fp, r3, r1
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f14:	4692      	mov	sl, r2
 8002f16:	469b      	mov	fp, r3
 8002f18:	4643      	mov	r3, r8
 8002f1a:	eb1a 0303 	adds.w	r3, sl, r3
 8002f1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f22:	464b      	mov	r3, r9
 8002f24:	eb4b 0303 	adc.w	r3, fp, r3
 8002f28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f38:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002f3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002f40:	460b      	mov	r3, r1
 8002f42:	18db      	adds	r3, r3, r3
 8002f44:	643b      	str	r3, [r7, #64]	; 0x40
 8002f46:	4613      	mov	r3, r2
 8002f48:	eb42 0303 	adc.w	r3, r2, r3
 8002f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002f52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002f56:	f7fd f99b 	bl	8000290 <__aeabi_uldivmod>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4b3b      	ldr	r3, [pc, #236]	; (8003050 <UART_SetConfig+0x2d4>)
 8002f62:	fba3 2301 	umull	r2, r3, r3, r1
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2264      	movs	r2, #100	; 0x64
 8002f6a:	fb02 f303 	mul.w	r3, r2, r3
 8002f6e:	1acb      	subs	r3, r1, r3
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <UART_SetConfig+0x2d4>)
 8002f78:	fba3 2302 	umull	r2, r3, r3, r2
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f84:	441c      	add	r4, r3
 8002f86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f90:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002f94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	1891      	adds	r1, r2, r2
 8002f9e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002fa0:	415b      	adcs	r3, r3
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fa8:	4641      	mov	r1, r8
 8002faa:	1851      	adds	r1, r2, r1
 8002fac:	6339      	str	r1, [r7, #48]	; 0x30
 8002fae:	4649      	mov	r1, r9
 8002fb0:	414b      	adcs	r3, r1
 8002fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002fc0:	4659      	mov	r1, fp
 8002fc2:	00cb      	lsls	r3, r1, #3
 8002fc4:	4651      	mov	r1, sl
 8002fc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fca:	4651      	mov	r1, sl
 8002fcc:	00ca      	lsls	r2, r1, #3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	189b      	adds	r3, r3, r2
 8002fd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fdc:	464b      	mov	r3, r9
 8002fde:	460a      	mov	r2, r1
 8002fe0:	eb42 0303 	adc.w	r3, r2, r3
 8002fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ff4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	18db      	adds	r3, r3, r3
 8003000:	62bb      	str	r3, [r7, #40]	; 0x28
 8003002:	4613      	mov	r3, r2
 8003004:	eb42 0303 	adc.w	r3, r2, r3
 8003008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800300e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003012:	f7fd f93d 	bl	8000290 <__aeabi_uldivmod>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <UART_SetConfig+0x2d4>)
 800301c:	fba3 1302 	umull	r1, r3, r3, r2
 8003020:	095b      	lsrs	r3, r3, #5
 8003022:	2164      	movs	r1, #100	; 0x64
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	3332      	adds	r3, #50	; 0x32
 800302e:	4a08      	ldr	r2, [pc, #32]	; (8003050 <UART_SetConfig+0x2d4>)
 8003030:	fba2 2303 	umull	r2, r3, r2, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	f003 0207 	and.w	r2, r3, #7
 800303a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4422      	add	r2, r4
 8003042:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003044:	e105      	b.n	8003252 <UART_SetConfig+0x4d6>
 8003046:	bf00      	nop
 8003048:	40011000 	.word	0x40011000
 800304c:	40011400 	.word	0x40011400
 8003050:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003058:	2200      	movs	r2, #0
 800305a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800305e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003062:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003066:	4642      	mov	r2, r8
 8003068:	464b      	mov	r3, r9
 800306a:	1891      	adds	r1, r2, r2
 800306c:	6239      	str	r1, [r7, #32]
 800306e:	415b      	adcs	r3, r3
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003076:	4641      	mov	r1, r8
 8003078:	1854      	adds	r4, r2, r1
 800307a:	4649      	mov	r1, r9
 800307c:	eb43 0501 	adc.w	r5, r3, r1
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	00eb      	lsls	r3, r5, #3
 800308a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800308e:	00e2      	lsls	r2, r4, #3
 8003090:	4614      	mov	r4, r2
 8003092:	461d      	mov	r5, r3
 8003094:	4643      	mov	r3, r8
 8003096:	18e3      	adds	r3, r4, r3
 8003098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800309c:	464b      	mov	r3, r9
 800309e:	eb45 0303 	adc.w	r3, r5, r3
 80030a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030c2:	4629      	mov	r1, r5
 80030c4:	008b      	lsls	r3, r1, #2
 80030c6:	4621      	mov	r1, r4
 80030c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030cc:	4621      	mov	r1, r4
 80030ce:	008a      	lsls	r2, r1, #2
 80030d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80030d4:	f7fd f8dc 	bl	8000290 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4b60      	ldr	r3, [pc, #384]	; (8003260 <UART_SetConfig+0x4e4>)
 80030de:	fba3 2302 	umull	r2, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	011c      	lsls	r4, r3, #4
 80030e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030ea:	2200      	movs	r2, #0
 80030ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030f0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80030f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80030f8:	4642      	mov	r2, r8
 80030fa:	464b      	mov	r3, r9
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	61b9      	str	r1, [r7, #24]
 8003100:	415b      	adcs	r3, r3
 8003102:	61fb      	str	r3, [r7, #28]
 8003104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003108:	4641      	mov	r1, r8
 800310a:	1851      	adds	r1, r2, r1
 800310c:	6139      	str	r1, [r7, #16]
 800310e:	4649      	mov	r1, r9
 8003110:	414b      	adcs	r3, r1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003120:	4659      	mov	r1, fp
 8003122:	00cb      	lsls	r3, r1, #3
 8003124:	4651      	mov	r1, sl
 8003126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800312a:	4651      	mov	r1, sl
 800312c:	00ca      	lsls	r2, r1, #3
 800312e:	4610      	mov	r0, r2
 8003130:	4619      	mov	r1, r3
 8003132:	4603      	mov	r3, r0
 8003134:	4642      	mov	r2, r8
 8003136:	189b      	adds	r3, r3, r2
 8003138:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800313c:	464b      	mov	r3, r9
 800313e:	460a      	mov	r2, r1
 8003140:	eb42 0303 	adc.w	r3, r2, r3
 8003144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	67bb      	str	r3, [r7, #120]	; 0x78
 8003152:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003154:	f04f 0200 	mov.w	r2, #0
 8003158:	f04f 0300 	mov.w	r3, #0
 800315c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003160:	4649      	mov	r1, r9
 8003162:	008b      	lsls	r3, r1, #2
 8003164:	4641      	mov	r1, r8
 8003166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800316a:	4641      	mov	r1, r8
 800316c:	008a      	lsls	r2, r1, #2
 800316e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003172:	f7fd f88d 	bl	8000290 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b39      	ldr	r3, [pc, #228]	; (8003260 <UART_SetConfig+0x4e4>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	; 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	3332      	adds	r3, #50	; 0x32
 800318e:	4a34      	ldr	r2, [pc, #208]	; (8003260 <UART_SetConfig+0x4e4>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319a:	441c      	add	r4, r3
 800319c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031a0:	2200      	movs	r2, #0
 80031a2:	673b      	str	r3, [r7, #112]	; 0x70
 80031a4:	677a      	str	r2, [r7, #116]	; 0x74
 80031a6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80031aa:	4642      	mov	r2, r8
 80031ac:	464b      	mov	r3, r9
 80031ae:	1891      	adds	r1, r2, r2
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	415b      	adcs	r3, r3
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031ba:	4641      	mov	r1, r8
 80031bc:	1851      	adds	r1, r2, r1
 80031be:	6039      	str	r1, [r7, #0]
 80031c0:	4649      	mov	r1, r9
 80031c2:	414b      	adcs	r3, r1
 80031c4:	607b      	str	r3, [r7, #4]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031d2:	4659      	mov	r1, fp
 80031d4:	00cb      	lsls	r3, r1, #3
 80031d6:	4651      	mov	r1, sl
 80031d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031dc:	4651      	mov	r1, sl
 80031de:	00ca      	lsls	r2, r1, #3
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	4603      	mov	r3, r0
 80031e6:	4642      	mov	r2, r8
 80031e8:	189b      	adds	r3, r3, r2
 80031ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80031ec:	464b      	mov	r3, r9
 80031ee:	460a      	mov	r2, r1
 80031f0:	eb42 0303 	adc.w	r3, r2, r3
 80031f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	663b      	str	r3, [r7, #96]	; 0x60
 8003200:	667a      	str	r2, [r7, #100]	; 0x64
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800320e:	4649      	mov	r1, r9
 8003210:	008b      	lsls	r3, r1, #2
 8003212:	4641      	mov	r1, r8
 8003214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003218:	4641      	mov	r1, r8
 800321a:	008a      	lsls	r2, r1, #2
 800321c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003220:	f7fd f836 	bl	8000290 <__aeabi_uldivmod>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <UART_SetConfig+0x4e4>)
 800322a:	fba3 1302 	umull	r1, r3, r3, r2
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2164      	movs	r1, #100	; 0x64
 8003232:	fb01 f303 	mul.w	r3, r1, r3
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	3332      	adds	r3, #50	; 0x32
 800323c:	4a08      	ldr	r2, [pc, #32]	; (8003260 <UART_SetConfig+0x4e4>)
 800323e:	fba2 2303 	umull	r2, r3, r2, r3
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	f003 020f 	and.w	r2, r3, #15
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4422      	add	r2, r4
 8003250:	609a      	str	r2, [r3, #8]
}
 8003252:	bf00      	nop
 8003254:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	51eb851f 	.word	0x51eb851f

08003264 <VL53L0X_GetDeviceInfo>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f004 fb2b 	bl	80078d0 <VL53L0X_get_device_info>
 800327a:	4603      	mov	r3, r0
 800327c:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 800327e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(
    VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_offset_calibration_data_micro_meter(
 8003298:	6839      	ldr	r1, [r7, #0]
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f001 fcd0 	bl	8004c40 <VL53L0X_get_offset_calibration_data_micro_meter>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]
      Dev, pOffsetCalibrationDataMicroMeter);

  LOG_FUNCTION_END(Status);
  return Status;
 80032a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <VL53L0X_DataInit>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev) {
 80032b0:	b5b0      	push	{r4, r5, r7, lr}
 80032b2:	b096      	sub	sp, #88	; 0x58
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  LOG_FUNCTION_START("");

  /* by default the I2C is running at 1V8 if you want to change it you
   * need to include this define at compilation level. */
#ifdef USE_I2C_2V8
  Status = VL53L0X_UpdateByte(
 80032be:	2301      	movs	r3, #1
 80032c0:	22fe      	movs	r2, #254	; 0xfe
 80032c2:	2189      	movs	r1, #137	; 0x89
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f004 fd7a 	bl	8007dbe <VL53L0X_UpdateByte>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      Dev, VL53L0X_REG_VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, 0xFE, 0x01);
#endif

  /* Set I2C standard mode */
  if (Status == VL53L0X_ERROR_NONE)
 80032d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d107      	bne.n	80032e8 <VL53L0X_DataInit+0x38>
    Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80032d8:	2200      	movs	r2, #0
 80032da:	2188      	movs	r1, #136	; 0x88
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f004 fd2a 	bl	8007d36 <VL53L0X_WrByte>
 80032e2:	4603      	mov	r3, r0
 80032e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* read WHO_AM_I */
  uint8_t b;
  Status = VL53L0X_RdByte(Dev, 0xC0, &b);
 80032e8:	f107 030e 	add.w	r3, r7, #14
 80032ec:	461a      	mov	r2, r3
 80032ee:	21c0      	movs	r1, #192	; 0xc0
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f004 fda6 	bl	8007e42 <VL53L0X_RdByte>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  // Serial.print("WHOAMI: 0x"); Serial.println(b, HEX);

  /* read WHO_AM_I */

  VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  if (Status == VL53L0X_ERROR_NONE)
    Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

  /* Default value is 1000 for Linearity Corrective Gain */
  PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800330a:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

  /* Dmax default Parameter */
  PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003314:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
  PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a9e      	ldr	r2, [pc, #632]	; (8003594 <VL53L0X_DataInit+0x2e4>)
 800331c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
                (FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

  /* Set Default static parameters
   *set first temporary values 9.44MHz * 65536 = 618660 */
  VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a9d      	ldr	r2, [pc, #628]	; (8003598 <VL53L0X_DataInit+0x2e8>)
 8003324:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

  /* Set Default XTalkCompensationRateMegaCps to 0  */
  VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	621a      	str	r2, [r3, #32]

  /* Get default parameters */
  Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800332e:	f107 0310 	add.w	r3, r7, #16
 8003332:	4619      	mov	r1, r3
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 faa9 	bl	800388c <VL53L0X_GetDeviceParameters>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE) {
 8003340:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003344:	2b00      	cmp	r3, #0
 8003346:	d112      	bne.n	800336e <VL53L0X_DataInit+0xbe>
    /* initialize PAL values */
    CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003348:	2300      	movs	r3, #0
 800334a:	743b      	strb	r3, [r7, #16]
    CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800334c:	2300      	movs	r3, #0
 800334e:	747b      	strb	r3, [r7, #17]
    PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f103 0410 	add.w	r4, r3, #16
 8003356:	f107 0510 	add.w	r5, r7, #16
 800335a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800335c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800335e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003366:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800336a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  }

  /* Sigma estimator variable */
  PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2264      	movs	r2, #100	; 0x64
 8003372:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
  PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f44f 7261 	mov.w	r2, #900	; 0x384
 800337c:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
  PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003386:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
  PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003390:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

  /* Use internal default settings */
  PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

  Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800339c:	2201      	movs	r2, #1
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f004 fcc8 	bl	8007d36 <VL53L0X_WrByte>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033ae:	4313      	orrs	r3, r2
 80033b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80033b4:	2201      	movs	r2, #1
 80033b6:	21ff      	movs	r1, #255	; 0xff
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f004 fcbc 	bl	8007d36 <VL53L0X_WrByte>
 80033be:	4603      	mov	r3, r0
 80033c0:	461a      	mov	r2, r3
 80033c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033c6:	4313      	orrs	r3, r2
 80033c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80033cc:	2200      	movs	r2, #0
 80033ce:	2100      	movs	r1, #0
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f004 fcb0 	bl	8007d36 <VL53L0X_WrByte>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033de:	4313      	orrs	r3, r2
 80033e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80033e4:	f107 030f 	add.w	r3, r7, #15
 80033e8:	461a      	mov	r2, r3
 80033ea:	2191      	movs	r1, #145	; 0x91
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f004 fd28 	bl	8007e42 <VL53L0X_RdByte>
 80033f2:	4603      	mov	r3, r0
 80033f4:	461a      	mov	r2, r3
 80033f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  PALDevDataSet(Dev, StopVariable, StopVariable);
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003408:	2201      	movs	r2, #1
 800340a:	2100      	movs	r1, #0
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f004 fc92 	bl	8007d36 <VL53L0X_WrByte>
 8003412:	4603      	mov	r3, r0
 8003414:	461a      	mov	r2, r3
 8003416:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800341a:	4313      	orrs	r3, r2
 800341c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003420:	2200      	movs	r2, #0
 8003422:	21ff      	movs	r1, #255	; 0xff
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f004 fc86 	bl	8007d36 <VL53L0X_WrByte>
 800342a:	4603      	mov	r3, r0
 800342c:	461a      	mov	r2, r3
 800342e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003432:	4313      	orrs	r3, r2
 8003434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003438:	2200      	movs	r2, #0
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f004 fc7a 	bl	8007d36 <VL53L0X_WrByte>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800344a:	4313      	orrs	r3, r2
 800344c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Enable all check */
  for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003450:	2300      	movs	r3, #0
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	2b05      	cmp	r3, #5
 8003458:	dc16      	bgt.n	8003488 <VL53L0X_DataInit+0x1d8>
    if (Status == VL53L0X_ERROR_NONE)
 800345a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800345e:	2b00      	cmp	r3, #0
 8003460:	d111      	bne.n	8003486 <VL53L0X_DataInit+0x1d6>
      Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003464:	b29b      	uxth	r3, r3
 8003466:	2201      	movs	r2, #1
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 fd40 	bl	8003ef0 <VL53L0X_SetLimitCheckEnable>
 8003470:	4603      	mov	r3, r0
 8003472:	461a      	mov	r2, r3
 8003474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003478:	4313      	orrs	r3, r2
 800347a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800347e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003480:	3301      	adds	r3, #1
 8003482:	653b      	str	r3, [r7, #80]	; 0x50
 8003484:	e7e6      	b.n	8003454 <VL53L0X_DataInit+0x1a4>
    else
      break;
 8003486:	bf00      	nop
  }

  /* Disable the following checks */
  if (Status == VL53L0X_ERROR_NONE)
 8003488:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800348c:	2b00      	cmp	r3, #0
 800348e:	d107      	bne.n	80034a0 <VL53L0X_DataInit+0x1f0>
    Status = VL53L0X_SetLimitCheckEnable(
 8003490:	2200      	movs	r2, #0
 8003492:	2102      	movs	r1, #2
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 fd2b 	bl	8003ef0 <VL53L0X_SetLimitCheckEnable>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

  if (Status == VL53L0X_ERROR_NONE)
 80034a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <VL53L0X_DataInit+0x208>
    Status = VL53L0X_SetLimitCheckEnable(
 80034a8:	2200      	movs	r2, #0
 80034aa:	2103      	movs	r1, #3
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fd1f 	bl	8003ef0 <VL53L0X_SetLimitCheckEnable>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

  if (Status == VL53L0X_ERROR_NONE)
 80034b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <VL53L0X_DataInit+0x220>
    Status = VL53L0X_SetLimitCheckEnable(
 80034c0:	2200      	movs	r2, #0
 80034c2:	2104      	movs	r1, #4
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 fd13 	bl	8003ef0 <VL53L0X_SetLimitCheckEnable>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

  if (Status == VL53L0X_ERROR_NONE)
 80034d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <VL53L0X_DataInit+0x238>
    Status = VL53L0X_SetLimitCheckEnable(
 80034d8:	2200      	movs	r2, #0
 80034da:	2105      	movs	r1, #5
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fd07 	bl	8003ef0 <VL53L0X_SetLimitCheckEnable>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

  /* Limit default values */
  if (Status == VL53L0X_ERROR_NONE) {
 80034e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d108      	bne.n	8003502 <VL53L0X_DataInit+0x252>
    Status =
        VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
 80034f0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80034f4:	2100      	movs	r1, #0
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fdaa 	bl	8004050 <VL53L0X_SetLimitCheckValue>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                                   (FixPoint1616_t)(18 * 65536));
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8003502:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003506:	2b00      	cmp	r3, #0
 8003508:	d108      	bne.n	800351c <VL53L0X_DataInit+0x26c>
    Status = VL53L0X_SetLimitCheckValue(
 800350a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800350e:	2101      	movs	r1, #1
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fd9d 	bl	8004050 <VL53L0X_SetLimitCheckValue>
 8003516:	4603      	mov	r3, r0
 8003518:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
        (FixPoint1616_t)(25 * 65536 / 100));
    /* 0.25 * 65536 */
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800351c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003520:	2b00      	cmp	r3, #0
 8003522:	d108      	bne.n	8003536 <VL53L0X_DataInit+0x286>
    Status = VL53L0X_SetLimitCheckValue(
 8003524:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003528:	2102      	movs	r1, #2
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fd90 	bl	8004050 <VL53L0X_SetLimitCheckValue>
 8003530:	4603      	mov	r3, r0
 8003532:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, (FixPoint1616_t)(35 * 65536));
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8003536:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800353a:	2b00      	cmp	r3, #0
 800353c:	d107      	bne.n	800354e <VL53L0X_DataInit+0x29e>
    Status = VL53L0X_SetLimitCheckValue(
 800353e:	2200      	movs	r2, #0
 8003540:	2103      	movs	r1, #3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fd84 	bl	8004050 <VL53L0X_SetLimitCheckValue>
 8003548:	4603      	mov	r3, r0
 800354a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        (FixPoint1616_t)(0 * 65536));
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800354e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <VL53L0X_DataInit+0x2c6>

    PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	22ff      	movs	r2, #255	; 0xff
 800355a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xFF);
 800355e:	22ff      	movs	r2, #255	; 0xff
 8003560:	2101      	movs	r1, #1
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f004 fbe7 	bl	8007d36 <VL53L0X_WrByte>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    /* Set PAL state to tell that we are waiting for call to
     * VL53L0X_StaticInit */
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
  }

  if (Status == VL53L0X_ERROR_NONE)
 8003576:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800357a:	2b00      	cmp	r3, #0
 800357c:	d103      	bne.n	8003586 <VL53L0X_DataInit+0x2d6>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115

  LOG_FUNCTION_END(Status);
  return Status;
 8003586:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800358a:	4618      	mov	r0, r3
 800358c:	3758      	adds	r7, #88	; 0x58
 800358e:	46bd      	mov	sp, r7
 8003590:	bdb0      	pop	{r4, r5, r7, pc}
 8003592:	bf00      	nop
 8003594:	00016b85 	.word	0x00016b85
 8003598:	000970a4 	.word	0x000970a4

0800359c <VL53L0X_StaticInit>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev) {
 800359c:	b5b0      	push	{r4, r5, r7, lr}
 800359e:	b09e      	sub	sp, #120	; 0x78
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80035aa:	f107 031c 	add.w	r3, r7, #28
 80035ae:	2240      	movs	r2, #64	; 0x40
 80035b0:	2100      	movs	r1, #0
 80035b2:	4618      	mov	r0, r3
 80035b4:	f004 fcfe 	bl	8007fb4 <memset>
  uint8_t *pTuningSettingBuffer;
  uint16_t tempword = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	837b      	strh	r3, [r7, #26]
  uint8_t tempbyte = 0;
 80035bc:	2300      	movs	r3, #0
 80035be:	767b      	strb	r3, [r7, #25]
  uint8_t UseInternalTuningSettings = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t count = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	663b      	str	r3, [r7, #96]	; 0x60
  uint8_t isApertureSpads = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	763b      	strb	r3, [r7, #24]
  uint32_t refSpadCount = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]
  uint8_t ApertureSpads = 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t vcselPulsePeriodPCLK;
  FixPoint1616_t seqTimeoutMilliSecs;

  LOG_FUNCTION_START("");

  Status = VL53L0X_get_info_from_device(Dev, 1);
 80035d8:	2101      	movs	r1, #1
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f002 f9f0 	bl	80059c0 <VL53L0X_get_info_from_device>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* set the ref spad from NVM */
  count = (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80035ec:	663b      	str	r3, [r7, #96]	; 0x60
  ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80035f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  /* NVM value invalid */
  if ((ApertureSpads > 1) || ((ApertureSpads == 1) && (count > 32)) ||
 80035f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d80d      	bhi.n	800361c <VL53L0X_StaticInit+0x80>
 8003600:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003604:	2b01      	cmp	r3, #1
 8003606:	d102      	bne.n	800360e <VL53L0X_StaticInit+0x72>
 8003608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800360a:	2b20      	cmp	r3, #32
 800360c:	d806      	bhi.n	800361c <VL53L0X_StaticInit+0x80>
 800360e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10e      	bne.n	8003634 <VL53L0X_StaticInit+0x98>
      ((ApertureSpads == 0) && (count > 12)))
 8003616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003618:	2b0c      	cmp	r3, #12
 800361a:	d90b      	bls.n	8003634 <VL53L0X_StaticInit+0x98>
    Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800361c:	f107 0218 	add.w	r2, r7, #24
 8003620:	f107 0314 	add.w	r3, r7, #20
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f001 fd0b 	bl	8005042 <VL53L0X_perform_ref_spad_management>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003632:	e001      	b.n	8003638 <VL53L0X_StaticInit+0x9c>
  else
	  // rm? https://electronics.stackexchange.com/questions/613378/vl53l0x-constantly-returns-range-error
//    Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);

  /* Initialize tuning settings buffer to prevent compiler warning. */
  pTuningSettingBuffer = DefaultTuningSettings;
 8003634:	4b94      	ldr	r3, [pc, #592]	; (8003888 <VL53L0X_StaticInit+0x2ec>)
 8003636:	66bb      	str	r3, [r7, #104]	; 0x68

  if (Status == VL53L0X_ERROR_NONE) {
 8003638:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10f      	bne.n	8003660 <VL53L0X_StaticInit+0xc4>
    UseInternalTuningSettings = PALDevDataGet(Dev, UseInternalTuningSettings);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003646:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    if (UseInternalTuningSettings == 0)
 800364a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <VL53L0X_StaticInit+0xc0>
      pTuningSettingBuffer = PALDevDataGet(Dev, pTuningSettingsPointer);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003658:	66bb      	str	r3, [r7, #104]	; 0x68
 800365a:	e001      	b.n	8003660 <VL53L0X_StaticInit+0xc4>
    else
      pTuningSettingBuffer = DefaultTuningSettings;
 800365c:	4b8a      	ldr	r3, [pc, #552]	; (8003888 <VL53L0X_StaticInit+0x2ec>)
 800365e:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  if (Status == VL53L0X_ERROR_NONE)
 8003660:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <VL53L0X_StaticInit+0xda>
    Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003668:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f003 fabe 	bl	8006bec <VL53L0X_load_tuning_settings>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set interrupt config to new sample ready */
  if (Status == VL53L0X_ERROR_NONE) {
 8003676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <VL53L0X_StaticInit+0xf8>
    Status = VL53L0X_SetGpioConfig(
 800367e:	2300      	movs	r3, #0
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	2304      	movs	r3, #4
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f001 f909 	bl	80048a0 <VL53L0X_SetGpioConfig>
 800368e:	4603      	mov	r3, r0
 8003690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Dev, 0, 0, VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
        VL53L0X_INTERRUPTPOLARITY_LOW);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8003694:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003698:	2b00      	cmp	r3, #0
 800369a:	d121      	bne.n	80036e0 <VL53L0X_StaticInit+0x144>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800369c:	2201      	movs	r2, #1
 800369e:	21ff      	movs	r1, #255	; 0xff
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f004 fb48 	bl	8007d36 <VL53L0X_WrByte>
 80036a6:	4603      	mov	r3, r0
 80036a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80036ac:	f107 031a 	add.w	r3, r7, #26
 80036b0:	461a      	mov	r2, r3
 80036b2:	2184      	movs	r1, #132	; 0x84
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f004 fbe5 	bl	8007e84 <VL53L0X_RdWord>
 80036ba:	4603      	mov	r3, r0
 80036bc:	461a      	mov	r2, r3
 80036be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80036c8:	2200      	movs	r2, #0
 80036ca:	21ff      	movs	r1, #255	; 0xff
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f004 fb32 	bl	8007d36 <VL53L0X_WrByte>
 80036d2:	4603      	mov	r3, r0
 80036d4:	461a      	mov	r2, r3
 80036d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80036da:	4313      	orrs	r3, r2
 80036dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80036e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d105      	bne.n	80036f4 <VL53L0X_StaticInit+0x158>
    VL53L0X_SETDEVICESPECIFICPARAMETER(
 80036e8:	8b7b      	ldrh	r3, [r7, #26]
 80036ea:	011b      	lsls	r3, r3, #4
 80036ec:	461a      	mov	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        Dev, OscFrequencyMHz, VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
  }

  /* After static init, some device parameters may be changed,
   * so update them */
  if (Status == VL53L0X_ERROR_NONE)
 80036f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d108      	bne.n	800370e <VL53L0X_StaticInit+0x172>
    Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f8c2 	bl	800388c <VL53L0X_GetDeviceParameters>
 8003708:	4603      	mov	r3, r0
 800370a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (Status == VL53L0X_ERROR_NONE) {
 800370e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003712:	2b00      	cmp	r3, #0
 8003714:	d110      	bne.n	8003738 <VL53L0X_StaticInit+0x19c>
    Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003716:	f107 0319 	add.w	r3, r7, #25
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f984 	bl	8003a2a <VL53L0X_GetFractionEnable>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (Status == VL53L0X_ERROR_NONE)
 8003728:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <VL53L0X_StaticInit+0x19c>
      PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003730:	7e7a      	ldrb	r2, [r7, #25]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131
  }

  if (Status == VL53L0X_ERROR_NONE)
 8003738:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10e      	bne.n	800375e <VL53L0X_StaticInit+0x1c2>
    PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f103 0410 	add.w	r4, r3, #16
 8003746:	f107 051c 	add.w	r5, r7, #28
 800374a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800374c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800374e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003756:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800375a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* read the sequence config and save it */
  if (Status == VL53L0X_ERROR_NONE) {
 800375e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003762:	2b00      	cmp	r3, #0
 8003764:	d111      	bne.n	800378a <VL53L0X_StaticInit+0x1ee>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
 8003766:	f107 0319 	add.w	r3, r7, #25
 800376a:	461a      	mov	r2, r3
 800376c:	2101      	movs	r1, #1
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f004 fb67 	bl	8007e42 <VL53L0X_RdByte>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    if (Status == VL53L0X_ERROR_NONE)
 800377a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <VL53L0X_StaticInit+0x1ee>
      PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003782:	7e7a      	ldrb	r2, [r7, #25]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  /* Disable MSRC and TCC by default */
  if (Status == VL53L0X_ERROR_NONE)
 800378a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <VL53L0X_StaticInit+0x206>
    Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_TCC, 0);
 8003792:	2200      	movs	r2, #0
 8003794:	2100      	movs	r1, #0
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f9a4 	bl	8003ae4 <VL53L0X_SetSequenceStepEnable>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  if (Status == VL53L0X_ERROR_NONE)
 80037a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <VL53L0X_StaticInit+0x21e>
    Status = VL53L0X_SetSequenceStepEnable(Dev, VL53L0X_SEQUENCESTEP_MSRC, 0);
 80037aa:	2200      	movs	r2, #0
 80037ac:	2102      	movs	r1, #2
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f998 	bl	8003ae4 <VL53L0X_SetSequenceStepEnable>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

  /* Set PAL State to standby */
  if (Status == VL53L0X_ERROR_NONE)
 80037ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <VL53L0X_StaticInit+0x22e>
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2203      	movs	r2, #3
 80037c6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

  /* Store pre-range vcsel period */
  if (Status == VL53L0X_ERROR_NONE) {
 80037ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <VL53L0X_StaticInit+0x24a>
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 80037d2:	f107 0313 	add.w	r3, r7, #19
 80037d6:	461a      	mov	r2, r3
 80037d8:	2100      	movs	r1, #0
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f96a 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                         &vcselPulsePeriodPCLK);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80037e6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <VL53L0X_StaticInit+0x25a>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod,
 80037ee:	7cfa      	ldrb	r2, [r7, #19]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                                       vcselPulsePeriodPCLK);
  }

  /* Store final-range vcsel period */
  if (Status == VL53L0X_ERROR_NONE) {
 80037f6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <VL53L0X_StaticInit+0x276>
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
 80037fe:	f107 0313 	add.w	r3, r7, #19
 8003802:	461a      	mov	r2, r3
 8003804:	2101      	movs	r1, #1
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f954 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 800380c:	4603      	mov	r3, r0
 800380e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                         &vcselPulsePeriodPCLK);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8003812:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <VL53L0X_StaticInit+0x286>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod,
 800381a:	7cfa      	ldrb	r2, [r7, #19]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
                                       vcselPulsePeriodPCLK);
  }

  /* Store pre-range timeout */
  if (Status == VL53L0X_ERROR_NONE) {
 8003822:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003826:	2b00      	cmp	r3, #0
 8003828:	d109      	bne.n	800383e <VL53L0X_StaticInit+0x2a2>
    Status = VL53L0X_GetSequenceStepTimeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	461a      	mov	r2, r3
 8003830:	2103      	movs	r1, #3
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 faa0 	bl	8003d78 <VL53L0X_GetSequenceStepTimeout>
 8003838:	4603      	mov	r3, r0
 800383a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
                                            &seqTimeoutMilliSecs);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800383e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <VL53L0X_StaticInit+0x2b2>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
                                       seqTimeoutMilliSecs);
  }

  /* Store final-range timeout */
  if (Status == VL53L0X_ERROR_NONE) {
 800384e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003852:	2b00      	cmp	r3, #0
 8003854:	d109      	bne.n	800386a <VL53L0X_StaticInit+0x2ce>
    Status = VL53L0X_GetSequenceStepTimeout(
 8003856:	f107 030c 	add.w	r3, r7, #12
 800385a:	461a      	mov	r2, r3
 800385c:	2104      	movs	r1, #4
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa8a 	bl	8003d78 <VL53L0X_GetSequenceStepTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE, &seqTimeoutMilliSecs);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800386a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800386e:	2b00      	cmp	r3, #0
 8003870:	d103      	bne.n	800387a <VL53L0X_StaticInit+0x2de>
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                                       seqTimeoutMilliSecs);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800387a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800387e:	4618      	mov	r0, r3
 8003880:	3770      	adds	r7, #112	; 0x70
 8003882:	46bd      	mov	sp, r7
 8003884:	bdb0      	pop	{r4, r5, r7, pc}
 8003886:	bf00      	nop
 8003888:	200001c8 	.word	0x200001c8

0800388c <VL53L0X_GetDeviceParameters>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
                            VL53L0X_DeviceParameters_t *pDeviceParameters) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
  int i;

  LOG_FUNCTION_START("");

  Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f8b0 	bl	8003a04 <VL53L0X_GetDeviceMode>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80038a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <VL53L0X_GetDeviceParameters+0x34>
    Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	3308      	adds	r3, #8
 80038b4:	4619      	mov	r1, r3
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa9e 	bl	8003df8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->InterMeasurementPeriodMilliSeconds));

  if (Status == VL53L0X_ERROR_NONE)
 80038c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <VL53L0X_GetDeviceParameters+0x42>
    pDeviceParameters->XTalkCompensationEnable = 0;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	731a      	strb	r2, [r3, #12]

  if (Status == VL53L0X_ERROR_NONE)
 80038ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <VL53L0X_GetDeviceParameters+0x5a>
    Status = VL53L0X_GetXTalkCompensationRateMegaCps(
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	3310      	adds	r3, #16
 80038da:	4619      	mov	r1, r3
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fad4 	bl	8003e8a <VL53L0X_GetXTalkCompensationRateMegaCps>
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->XTalkCompensationRateMegaCps));

  if (Status == VL53L0X_ERROR_NONE)
 80038e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d107      	bne.n	80038fe <VL53L0X_GetDeviceParameters+0x72>
    Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	3314      	adds	r3, #20
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fcc8 	bl	800328a <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80038fa:	4603      	mov	r3, r0
 80038fc:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->RangeOffsetMicroMeters));

  if (Status == VL53L0X_ERROR_NONE) {
 80038fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d133      	bne.n	800396e <VL53L0X_GetDeviceParameters+0xe2>
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b05      	cmp	r3, #5
 800390e:	dc2e      	bgt.n	800396e <VL53L0X_GetDeviceParameters+0xe2>
      /* get first the values, then the enables.
       * VL53L0X_GetLimitCheckValue will modify the enable
       * flags
       */
      if (Status == VL53L0X_ERROR_NONE) {
 8003910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d127      	bne.n	8003968 <VL53L0X_GetDeviceParameters+0xdc>
        Status |= VL53L0X_GetLimitCheckValue(
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	b299      	uxth	r1, r3
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	3308      	adds	r3, #8
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	4413      	add	r3, r2
 8003926:	3304      	adds	r3, #4
 8003928:	461a      	mov	r2, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fbf2 	bl	8004114 <VL53L0X_GetLimitCheckValue>
 8003930:	4603      	mov	r3, r0
 8003932:	461a      	mov	r2, r3
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	4313      	orrs	r3, r2
 8003938:	73fb      	strb	r3, [r7, #15]
            Dev, i, &(pDeviceParameters->LimitChecksValue[i]));
      } else {
        break;
      }
      if (Status == VL53L0X_ERROR_NONE) {
 800393a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d114      	bne.n	800396c <VL53L0X_GetDeviceParameters+0xe0>
        Status |= VL53L0X_GetLimitCheckEnable(
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	b299      	uxth	r1, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	3318      	adds	r3, #24
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4413      	add	r3, r2
 800394e:	461a      	mov	r2, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 fb59 	bl	8004008 <VL53L0X_GetLimitCheckEnable>
 8003956:	4603      	mov	r3, r0
 8003958:	461a      	mov	r2, r3
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	4313      	orrs	r3, r2
 800395e:	73fb      	strb	r3, [r7, #15]
    for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	3301      	adds	r3, #1
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	e7d0      	b.n	800390a <VL53L0X_GetDeviceParameters+0x7e>
        break;
 8003968:	bf00      	nop
 800396a:	e000      	b.n	800396e <VL53L0X_GetDeviceParameters+0xe2>
            Dev, i, &(pDeviceParameters->LimitChecksEnable[i]));
      } else {
        break;
 800396c:	bf00      	nop
      }
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d107      	bne.n	8003986 <VL53L0X_GetDeviceParameters+0xfa>
    Status = VL53L0X_GetWrapAroundCheckEnable(
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	333c      	adds	r3, #60	; 0x3c
 800397a:	4619      	mov	r1, r3
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fc57 	bl	8004230 <VL53L0X_GetWrapAroundCheckEnable>
 8003982:	4603      	mov	r3, r0
 8003984:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->WrapAroundCheckEnable));
  }

  /* Need to be done at the end as it uses VCSELPulsePeriod */
  if (Status == VL53L0X_ERROR_NONE) {
 8003986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d107      	bne.n	800399e <VL53L0X_GetDeviceParameters+0x112>
    Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	3304      	adds	r3, #4
 8003992:	4619      	mov	r1, r3
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 f87a 	bl	8003a8e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800399a:	4603      	mov	r3, r0
 800399c:	73fb      	strb	r3, [r7, #15]
        Dev, &(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800399e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes DeviceMode) {
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("%d", (int)DeviceMode);

  switch (DeviceMode) {
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	2b15      	cmp	r3, #21
 80039c0:	bf8c      	ite	hi
 80039c2:	2201      	movhi	r2, #1
 80039c4:	2200      	movls	r2, #0
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	d10e      	bne.n	80039ea <VL53L0X_SetDeviceMode+0x3e>
 80039cc:	2201      	movs	r2, #1
 80039ce:	409a      	lsls	r2, r3
 80039d0:	4b0b      	ldr	r3, [pc, #44]	; (8003a00 <VL53L0X_SetDeviceMode+0x54>)
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <VL53L0X_SetDeviceMode+0x3e>
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
  case VL53L0X_DEVICEMODE_GPIO_DRIVE:
  case VL53L0X_DEVICEMODE_GPIO_OSC:
    /* Supported modes */
    VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	741a      	strb	r2, [r3, #16]
    break;
 80039e8:	e001      	b.n	80039ee <VL53L0X_SetDeviceMode+0x42>
  default:
    /* Unsupported mode */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80039ea:	23f8      	movs	r3, #248	; 0xf8
 80039ec:	73fb      	strb	r3, [r7, #15]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 80039ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	0030000b 	.word	0x0030000b

08003a04 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
                                    VL53L0X_DeviceModes *pDeviceMode) {
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	7c1a      	ldrb	r2, [r3, #16]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <VL53L0X_GetFractionEnable>:

  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled) {
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b084      	sub	sp, #16
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	2109      	movs	r1, #9
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f004 fa00 	bl	8007e42 <VL53L0X_RdByte>
 8003a42:	4603      	mov	r3, r0
 8003a44:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <VL53L0X_GetFractionEnable+0x32>
    *pEnabled = (*pEnabled & 1);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	b2da      	uxtb	r2, r3
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 8003a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(
    VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_set_measurement_timing_budget_micro_seconds(
 8003a76:	6839      	ldr	r1, [r7, #0]
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f002 ff25 	bl	80068c8 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	73fb      	strb	r3, [r7, #15]
      Dev, MeasurementTimingBudgetMicroSeconds);

  LOG_FUNCTION_END(Status);

  return Status;
 8003a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(
    VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b084      	sub	sp, #16
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_measurement_timing_budget_micro_seconds(
 8003a9c:	6839      	ldr	r1, [r7, #0]
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f002 fff2 	bl	8006a88 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	73fb      	strb	r3, [r7, #15]
      Dev, pMeasurementTimingBudgetMicroSeconds);

  LOG_FUNCTION_END(Status);
  return Status;
 8003aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <VL53L0X_GetVcselPulsePeriod>:
  return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
                                          VL53L0X_VcselPeriod VcselPeriodType,
                                          uint8_t *pVCSELPulsePeriodPCLK) {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b086      	sub	sp, #24
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	460b      	mov	r3, r1
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4619      	mov	r1, r3
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f002 fec4 	bl	800685a <VL53L0X_get_vcsel_pulse_period>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	75fb      	strb	r3, [r7, #23]
                                          pVCSELPulsePeriodPCLK);

  LOG_FUNCTION_END(Status);
  return Status;
 8003ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error
VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
                              VL53L0X_SequenceStepId SequenceStepId,
                              uint8_t SequenceStepEnabled) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
 8003af0:	4613      	mov	r3, r2
 8003af2:	70bb      	strb	r3, [r7, #2]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 8003af8:	2300      	movs	r3, #0
 8003afa:	73fb      	strb	r3, [r7, #15]
  uint8_t SequenceConfigNew = 0;
 8003afc:	2300      	movs	r3, #0
 8003afe:	75bb      	strb	r3, [r7, #22]
  uint32_t MeasurementTimingBudgetMicroSeconds;
  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 8003b00:	f107 030f 	add.w	r3, r7, #15
 8003b04:	461a      	mov	r2, r3
 8003b06:	2101      	movs	r1, #1
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f004 f99a 	bl	8007e42 <VL53L0X_RdByte>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]

  SequenceConfigNew = SequenceConfig;
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	75bb      	strb	r3, [r7, #22]

  if (Status == VL53L0X_ERROR_NONE) {
 8003b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d159      	bne.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
    if (SequenceStepEnabled == 1) {
 8003b1e:	78bb      	ldrb	r3, [r7, #2]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d12b      	bne.n	8003b7c <VL53L0X_SetSequenceStepEnable+0x98>

      /* Enable requested sequence step
       */
      switch (SequenceStepId) {
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d825      	bhi.n	8003b76 <VL53L0X_SetSequenceStepEnable+0x92>
 8003b2a:	a201      	add	r2, pc, #4	; (adr r2, 8003b30 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b45 	.word	0x08003b45
 8003b34:	08003b4f 	.word	0x08003b4f
 8003b38:	08003b59 	.word	0x08003b59
 8003b3c:	08003b63 	.word	0x08003b63
 8003b40:	08003b6d 	.word	0x08003b6d
      case VL53L0X_SEQUENCESTEP_TCC:
        SequenceConfigNew |= 0x10;
 8003b44:	7dbb      	ldrb	r3, [r7, #22]
 8003b46:	f043 0310 	orr.w	r3, r3, #16
 8003b4a:	75bb      	strb	r3, [r7, #22]
        break;
 8003b4c:	e041      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_DSS:
        SequenceConfigNew |= 0x28;
 8003b4e:	7dbb      	ldrb	r3, [r7, #22]
 8003b50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003b54:	75bb      	strb	r3, [r7, #22]
        break;
 8003b56:	e03c      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_MSRC:
        SequenceConfigNew |= 0x04;
 8003b58:	7dbb      	ldrb	r3, [r7, #22]
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	75bb      	strb	r3, [r7, #22]
        break;
 8003b60:	e037      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_PRE_RANGE:
        SequenceConfigNew |= 0x40;
 8003b62:	7dbb      	ldrb	r3, [r7, #22]
 8003b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b68:	75bb      	strb	r3, [r7, #22]
        break;
 8003b6a:	e032      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
        SequenceConfigNew |= 0x80;
 8003b6c:	7dbb      	ldrb	r3, [r7, #22]
 8003b6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b72:	75bb      	strb	r3, [r7, #22]
        break;
 8003b74:	e02d      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      default:
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003b76:	23fc      	movs	r3, #252	; 0xfc
 8003b78:	75fb      	strb	r3, [r7, #23]
 8003b7a:	e02a      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      }
    } else {
      /* Disable requested sequence step
       */
      switch (SequenceStepId) {
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d825      	bhi.n	8003bce <VL53L0X_SetSequenceStepEnable+0xea>
 8003b82:	a201      	add	r2, pc, #4	; (adr r2, 8003b88 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003b9d 	.word	0x08003b9d
 8003b8c:	08003ba7 	.word	0x08003ba7
 8003b90:	08003bb1 	.word	0x08003bb1
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bc5 	.word	0x08003bc5
      case VL53L0X_SEQUENCESTEP_TCC:
        SequenceConfigNew &= 0xef;
 8003b9c:	7dbb      	ldrb	r3, [r7, #22]
 8003b9e:	f023 0310 	bic.w	r3, r3, #16
 8003ba2:	75bb      	strb	r3, [r7, #22]
        break;
 8003ba4:	e015      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_DSS:
        SequenceConfigNew &= 0xd7;
 8003ba6:	7dbb      	ldrb	r3, [r7, #22]
 8003ba8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8003bac:	75bb      	strb	r3, [r7, #22]
        break;
 8003bae:	e010      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_MSRC:
        SequenceConfigNew &= 0xfb;
 8003bb0:	7dbb      	ldrb	r3, [r7, #22]
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	75bb      	strb	r3, [r7, #22]
        break;
 8003bb8:	e00b      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_PRE_RANGE:
        SequenceConfigNew &= 0xbf;
 8003bba:	7dbb      	ldrb	r3, [r7, #22]
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bc0:	75bb      	strb	r3, [r7, #22]
        break;
 8003bc2:	e006      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
        SequenceConfigNew &= 0x7f;
 8003bc4:	7dbb      	ldrb	r3, [r7, #22]
 8003bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bca:	75bb      	strb	r3, [r7, #22]
        break;
 8003bcc:	e001      	b.n	8003bd2 <VL53L0X_SetSequenceStepEnable+0xee>
      default:
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003bce:	23fc      	movs	r3, #252	; 0xfc
 8003bd0:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  if (SequenceConfigNew != SequenceConfig) {
 8003bd2:	7bfb      	ldrb	r3, [r7, #15]
 8003bd4:	7dba      	ldrb	r2, [r7, #22]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d01e      	beq.n	8003c18 <VL53L0X_SetSequenceStepEnable+0x134>
    /* Apply New Setting */
    if (Status == VL53L0X_ERROR_NONE) {
 8003bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d107      	bne.n	8003bf2 <VL53L0X_SetSequenceStepEnable+0x10e>
      Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003be2:	7dbb      	ldrb	r3, [r7, #22]
 8003be4:	461a      	mov	r2, r3
 8003be6:	2101      	movs	r1, #1
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f004 f8a4 	bl	8007d36 <VL53L0X_WrByte>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	75fb      	strb	r3, [r7, #23]
                              SequenceConfigNew);
    }
    if (Status == VL53L0X_ERROR_NONE)
 8003bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d103      	bne.n	8003c02 <VL53L0X_SetSequenceStepEnable+0x11e>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	7dba      	ldrb	r2, [r7, #22]
 8003bfe:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

    /* Recalculate timing budget */
    if (Status == VL53L0X_ERROR_NONE) {
 8003c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <VL53L0X_SetSequenceStepEnable+0x134>
      VL53L0X_GETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	613b      	str	r3, [r7, #16]
                                MeasurementTimingBudgetMicroSeconds);

      VL53L0X_SetMeasurementTimingBudgetMicroSeconds(
 8003c10:	6939      	ldr	r1, [r7, #16]
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff ff28 	bl	8003a68 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    }
  }

  LOG_FUNCTION_END(Status);

  return Status;
 8003c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
                                    VL53L0X_SequenceStepId SequenceStepId,
                                    uint8_t SequenceConfig,
                                    uint8_t *pSequenceStepEnabled) {
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	607b      	str	r3, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	72fb      	strb	r3, [r7, #11]
 8003c32:	4613      	mov	r3, r2
 8003c34:	72bb      	strb	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	75fb      	strb	r3, [r7, #23]
  *pSequenceStepEnabled = 0;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	701a      	strb	r2, [r3, #0]
  LOG_FUNCTION_START("");

  switch (SequenceStepId) {
 8003c40:	7afb      	ldrb	r3, [r7, #11]
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d836      	bhi.n	8003cb4 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x90>
 8003c46:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x28>)
 8003c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4c:	08003c61 	.word	0x08003c61
 8003c50:	08003c73 	.word	0x08003c73
 8003c54:	08003c85 	.word	0x08003c85
 8003c58:	08003c97 	.word	0x08003c97
 8003c5c:	08003ca9 	.word	0x08003ca9
  case VL53L0X_SEQUENCESTEP_TCC:
    *pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003c60:	7abb      	ldrb	r3, [r7, #10]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	701a      	strb	r2, [r3, #0]
    break;
 8003c70:	e022      	b.n	8003cb8 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_DSS:
    *pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003c72:	7abb      	ldrb	r3, [r7, #10]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	701a      	strb	r2, [r3, #0]
    break;
 8003c82:	e019      	b.n	8003cb8 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_MSRC:
    *pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003c84:	7abb      	ldrb	r3, [r7, #10]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	701a      	strb	r2, [r3, #0]
    break;
 8003c94:	e010      	b.n	8003cb8 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_PRE_RANGE:
    *pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8003c96:	7abb      	ldrb	r3, [r7, #10]
 8003c98:	099b      	lsrs	r3, r3, #6
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	701a      	strb	r2, [r3, #0]
    break;
 8003ca6:	e007      	b.n	8003cb8 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
    *pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8003ca8:	7abb      	ldrb	r3, [r7, #10]
 8003caa:	09db      	lsrs	r3, r3, #7
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	701a      	strb	r2, [r3, #0]
    break;
 8003cb2:	e001      	b.n	8003cb8 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh+0x94>
  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003cb4:	23fc      	movs	r3, #252	; 0xfc
 8003cb6:	75fb      	strb	r3, [r7, #23]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8003cb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <VL53L0X_GetSequenceStepEnables>:
  return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(
    VL53L0X_DEV Dev,
    VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
  uint8_t SequenceConfig = 0;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	73bb      	strb	r3, [r7, #14]
  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &SequenceConfig);
 8003cda:	f107 030e 	add.w	r3, r7, #14
 8003cde:	461a      	mov	r2, r3
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f004 f8ad 	bl	8007e42 <VL53L0X_RdByte>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE) {
 8003cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <VL53L0X_GetSequenceStepEnables+0x3c>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
 8003cf4:	7bba      	ldrb	r2, [r7, #14]
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff92 	bl	8003c24 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8003d00:	4603      	mov	r3, r0
 8003d02:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->TccOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8003d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <VL53L0X_GetSequenceStepEnables+0x56>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
 8003d0c:	7bba      	ldrb	r2, [r7, #14]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	3302      	adds	r3, #2
 8003d12:	2101      	movs	r1, #1
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff85 	bl	8003c24 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->DssOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8003d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d108      	bne.n	8003d38 <VL53L0X_GetSequenceStepEnables+0x70>
    Status =
        sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
 8003d26:	7bba      	ldrb	r2, [r7, #14]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7ff ff78 	bl	8003c24 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8003d34:	4603      	mov	r3, r0
 8003d36:	73fb      	strb	r3, [r7, #15]
                              &pSchedulerSequenceSteps->MsrcOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8003d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d108      	bne.n	8003d52 <VL53L0X_GetSequenceStepEnables+0x8a>
    Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 8003d40:	7bba      	ldrb	r2, [r7, #14]
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	3303      	adds	r3, #3
 8003d46:	2103      	movs	r1, #3
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff6b 	bl	8003c24 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	73fb      	strb	r3, [r7, #15]
                                   SequenceConfig,
                                   &pSchedulerSequenceSteps->PreRangeOn);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8003d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d108      	bne.n	8003d6c <VL53L0X_GetSequenceStepEnables+0xa4>
    Status = sequence_step_enabled(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 8003d5a:	7bba      	ldrb	r2, [r7, #14]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	2104      	movs	r1, #4
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ff5e 	bl	8003c24 <_Z21sequence_step_enabledP13VL53L0X_Dev_thhPh>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	73fb      	strb	r3, [r7, #15]
                                   SequenceConfig,
                                   &pSchedulerSequenceSteps->FinalRangeOn);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8003d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <VL53L0X_GetSequenceStepTimeout>:
}

VL53L0X_Error
VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
                               VL53L0X_SequenceStepId SequenceStepId,
                               FixPoint1616_t *pTimeOutMilliSecs) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	460b      	mov	r3, r1
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	77fb      	strb	r3, [r7, #31]
  uint32_t TimeoutMicroSeconds;
  uint32_t WholeNumber_ms = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61bb      	str	r3, [r7, #24]
  uint32_t Fraction_ms = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  LOG_FUNCTION_START("");

  Status = get_sequence_step_timeout(Dev, SequenceStepId, &TimeoutMicroSeconds);
 8003d92:	f107 0210 	add.w	r2, r7, #16
 8003d96:	7afb      	ldrb	r3, [r7, #11]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f002 fb88 	bl	80064b0 <get_sequence_step_timeout>
 8003da0:	4603      	mov	r3, r0
 8003da2:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 8003da4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d11c      	bne.n	8003de6 <VL53L0X_GetSequenceStepTimeout+0x6e>
    WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8003db0:	fba2 2303 	umull	r2, r3, r2, r3
 8003db4:	099b      	lsrs	r3, r3, #6
 8003db6:	61bb      	str	r3, [r7, #24]
    Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	617b      	str	r3, [r7, #20]
    *pTimeOutMilliSecs =
        (WholeNumber_ms << 16) + (((Fraction_ms * 0xffff) + 500) / 1000);
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	0419      	lsls	r1, r3, #16
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	041b      	lsls	r3, r3, #16
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003dd8:	4a06      	ldr	r2, [pc, #24]	; (8003df4 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	18ca      	adds	r2, r1, r3
    *pTimeOutMilliSecs =
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	601a      	str	r2, [r3, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8003de6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3720      	adds	r7, #32
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	10624dd3 	.word	0x10624dd3

08003df8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(
    VL53L0X_DEV Dev, uint32_t *pInterMeasurementPeriodMilliSeconds) {
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint32_t IMPeriodMilliSeconds;

  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL, &osc_calibrate_val);
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	21f8      	movs	r1, #248	; 0xf8
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f004 f838 	bl	8007e84 <VL53L0X_RdWord>
 8003e14:	4603      	mov	r3, r0
 8003e16:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE) {
 8003e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
    Status = VL53L0X_RdDWord(Dev, VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	461a      	mov	r2, r3
 8003e26:	2104      	movs	r1, #4
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f004 f84c 	bl	8007ec6 <VL53L0X_RdDWord>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	73fb      	strb	r3, [r7, #15]
                             &IMPeriodMilliSeconds);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8003e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10c      	bne.n	8003e54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
    if (osc_calibrate_val != 0) {
 8003e3a:	89bb      	ldrh	r3, [r7, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d005      	beq.n	8003e4c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
      *pInterMeasurementPeriodMilliSeconds =
          IMPeriodMilliSeconds / osc_calibrate_val;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	89ba      	ldrh	r2, [r7, #12]
 8003e44:	fbb3 f2f2 	udiv	r2, r3, r2
      *pInterMeasurementPeriodMilliSeconds =
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	601a      	str	r2, [r3, #0]
    }
    VL53L0X_SETPARAMETERFIELD(Dev, InterMeasurementPeriodMilliSeconds,
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
                              *pInterMeasurementPeriodMilliSeconds);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8003e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <VL53L0X_GetXTalkCompensationEnable>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
                                   uint8_t *pXTalkCompensationEnable) {
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  uint8_t Temp8;
  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7f1b      	ldrb	r3, [r3, #28]
 8003e72:	73bb      	strb	r3, [r7, #14]
  *pXTalkCompensationEnable = Temp8;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	7bba      	ldrb	r2, [r7, #14]
 8003e78:	701a      	strb	r2, [r3, #0]

  LOG_FUNCTION_END(Status);
  return Status;
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <VL53L0X_GetXTalkCompensationRateMegaCps>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(
    VL53L0X_DEV Dev, FixPoint1616_t *pXTalkCompensationRateMegaCps) {
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t TempFix1616;

  LOG_FUNCTION_START("");

  Status =
      VL53L0X_RdWord(Dev, VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS,
 8003e98:	f107 030e 	add.w	r3, r7, #14
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2120      	movs	r1, #32
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f003 ffef 	bl	8007e84 <VL53L0X_RdWord>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	75fb      	strb	r3, [r7, #23]
                     (uint16_t *)&Value);
  if (Status == VL53L0X_ERROR_NONE) {
 8003eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d118      	bne.n	8003ee4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
    if (Value == 0) {
 8003eb2:	89fb      	ldrh	r3, [r7, #14]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
      /* the Xtalk is disabled return value from memory */
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	613b      	str	r3, [r7, #16]
      *pXTalkCompensationRateMegaCps = TempFix1616;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	601a      	str	r2, [r3, #0]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 0);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	771a      	strb	r2, [r3, #28]
 8003eca:	e00b      	b.n	8003ee4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
    } else {
      TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	613b      	str	r3, [r7, #16]
      *pXTalkCompensationRateMegaCps = TempFix1616;
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	601a      	str	r2, [r3, #0]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, TempFix1616);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	693a      	ldr	r2, [r7, #16]
 8003edc:	621a      	str	r2, [r3, #32]
      VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable, 1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	771a      	strb	r2, [r3, #28]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8003ee4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <VL53L0X_SetLimitCheckEnable>:
  return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev,
                                          uint16_t LimitCheckId,
                                          uint8_t LimitCheckEnable) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	807b      	strh	r3, [r7, #2]
 8003efc:	4613      	mov	r3, r2
 8003efe:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f00:	2300      	movs	r3, #0
 8003f02:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t TempFix1616 = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  uint8_t LimitCheckEnableInt = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint8_t LimitCheckDisable = 0;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	73bb      	strb	r3, [r7, #14]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8003f10:	887b      	ldrh	r3, [r7, #2]
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d902      	bls.n	8003f1c <VL53L0X_SetLimitCheckEnable+0x2c>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003f16:	23fc      	movs	r3, #252	; 0xfc
 8003f18:	75fb      	strb	r3, [r7, #23]
 8003f1a:	e05b      	b.n	8003fd4 <VL53L0X_SetLimitCheckEnable+0xe4>
  } else {
    if (LimitCheckEnable == 0) {
 8003f1c:	787b      	ldrb	r3, [r7, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d106      	bne.n	8003f30 <VL53L0X_SetLimitCheckEnable+0x40>
      TempFix1616 = 0;
 8003f22:	2300      	movs	r3, #0
 8003f24:	613b      	str	r3, [r7, #16]
      LimitCheckEnableInt = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	73fb      	strb	r3, [r7, #15]
      LimitCheckDisable = 1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73bb      	strb	r3, [r7, #14]
 8003f2e:	e00a      	b.n	8003f46 <VL53L0X_SetLimitCheckEnable+0x56>

    } else {
      VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8003f30:	887b      	ldrh	r3, [r7, #2]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	330c      	adds	r3, #12
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]
                                     TempFix1616);
      LimitCheckDisable = 0;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	73bb      	strb	r3, [r7, #14]
      /* this to be sure to have either 0 or 1 */
      LimitCheckEnableInt = 1;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
    }

    switch (LimitCheckId) {
 8003f46:	887b      	ldrh	r3, [r7, #2]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	d841      	bhi.n	8003fd0 <VL53L0X_SetLimitCheckEnable+0xe0>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <VL53L0X_SetLimitCheckEnable+0x64>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f6d 	.word	0x08003f6d
 8003f58:	08003f77 	.word	0x08003f77
 8003f5c:	08003f8d 	.word	0x08003f8d
 8003f60:	08003f97 	.word	0x08003f97
 8003f64:	08003fa1 	.word	0x08003fa1
 8003f68:	08003fb9 	.word	0x08003fb9

    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                     VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                     LimitCheckEnableInt);

      break;
 8003f74:	e02e      	b.n	8003fd4 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

      Status = VL53L0X_WrWord(
          Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
          VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	0a5b      	lsrs	r3, r3, #9
      Status = VL53L0X_WrWord(
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2144      	movs	r1, #68	; 0x44
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f003 fefa 	bl	8007d7a <VL53L0X_WrWord>
 8003f86:	4603      	mov	r3, r0
 8003f88:	75fb      	strb	r3, [r7, #23]

      break;
 8003f8a:	e023      	b.n	8003fd4 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	7bfa      	ldrb	r2, [r7, #15]
 8003f90:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
                                     VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                     LimitCheckEnableInt);

      break;
 8003f94:	e01e      	b.n	8003fd4 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7bfa      	ldrb	r2, [r7, #15]
 8003f9a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
                                     VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                     LimitCheckEnableInt);

      break;
 8003f9e:	e019      	b.n	8003fd4 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

      Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003fa0:	7bbb      	ldrb	r3, [r7, #14]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	737b      	strb	r3, [r7, #13]
      Status =
          VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xFE, Temp8);
 8003fa6:	7b7b      	ldrb	r3, [r7, #13]
 8003fa8:	22fe      	movs	r2, #254	; 0xfe
 8003faa:	2160      	movs	r1, #96	; 0x60
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f003 ff06 	bl	8007dbe <VL53L0X_UpdateByte>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      break;
 8003fb6:	e00d      	b.n	8003fd4 <VL53L0X_SetLimitCheckEnable+0xe4>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

      Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8003fb8:	7bbb      	ldrb	r3, [r7, #14]
 8003fba:	011b      	lsls	r3, r3, #4
 8003fbc:	737b      	strb	r3, [r7, #13]
      Status =
          VL53L0X_UpdateByte(Dev, VL53L0X_REG_MSRC_CONFIG_CONTROL, 0xEF, Temp8);
 8003fbe:	7b7b      	ldrb	r3, [r7, #13]
 8003fc0:	22ef      	movs	r2, #239	; 0xef
 8003fc2:	2160      	movs	r1, #96	; 0x60
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f003 fefa 	bl	8007dbe <VL53L0X_UpdateByte>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	75fb      	strb	r3, [r7, #23]

      break;
 8003fce:	e001      	b.n	8003fd4 <VL53L0X_SetLimitCheckEnable+0xe4>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003fd0:	23fc      	movs	r3, #252	; 0xfc
 8003fd2:	75fb      	strb	r3, [r7, #23]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8003fd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10f      	bne.n	8003ffc <VL53L0X_SetLimitCheckEnable+0x10c>
    if (LimitCheckEnable == 0) {
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <VL53L0X_SetLimitCheckEnable+0x100>
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 8003fe2:	887b      	ldrh	r3, [r7, #2]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003fee:	e005      	b.n	8003ffc <VL53L0X_SetLimitCheckEnable+0x10c>
    } else {
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8003ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev,
                                          uint16_t LimitCheckId,
                                          uint8_t *pLimitCheckEnable) {
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	460b      	mov	r3, r1
 8004012:	607a      	str	r2, [r7, #4]
 8004014:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004016:	2300      	movs	r3, #0
 8004018:	75fb      	strb	r3, [r7, #23]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d905      	bls.n	800402c <VL53L0X_GetLimitCheckEnable+0x24>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004020:	23fc      	movs	r3, #252	; 0xfc
 8004022:	75fb      	strb	r3, [r7, #23]
    *pLimitCheckEnable = 0;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
 800402a:	e008      	b.n	800403e <VL53L0X_GetLimitCheckEnable+0x36>
  } else {
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 800402c:	897b      	ldrh	r3, [r7, #10]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004036:	75bb      	strb	r3, [r7, #22]
    *pLimitCheckEnable = Temp8;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7dba      	ldrb	r2, [r7, #22]
 800403c:	701a      	strb	r2, [r3, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800403e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004042:	4618      	mov	r0, r3
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
                                         FixPoint1616_t LimitCheckValue) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	460b      	mov	r3, r1
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]
  uint8_t Temp8;

  LOG_FUNCTION_START("");

  VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, Temp8);
 8004062:	897b      	ldrh	r3, [r7, #10]
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800406c:	75bb      	strb	r3, [r7, #22]

  if (Temp8 == 0) { /* disabled write only internal value */
 800406e:	7dbb      	ldrb	r3, [r7, #22]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d107      	bne.n	8004084 <VL53L0X_SetLimitCheckValue+0x34>
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8004074:	897b      	ldrh	r3, [r7, #10]
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	330c      	adds	r3, #12
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e040      	b.n	8004106 <VL53L0X_SetLimitCheckValue+0xb6>
                                   LimitCheckValue);
  } else {

    switch (LimitCheckId) {
 8004084:	897b      	ldrh	r3, [r7, #10]
 8004086:	2b05      	cmp	r3, #5
 8004088:	d830      	bhi.n	80040ec <VL53L0X_SetLimitCheckValue+0x9c>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <VL53L0X_SetLimitCheckValue+0x40>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a9 	.word	0x080040a9
 8004094:	080040b1 	.word	0x080040b1
 8004098:	080040c7 	.word	0x080040c7
 800409c:	080040cf 	.word	0x080040cf
 80040a0:	080040d7 	.word	0x080040d7
 80040a4:	080040d7 	.word	0x080040d7

    case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	635a      	str	r2, [r3, #52]	; 0x34
                                     VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                     LimitCheckValue);
      break;
 80040ae:	e01f      	b.n	80040f0 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

      Status = VL53L0X_WrWord(
          Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
          VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0a5b      	lsrs	r3, r3, #9
      Status = VL53L0X_WrWord(
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	2144      	movs	r1, #68	; 0x44
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f003 fe5d 	bl	8007d7a <VL53L0X_WrWord>
 80040c0:	4603      	mov	r3, r0
 80040c2:	75fb      	strb	r3, [r7, #23]

      break;
 80040c4:	e014      	b.n	80040f0 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	63da      	str	r2, [r3, #60]	; 0x3c
                                     VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                     LimitCheckValue);

      break;
 80040cc:	e010      	b.n	80040f0 <VL53L0X_SetLimitCheckValue+0xa0>

    case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

      /* internal computation: */
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	641a      	str	r2, [r3, #64]	; 0x40
                                     VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                     LimitCheckValue);

      break;
 80040d4:	e00c      	b.n	80040f0 <VL53L0X_SetLimitCheckValue+0xa0>
    case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
    case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

      Status =
          VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
                         VL53L0X_FIXPOINT1616TOFIXPOINT97(LimitCheckValue));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	0a5b      	lsrs	r3, r3, #9
          VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
 80040da:	b29b      	uxth	r3, r3
 80040dc:	461a      	mov	r2, r3
 80040de:	2164      	movs	r1, #100	; 0x64
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f003 fe4a 	bl	8007d7a <VL53L0X_WrWord>
 80040e6:	4603      	mov	r3, r0
 80040e8:	75fb      	strb	r3, [r7, #23]

      break;
 80040ea:	e001      	b.n	80040f0 <VL53L0X_SetLimitCheckValue+0xa0>

    default:
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 80040ec:	23fc      	movs	r3, #252	; 0xfc
 80040ee:	75fb      	strb	r3, [r7, #23]
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80040f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <VL53L0X_SetLimitCheckValue+0xb6>
      VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 80040f8:	897b      	ldrh	r3, [r7, #10]
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	330c      	adds	r3, #12
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	605a      	str	r2, [r3, #4]
                                     LimitCheckValue);
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8004106:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop

08004114 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
                                         FixPoint1616_t *pLimitCheckValue) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	460b      	mov	r3, r1
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	817b      	strh	r3, [r7, #10]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004122:	2300      	movs	r3, #0
 8004124:	77fb      	strb	r3, [r7, #31]
  uint8_t EnableZeroValue = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	77bb      	strb	r3, [r7, #30]
  uint16_t Temp16;
  FixPoint1616_t TempFix1616;

  LOG_FUNCTION_START("");

  switch (LimitCheckId) {
 800412a:	897b      	ldrh	r3, [r7, #10]
 800412c:	2b05      	cmp	r3, #5
 800412e:	d847      	bhi.n	80041c0 <VL53L0X_GetLimitCheckValue+0xac>
 8004130:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <VL53L0X_GetLimitCheckValue+0x24>)
 8004132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004136:	bf00      	nop
 8004138:	08004151 	.word	0x08004151
 800413c:	0800415d 	.word	0x0800415d
 8004140:	08004183 	.word	0x08004183
 8004144:	0800418f 	.word	0x0800418f
 8004148:	0800419b 	.word	0x0800419b
 800414c:	0800419b 	.word	0x0800419b

  case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004154:	61bb      	str	r3, [r7, #24]
                                   VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
                                   TempFix1616);
    EnableZeroValue = 0;
 8004156:	2300      	movs	r3, #0
 8004158:	77bb      	strb	r3, [r7, #30]
    break;
 800415a:	e033      	b.n	80041c4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
    Status = VL53L0X_RdWord(
 800415c:	f107 0316 	add.w	r3, r7, #22
 8004160:	461a      	mov	r2, r3
 8004162:	2144      	movs	r1, #68	; 0x44
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f003 fe8d 	bl	8007e84 <VL53L0X_RdWord>
 800416a:	4603      	mov	r3, r0
 800416c:	77fb      	strb	r3, [r7, #31]
        Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 800416e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <VL53L0X_GetLimitCheckValue+0x68>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004176:	8afb      	ldrh	r3, [r7, #22]
 8004178:	025b      	lsls	r3, r3, #9
 800417a:	61bb      	str	r3, [r7, #24]

    EnableZeroValue = 1;
 800417c:	2301      	movs	r3, #1
 800417e:	77bb      	strb	r3, [r7, #30]
    break;
 8004180:	e020      	b.n	80041c4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	61bb      	str	r3, [r7, #24]
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
                                   TempFix1616);
    EnableZeroValue = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	77bb      	strb	r3, [r7, #30]
    break;
 800418c:	e01a      	b.n	80041c4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
    /* internal computation: */
    VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	61bb      	str	r3, [r7, #24]
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   TempFix1616);
    EnableZeroValue = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	77bb      	strb	r3, [r7, #30]
    break;
 8004198:	e014      	b.n	80041c4 <VL53L0X_GetLimitCheckValue+0xb0>

  case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
  case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
 800419a:	f107 0316 	add.w	r3, r7, #22
 800419e:	461a      	mov	r2, r3
 80041a0:	2164      	movs	r1, #100	; 0x64
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f003 fe6e 	bl	8007e84 <VL53L0X_RdWord>
 80041a8:	4603      	mov	r3, r0
 80041aa:	77fb      	strb	r3, [r7, #31]
                            &Temp16);
    if (Status == VL53L0X_ERROR_NONE)
 80041ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <VL53L0X_GetLimitCheckValue+0xa6>
      TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80041b4:	8afb      	ldrh	r3, [r7, #22]
 80041b6:	025b      	lsls	r3, r3, #9
 80041b8:	61bb      	str	r3, [r7, #24]

    EnableZeroValue = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	77bb      	strb	r3, [r7, #30]
    break;
 80041be:	e001      	b.n	80041c4 <VL53L0X_GetLimitCheckValue+0xb0>

  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 80041c0:	23fc      	movs	r3, #252	; 0xfc
 80041c2:	77fb      	strb	r3, [r7, #31]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80041c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d12a      	bne.n	8004222 <VL53L0X_GetLimitCheckValue+0x10e>

    if (EnableZeroValue == 1) {
 80041cc:	7fbb      	ldrb	r3, [r7, #30]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d124      	bne.n	800421c <VL53L0X_GetLimitCheckValue+0x108>

      if (TempFix1616 == 0) {
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d110      	bne.n	80041fa <VL53L0X_GetLimitCheckValue+0xe6>
        /* disabled: return value from memory */
        VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 80041d8:	897b      	ldrh	r3, [r7, #10]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	330c      	adds	r3, #12
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	61bb      	str	r3, [r7, #24]
                                       TempFix1616);
        *pLimitCheckValue = TempFix1616;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 0);
 80041ec:	897b      	ldrh	r3, [r7, #10]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80041f8:	e013      	b.n	8004222 <VL53L0X_GetLimitCheckValue+0x10e>
      } else {
        *pLimitCheckValue = TempFix1616;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	601a      	str	r2, [r3, #0]
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue, LimitCheckId,
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	330c      	adds	r3, #12
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	69ba      	ldr	r2, [r7, #24]
 800420c:	605a      	str	r2, [r3, #4]
                                       TempFix1616);
        VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId, 1);
 800420e:	897b      	ldrh	r3, [r7, #10]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800421a:	e002      	b.n	8004222 <VL53L0X_GetLimitCheckValue+0x10e>
      }
    } else {
      *pLimitCheckValue = TempFix1616;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	601a      	str	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8004222:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop

08004230 <VL53L0X_GetWrapAroundCheckEnable>:
  return Status;
}

VL53L0X_Error
VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
                                 uint8_t *pWrapAroundCheckEnable) {
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800423e:	f107 030e 	add.w	r3, r7, #14
 8004242:	461a      	mov	r2, r3
 8004244:	2101      	movs	r1, #1
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f003 fdfb 	bl	8007e42 <VL53L0X_RdByte>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]
  if (Status == VL53L0X_ERROR_NONE) {
 8004250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10e      	bne.n	8004276 <VL53L0X_GetWrapAroundCheckEnable+0x46>
    PALDevDataSet(Dev, SequenceConfig, data);
 8004258:	7bba      	ldrb	r2, [r7, #14]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    if (data & (0x01 << 7))
 8004260:	7bbb      	ldrb	r3, [r7, #14]
 8004262:	b25b      	sxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	da03      	bge.n	8004270 <VL53L0X_GetWrapAroundCheckEnable+0x40>
      *pWrapAroundCheckEnable = 0x01;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	701a      	strb	r2, [r3, #0]
 800426e:	e002      	b.n	8004276 <VL53L0X_GetWrapAroundCheckEnable+0x46>
    else
      *pWrapAroundCheckEnable = 0x00;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
  }
  if (Status == VL53L0X_ERROR_NONE) {
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <VL53L0X_GetWrapAroundCheckEnable+0x58>
    VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	781a      	ldrb	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                              *pWrapAroundCheckEnable);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8004288:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <VL53L0X_PerformSingleMeasurement>:
}

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
  VL53L0X_DeviceModes DeviceMode;

  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80042a0:	f107 030e 	add.w	r3, r7, #14
 80042a4:	4619      	mov	r1, r3
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff fbac 	bl	8003a04 <VL53L0X_GetDeviceMode>
 80042ac:	4603      	mov	r3, r0
 80042ae:	73fb      	strb	r3, [r7, #15]

  /* Start immediately to run a single ranging measurement in case of
   * single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 80042b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d107      	bne.n	80042c8 <VL53L0X_PerformSingleMeasurement+0x34>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80042b8:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <VL53L0X_PerformSingleMeasurement+0x34>
    Status = VL53L0X_StartMeasurement(Dev);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f898 	bl	80043f4 <VL53L0X_StartMeasurement>
 80042c4:	4603      	mov	r3, r0
 80042c6:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80042c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <VL53L0X_PerformSingleMeasurement+0x46>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f001 fabd 	bl	8005850 <VL53L0X_measurement_poll_for_completion>
 80042d6:	4603      	mov	r3, r0
 80042d8:	73fb      	strb	r3, [r7, #15]

  /* Change PAL State in case of single ranging or single histogram */
  if (Status == VL53L0X_ERROR_NONE &&
 80042da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <VL53L0X_PerformSingleMeasurement+0x5c>
      DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80042e2:	7bbb      	ldrb	r3, [r7, #14]
  if (Status == VL53L0X_ERROR_NONE &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d103      	bne.n	80042f0 <VL53L0X_PerformSingleMeasurement+0x5c>
    PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2203      	movs	r2, #3
 80042ec:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132

  LOG_FUNCTION_END(Status);
  return Status;
 80042f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <VL53L0X_PerformRefCalibration>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev,
                                            uint8_t *pVhvSettings,
                                            uint8_t *pPhaseCal) {
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004308:	2300      	movs	r3, #0
 800430a:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings, pPhaseCal, 1);
 800430c:	2301      	movs	r3, #1
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f001 fa4a 	bl	80057ac <VL53L0X_perform_ref_calibration>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);
  return Status;
 800431c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
                                                    uint8_t StartNotStopFlag) {
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  uint8_t InterruptConfig;
  FixPoint1616_t ThresholdLow;
  FixPoint1616_t ThresholdHigh;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004334:	2300      	movs	r3, #0
 8004336:	75fb      	strb	r3, [r7, #23]

  InterruptConfig =
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800433e:	75bb      	strb	r3, [r7, #22]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if ((InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8004340:	7dbb      	ldrb	r3, [r7, #22]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d005      	beq.n	8004352 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
 8004346:	7dbb      	ldrb	r3, [r7, #22]
 8004348:	2b02      	cmp	r3, #2
 800434a:	d002      	beq.n	8004352 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x2a>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800434c:	7dbb      	ldrb	r3, [r7, #22]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d147      	bne.n	80043e2 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      (InterruptConfig == VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

    Status = VL53L0X_GetInterruptThresholds(
 8004352:	f107 030c 	add.w	r3, r7, #12
 8004356:	f107 0210 	add.w	r2, r7, #16
 800435a:	2101      	movs	r1, #1
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fbc1 	bl	8004ae4 <VL53L0X_GetInterruptThresholds>
 8004362:	4603      	mov	r3, r0
 8004364:	75fb      	strb	r3, [r7, #23]
        Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING, &ThresholdLow,
        &ThresholdHigh);

    if (((ThresholdLow > 255 * 65536) || (ThresholdHigh > 255 * 65536)) &&
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800436c:	d803      	bhi.n	8004376 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x4e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004374:	d935      	bls.n	80043e2 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
 8004376:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d131      	bne.n	80043e2 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
        (Status == VL53L0X_ERROR_NONE)) {

      if (StartNotStopFlag != 0) {
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d006      	beq.n	8004392 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0x6a>
        Status = VL53L0X_load_tuning_settings(Dev, InterruptThresholdSettings);
 8004384:	491a      	ldr	r1, [pc, #104]	; (80043f0 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xc8>)
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f002 fc30 	bl	8006bec <VL53L0X_load_tuning_settings>
 800438c:	4603      	mov	r3, r0
 800438e:	75fb      	strb	r3, [r7, #23]
 8004390:	e027      	b.n	80043e2 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th+0xba>
      } else {
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004392:	2204      	movs	r2, #4
 8004394:	21ff      	movs	r1, #255	; 0xff
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f003 fccd 	bl	8007d36 <VL53L0X_WrByte>
 800439c:	4603      	mov	r3, r0
 800439e:	461a      	mov	r2, r3
 80043a0:	7dfb      	ldrb	r3, [r7, #23]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80043a6:	2200      	movs	r2, #0
 80043a8:	2170      	movs	r1, #112	; 0x70
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f003 fcc3 	bl	8007d36 <VL53L0X_WrByte>
 80043b0:	4603      	mov	r3, r0
 80043b2:	461a      	mov	r2, r3
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80043ba:	2200      	movs	r2, #0
 80043bc:	21ff      	movs	r1, #255	; 0xff
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f003 fcb9 	bl	8007d36 <VL53L0X_WrByte>
 80043c4:	4603      	mov	r3, r0
 80043c6:	461a      	mov	r2, r3
 80043c8:	7dfb      	ldrb	r3, [r7, #23]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	75fb      	strb	r3, [r7, #23]
        Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2180      	movs	r1, #128	; 0x80
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f003 fcaf 	bl	8007d36 <VL53L0X_WrByte>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	4313      	orrs	r3, r2
 80043e0:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  return Status;
 80043e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000010 	.word	0x20000010

080043f4 <VL53L0X_StartMeasurement>:

VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	75fb      	strb	r3, [r7, #23]
  VL53L0X_DeviceModes DeviceMode;
  uint8_t Byte;
  uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  /* Get Current DeviceMode */
  VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004404:	f107 030e 	add.w	r3, r7, #14
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fafa 	bl	8003a04 <VL53L0X_GetDeviceMode>

  Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004410:	2201      	movs	r2, #1
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f003 fc8e 	bl	8007d36 <VL53L0X_WrByte>
 800441a:	4603      	mov	r3, r0
 800441c:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800441e:	2201      	movs	r2, #1
 8004420:	21ff      	movs	r1, #255	; 0xff
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f003 fc87 	bl	8007d36 <VL53L0X_WrByte>
 8004428:	4603      	mov	r3, r0
 800442a:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800442c:	2200      	movs	r2, #0
 800442e:	2100      	movs	r1, #0
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f003 fc80 	bl	8007d36 <VL53L0X_WrByte>
 8004436:	4603      	mov	r3, r0
 8004438:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004440:	461a      	mov	r2, r3
 8004442:	2191      	movs	r1, #145	; 0x91
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f003 fc76 	bl	8007d36 <VL53L0X_WrByte>
 800444a:	4603      	mov	r3, r0
 800444c:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800444e:	2201      	movs	r2, #1
 8004450:	2100      	movs	r1, #0
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f003 fc6f 	bl	8007d36 <VL53L0X_WrByte>
 8004458:	4603      	mov	r3, r0
 800445a:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800445c:	2200      	movs	r2, #0
 800445e:	21ff      	movs	r1, #255	; 0xff
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f003 fc68 	bl	8007d36 <VL53L0X_WrByte>
 8004466:	4603      	mov	r3, r0
 8004468:	75fb      	strb	r3, [r7, #23]
  Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800446a:	2200      	movs	r2, #0
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f003 fc61 	bl	8007d36 <VL53L0X_WrByte>
 8004474:	4603      	mov	r3, r0
 8004476:	75fb      	strb	r3, [r7, #23]

  switch (DeviceMode) {
 8004478:	7bbb      	ldrb	r3, [r7, #14]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d053      	beq.n	8004526 <VL53L0X_StartMeasurement+0x132>
 800447e:	2b03      	cmp	r3, #3
 8004480:	dc6b      	bgt.n	800455a <VL53L0X_StartMeasurement+0x166>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <VL53L0X_StartMeasurement+0x98>
 8004486:	2b01      	cmp	r3, #1
 8004488:	d033      	beq.n	80044f2 <VL53L0X_StartMeasurement+0xfe>
 800448a:	e066      	b.n	800455a <VL53L0X_StartMeasurement+0x166>
  case VL53L0X_DEVICEMODE_SINGLE_RANGING:
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800448c:	2201      	movs	r2, #1
 800448e:	2100      	movs	r1, #0
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f003 fc50 	bl	8007d36 <VL53L0X_WrByte>
 8004496:	4603      	mov	r3, r0
 8004498:	75fb      	strb	r3, [r7, #23]

    Byte = StartStopByte;
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	737b      	strb	r3, [r7, #13]
    if (Status == VL53L0X_ERROR_NONE) {
 800449e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d15c      	bne.n	8004560 <VL53L0X_StartMeasurement+0x16c>
      /* Wait until start bit has been cleared */
      LoopNb = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	613b      	str	r3, [r7, #16]
      do {
        if (LoopNb > 0)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <VL53L0X_StartMeasurement+0xce>
          Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSRANGE_START, &Byte);
 80044b0:	f107 030d 	add.w	r3, r7, #13
 80044b4:	461a      	mov	r2, r3
 80044b6:	2100      	movs	r1, #0
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f003 fcc2 	bl	8007e42 <VL53L0X_RdByte>
 80044be:	4603      	mov	r3, r0
 80044c0:	75fb      	strb	r3, [r7, #23]
        LoopNb = LoopNb + 1;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	3301      	adds	r3, #1
 80044c6:	613b      	str	r3, [r7, #16]
      } while (((Byte & StartStopByte) == StartStopByte) &&
 80044c8:	7b7a      	ldrb	r2, [r7, #13]
 80044ca:	7bfb      	ldrb	r3, [r7, #15]
 80044cc:	4013      	ands	r3, r2
 80044ce:	b2db      	uxtb	r3, r3
               (Status == VL53L0X_ERROR_NONE) &&
 80044d0:	7bfa      	ldrb	r2, [r7, #15]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d107      	bne.n	80044e6 <VL53L0X_StartMeasurement+0xf2>
      } while (((Byte & StartStopByte) == StartStopByte) &&
 80044d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <VL53L0X_StartMeasurement+0xf2>
               (Status == VL53L0X_ERROR_NONE) &&
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2bc7      	cmp	r3, #199	; 0xc7
 80044e2:	d800      	bhi.n	80044e6 <VL53L0X_StartMeasurement+0xf2>
      do {
 80044e4:	e7e1      	b.n	80044aa <VL53L0X_StartMeasurement+0xb6>
               (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));

      if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2bc7      	cmp	r3, #199	; 0xc7
 80044ea:	d939      	bls.n	8004560 <VL53L0X_StartMeasurement+0x16c>
        Status = VL53L0X_ERROR_TIME_OUT;
 80044ec:	23f9      	movs	r3, #249	; 0xf9
 80044ee:	75fb      	strb	r3, [r7, #23]
    }

    break;
 80044f0:	e036      	b.n	8004560 <VL53L0X_StartMeasurement+0x16c>
  case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
    /* Back-to-back mode */

    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 80044f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d105      	bne.n	8004506 <VL53L0X_StartMeasurement+0x112>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80044fa:	2101      	movs	r1, #1
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff ff13 	bl	8004328 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 8004502:	4603      	mov	r3, r0
 8004504:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004506:	2202      	movs	r2, #2
 8004508:	2100      	movs	r1, #0
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f003 fc13 	bl	8007d36 <VL53L0X_WrByte>
 8004510:	4603      	mov	r3, r0
 8004512:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
    if (Status == VL53L0X_ERROR_NONE) {
 8004514:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d123      	bne.n	8004564 <VL53L0X_StartMeasurement+0x170>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2204      	movs	r2, #4
 8004520:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 8004524:	e01e      	b.n	8004564 <VL53L0X_StartMeasurement+0x170>
  case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
    /* Continuous mode */
    /* Check if need to apply interrupt settings */
    if (Status == VL53L0X_ERROR_NONE)
 8004526:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <VL53L0X_StartMeasurement+0x146>
      Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800452e:	2101      	movs	r1, #1
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff fef9 	bl	8004328 <_Z37VL53L0X_CheckAndLoadInterruptSettingsP13VL53L0X_Dev_th>
 8004536:	4603      	mov	r3, r0
 8004538:	75fb      	strb	r3, [r7, #23]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800453a:	2204      	movs	r2, #4
 800453c:	2100      	movs	r1, #0
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f003 fbf9 	bl	8007d36 <VL53L0X_WrByte>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]
                            VL53L0X_REG_SYSRANGE_MODE_TIMED);

    if (Status == VL53L0X_ERROR_NONE) {
 8004548:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <VL53L0X_StartMeasurement+0x174>
      /* Set PAL State to Running */
      PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2204      	movs	r2, #4
 8004554:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
    }
    break;
 8004558:	e006      	b.n	8004568 <VL53L0X_StartMeasurement+0x174>
  default:
    /* Selected mode not supported */
    Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800455a:	23f8      	movs	r3, #248	; 0xf8
 800455c:	75fb      	strb	r3, [r7, #23]
 800455e:	e004      	b.n	800456a <VL53L0X_StartMeasurement+0x176>
    break;
 8004560:	bf00      	nop
 8004562:	e002      	b.n	800456a <VL53L0X_StartMeasurement+0x176>
    break;
 8004564:	bf00      	nop
 8004566:	e000      	b.n	800456a <VL53L0X_StartMeasurement+0x176>
    break;
 8004568:	bf00      	nop
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800456a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <VL53L0X_GetMeasurementDataReady>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
                                              uint8_t *pMeasurementDataReady) {
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004580:	2300      	movs	r3, #0
 8004582:	73fb      	strb	r3, [r7, #15]
  uint8_t SysRangeStatusRegister;
  uint8_t InterruptConfig;
  uint32_t InterruptMask;
  LOG_FUNCTION_START("");

  InterruptConfig =
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800458a:	73bb      	strb	r3, [r7, #14]
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality);

  if (InterruptConfig == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
 800458c:	7bbb      	ldrb	r3, [r7, #14]
 800458e:	2b04      	cmp	r3, #4
 8004590:	d112      	bne.n	80045b8 <VL53L0X_GetMeasurementDataReady+0x42>
    Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004592:	f107 0308 	add.w	r3, r7, #8
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fb1a 	bl	8004bd2 <VL53L0X_GetInterruptMaskStatus>
 800459e:	4603      	mov	r3, r0
 80045a0:	73fb      	strb	r3, [r7, #15]
    if (InterruptMask == VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d103      	bne.n	80045b0 <VL53L0X_GetMeasurementDataReady+0x3a>
      *pMeasurementDataReady = 1;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e01c      	b.n	80045ea <VL53L0X_GetMeasurementDataReady+0x74>
    else
      *pMeasurementDataReady = 0;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	e018      	b.n	80045ea <VL53L0X_GetMeasurementDataReady+0x74>
  } else {
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80045b8:	f107 030d 	add.w	r3, r7, #13
 80045bc:	461a      	mov	r2, r3
 80045be:	2114      	movs	r1, #20
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f003 fc3e 	bl	8007e42 <VL53L0X_RdByte>
 80045c6:	4603      	mov	r3, r0
 80045c8:	73fb      	strb	r3, [r7, #15]
                            &SysRangeStatusRegister);
    if (Status == VL53L0X_ERROR_NONE) {
 80045ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10b      	bne.n	80045ea <VL53L0X_GetMeasurementDataReady+0x74>
      if (SysRangeStatusRegister & 0x01)
 80045d2:	7b7b      	ldrb	r3, [r7, #13]
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <VL53L0X_GetMeasurementDataReady+0x6e>
        *pMeasurementDataReady = 1;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	2201      	movs	r2, #1
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e002      	b.n	80045ea <VL53L0X_GetMeasurementDataReady+0x74>
      else
        *pMeasurementDataReady = 0;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 80045ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <VL53L0X_GetRangingMeasurementData>:
  return Status;
}

VL53L0X_Error VL53L0X_GetRangingMeasurementData(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b096      	sub	sp, #88	; 0x58
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004602:	2300      	movs	r3, #0
 8004604:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
   * use multi read even if some registers are not useful, result will
   * be more efficient
   * start reading at 0x14 dec20
   * end reading at 0x21 dec33 total 14 bytes to read
   */
  Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004608:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800460c:	230c      	movs	r3, #12
 800460e:	2114      	movs	r1, #20
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f003 fb67 	bl	8007ce4 <VL53L0X_ReadMulti>
 8004616:	4603      	mov	r3, r0
 8004618:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (Status == VL53L0X_ERROR_NONE) {
 800461c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 80d1 	bne.w	80047c8 <VL53L0X_GetRangingMeasurementData+0x1d0>

    pRangingMeasurementData->ZoneId = 0;    /* Only one zone */
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	2200      	movs	r2, #0
 800462a:	759a      	strb	r2, [r3, #22]
    pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

    tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004632:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004636:	b29b      	uxth	r3, r3
 8004638:	021b      	lsls	r3, r3, #8
 800463a:	b29a      	uxth	r2, r3
 800463c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004640:	b29b      	uxth	r3, r3
 8004642:	4413      	add	r3, r2
 8004644:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
    /* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
     *(format 11.2) else no fractional
     */

    pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	605a      	str	r2, [r3, #4]

    SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800464e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004652:	b29b      	uxth	r3, r3
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	b29a      	uxth	r2, r3
 8004658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800465c:	b29b      	uxth	r3, r3
 800465e:	4413      	add	r3, r2
 8004660:	b29b      	uxth	r3, r3
 8004662:	025b      	lsls	r3, r3, #9
 8004664:	647b      	str	r3, [r7, #68]	; 0x44
        VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
    /* peak_signal_count_rate_rtn_mcps */
    pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800466a:	60da      	str	r2, [r3, #12]

    AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800466c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004670:	b29b      	uxth	r3, r3
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	b29a      	uxth	r2, r3
 8004676:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800467a:	b29b      	uxth	r3, r3
 800467c:	4413      	add	r3, r2
 800467e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    pRangingMeasurementData->AmbientRateRtnMegaCps =
        VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004682:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004686:	025b      	lsls	r3, r3, #9
 8004688:	461a      	mov	r2, r3
    pRangingMeasurementData->AmbientRateRtnMegaCps =
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	611a      	str	r2, [r3, #16]

    EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3], localBuffer[2]);
 800468e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	b29a      	uxth	r2, r3
 8004698:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800469c:	b29b      	uxth	r3, r3
 800469e:	4413      	add	r3, r2
 80046a0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* EffectiveSpadRtnCount is 8.8 format */
    pRangingMeasurementData->EffectiveSpadRtnCount = EffectiveSpadRtnCount;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80046aa:	829a      	strh	r2, [r3, #20]

    DeviceRangeStatus = localBuffer[0];
 80046ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80046b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Get Linearity Corrective Gain */
    LinearityCorrectiveGain = PALDevDataGet(Dev, LinearityCorrectiveGain);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 80046ba:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* Get ranging configuration */
    RangeFractionalEnable = PALDevDataGet(Dev, RangeFractionalEnable);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80046c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (LinearityCorrectiveGain != 1000) {
 80046c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046cc:	d047      	beq.n	800475e <VL53L0X_GetRangingMeasurementData+0x166>

      tmpuint16 =
          (uint16_t)((LinearityCorrectiveGain * tmpuint16 + 500) / 1000);
 80046ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80046d0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80046d4:	fb02 f303 	mul.w	r3, r2, r3
 80046d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80046dc:	4a57      	ldr	r2, [pc, #348]	; (800483c <VL53L0X_GetRangingMeasurementData+0x244>)
 80046de:	fb82 1203 	smull	r1, r2, r2, r3
 80046e2:	1192      	asrs	r2, r2, #6
 80046e4:	17db      	asrs	r3, r3, #31
 80046e6:	1ad3      	subs	r3, r2, r3
      tmpuint16 =
 80046e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

      /* Implement Xtalk */
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	873b      	strh	r3, [r7, #56]	; 0x38
                                XTalkCompensationRateMegaCps);
      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	7f1b      	ldrb	r3, [r3, #28]
 80046f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                                XTalkCompensationEnable);

      if (XTalkCompensationEnable) {
 80046fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d02d      	beq.n	800475e <VL53L0X_GetRangingMeasurementData+0x166>

        if ((SignalRate -
             ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8)) <=
 8004702:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004704:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	121b      	asrs	r3, r3, #8
 800470e:	461a      	mov	r2, r3
        if ((SignalRate -
 8004710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004712:	4293      	cmp	r3, r2
 8004714:	d10d      	bne.n	8004732 <VL53L0X_GetRangingMeasurementData+0x13a>
            0) {
          if (RangeFractionalEnable)
 8004716:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800471a:	2b00      	cmp	r3, #0
 800471c:	d004      	beq.n	8004728 <VL53L0X_GetRangingMeasurementData+0x130>
            XtalkRangeMilliMeter = 8888;
 800471e:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004722:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004726:	e016      	b.n	8004756 <VL53L0X_GetRangingMeasurementData+0x15e>
          else
            XtalkRangeMilliMeter = 8888 << 2;
 8004728:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800472c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004730:	e011      	b.n	8004756 <VL53L0X_GetRangingMeasurementData+0x15e>
        } else {
          XtalkRangeMilliMeter =
              (tmpuint16 * SignalRate) /
 8004732:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004738:	fb03 f202 	mul.w	r2, r3, r2
              (SignalRate -
               ((XTalkCompensationRateMegaCps * EffectiveSpadRtnCount) >> 8));
 800473c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800473e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004742:	fb01 f303 	mul.w	r3, r1, r3
 8004746:	121b      	asrs	r3, r3, #8
 8004748:	4619      	mov	r1, r3
              (SignalRate -
 800474a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474c:	1a5b      	subs	r3, r3, r1
              (tmpuint16 * SignalRate) /
 800474e:	fbb2 f3f3 	udiv	r3, r2, r3
          XtalkRangeMilliMeter =
 8004752:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
        }

        tmpuint16 = XtalkRangeMilliMeter;
 8004756:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800475a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
      }
    }

    if (RangeFractionalEnable) {
 800475e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <VL53L0X_GetRangingMeasurementData+0x188>
      pRangingMeasurementData->RangeMilliMeter = (uint16_t)((tmpuint16) >> 2);
 8004766:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800476a:	089b      	lsrs	r3, r3, #2
 800476c:	b29a      	uxth	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart =
          (uint8_t)((tmpuint16 & 0x03) << 6);
 8004772:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004776:	019b      	lsls	r3, r3, #6
      pRangingMeasurementData->RangeFractionalPart =
 8004778:	b2da      	uxtb	r2, r3
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	75da      	strb	r2, [r3, #23]
 800477e:	e006      	b.n	800478e <VL53L0X_GetRangingMeasurementData+0x196>
    } else {
      pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004786:	811a      	strh	r2, [r3, #8]
      pRangingMeasurementData->RangeFractionalPart = 0;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2200      	movs	r2, #0
 800478c:	75da      	strb	r2, [r3, #23]
     * For a standard definition of RangeStatus, this should
     * return 0 in case of good result after a ranging
     * The range status depends on the device so call a device
     * specific function to obtain the right Status.
     */
    Status |= VL53L0X_get_pal_range_status(
 800478e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004792:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004796:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800479a:	9301      	str	r3, [sp, #4]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f002 fe83 	bl	80074b0 <VL53L0X_get_pal_range_status>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461a      	mov	r2, r3
 80047ae:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047b2:	4313      	orrs	r3, r2
 80047b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        Dev, DeviceRangeStatus, SignalRate, EffectiveSpadRtnCount,
        pRangingMeasurementData, &PalRangeStatus);

    if (Status == VL53L0X_ERROR_NONE)
 80047b8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d103      	bne.n	80047c8 <VL53L0X_GetRangingMeasurementData+0x1d0>
      pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80047c0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	761a      	strb	r2, [r3, #24]
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80047c8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d12f      	bne.n	8004830 <VL53L0X_GetRangingMeasurementData+0x238>
    /* Copy last read data into Dev buffer */
    LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f107 040c 	add.w	r4, r7, #12
 80047d6:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80047da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80047dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80047de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80047e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    LastRangeDataBuffer.RangeMilliMeter =
        pRangingMeasurementData->RangeMilliMeter;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	891b      	ldrh	r3, [r3, #8]
    LastRangeDataBuffer.RangeMilliMeter =
 80047ea:	82bb      	strh	r3, [r7, #20]
    LastRangeDataBuffer.RangeFractionalPart =
        pRangingMeasurementData->RangeFractionalPart;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	7ddb      	ldrb	r3, [r3, #23]
    LastRangeDataBuffer.RangeFractionalPart =
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    LastRangeDataBuffer.RangeDMaxMilliMeter =
        pRangingMeasurementData->RangeDMaxMilliMeter;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	895b      	ldrh	r3, [r3, #10]
    LastRangeDataBuffer.RangeDMaxMilliMeter =
 80047f8:	82fb      	strh	r3, [r7, #22]
    LastRangeDataBuffer.MeasurementTimeUsec =
        pRangingMeasurementData->MeasurementTimeUsec;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
    LastRangeDataBuffer.MeasurementTimeUsec =
 80047fe:	613b      	str	r3, [r7, #16]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
        pRangingMeasurementData->SignalRateRtnMegaCps;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
    LastRangeDataBuffer.SignalRateRtnMegaCps =
 8004804:	61bb      	str	r3, [r7, #24]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
        pRangingMeasurementData->AmbientRateRtnMegaCps;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
    LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800480a:	61fb      	str	r3, [r7, #28]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
        pRangingMeasurementData->EffectiveSpadRtnCount;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	8a9b      	ldrh	r3, [r3, #20]
    LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004810:	843b      	strh	r3, [r7, #32]
    LastRangeDataBuffer.RangeStatus = pRangingMeasurementData->RangeStatus;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	7e1b      	ldrb	r3, [r3, #24]
 8004816:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004820:	f107 050c 	add.w	r5, r7, #12
 8004824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800482c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8004830:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004834:	4618      	mov	r0, r3
 8004836:	3750      	adds	r7, #80	; 0x50
 8004838:	46bd      	mov	sp, r7
 800483a:	bdb0      	pop	{r4, r5, r7, pc}
 800483c:	10624dd3 	.word	0x10624dd3

08004840 <VL53L0X_PerformSingleRangingMeasurement>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(
    VL53L0X_DEV Dev,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData) {
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800484a:	2300      	movs	r3, #0
 800484c:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_START("");

  /* This function will do a complete single ranging
   * Here we fix the mode! */
  Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800484e:	2100      	movs	r1, #0
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff f8ab 	bl	80039ac <VL53L0X_SetDeviceMode>
 8004856:	4603      	mov	r3, r0
 8004858:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800485a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d104      	bne.n	800486c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
    Status = VL53L0X_PerformSingleMeasurement(Dev);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fd16 	bl	8004294 <VL53L0X_PerformSingleMeasurement>
 8004868:	4603      	mov	r3, r0
 800486a:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800486c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <VL53L0X_PerformSingleRangingMeasurement+0x40>
    Status = VL53L0X_GetRangingMeasurementData(Dev, pRangingMeasurementData);
 8004874:	6839      	ldr	r1, [r7, #0]
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff febe 	bl	80045f8 <VL53L0X_GetRangingMeasurementData>
 800487c:	4603      	mov	r3, r0
 800487e:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 8004880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d105      	bne.n	8004894 <VL53L0X_PerformSingleRangingMeasurement+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004888:	2100      	movs	r1, #0
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f960 	bl	8004b50 <VL53L0X_ClearInterruptMask>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 8004894:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
                                    VL53L0X_DeviceModes DeviceMode,
                                    VL53L0X_GpioFunctionality Functionality,
                                    VL53L0X_InterruptPolarity Polarity) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	4608      	mov	r0, r1
 80048aa:	4611      	mov	r1, r2
 80048ac:	461a      	mov	r2, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	70fb      	strb	r3, [r7, #3]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70bb      	strb	r3, [r7, #2]
 80048b6:	4613      	mov	r3, r2
 80048b8:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048ba:	2300      	movs	r3, #0
 80048bc:	73fb      	strb	r3, [r7, #15]
  uint8_t data;

  LOG_FUNCTION_START("");

  if (Pin != 0) {
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d002      	beq.n	80048ca <VL53L0X_SetGpioConfig+0x2a>
    Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80048c4:	23f6      	movs	r3, #246	; 0xf6
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e105      	b.n	8004ad6 <VL53L0X_SetGpioConfig+0x236>
  } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80048ca:	78bb      	ldrb	r3, [r7, #2]
 80048cc:	2b14      	cmp	r3, #20
 80048ce:	d110      	bne.n	80048f2 <VL53L0X_SetGpioConfig+0x52>
    if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80048d0:	7e3b      	ldrb	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d102      	bne.n	80048dc <VL53L0X_SetGpioConfig+0x3c>
      data = 0x10;
 80048d6:	2310      	movs	r3, #16
 80048d8:	73bb      	strb	r3, [r7, #14]
 80048da:	e001      	b.n	80048e0 <VL53L0X_SetGpioConfig+0x40>
    else
      data = 1;
 80048dc:	2301      	movs	r3, #1
 80048de:	73bb      	strb	r3, [r7, #14]

    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);
 80048e0:	7bbb      	ldrb	r3, [r7, #14]
 80048e2:	461a      	mov	r2, r3
 80048e4:	2184      	movs	r1, #132	; 0x84
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f003 fa25 	bl	8007d36 <VL53L0X_WrByte>
 80048ec:	4603      	mov	r3, r0
 80048ee:	73fb      	strb	r3, [r7, #15]
 80048f0:	e0f1      	b.n	8004ad6 <VL53L0X_SetGpioConfig+0x236>

  } else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 80048f2:	78bb      	ldrb	r3, [r7, #2]
 80048f4:	2b15      	cmp	r3, #21
 80048f6:	f040 8097 	bne.w	8004a28 <VL53L0X_SetGpioConfig+0x188>

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80048fa:	2201      	movs	r2, #1
 80048fc:	21ff      	movs	r1, #255	; 0xff
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f003 fa19 	bl	8007d36 <VL53L0X_WrByte>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	7bfb      	ldrb	r3, [r7, #15]
 800490a:	4313      	orrs	r3, r2
 800490c:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f003 fa0f 	bl	8007d36 <VL53L0X_WrByte>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	4313      	orrs	r3, r2
 8004920:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004922:	2200      	movs	r2, #0
 8004924:	21ff      	movs	r1, #255	; 0xff
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f003 fa05 	bl	8007d36 <VL53L0X_WrByte>
 800492c:	4603      	mov	r3, r0
 800492e:	461a      	mov	r2, r3
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	4313      	orrs	r3, r2
 8004934:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004936:	2201      	movs	r2, #1
 8004938:	2180      	movs	r1, #128	; 0x80
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f003 f9fb 	bl	8007d36 <VL53L0X_WrByte>
 8004940:	4603      	mov	r3, r0
 8004942:	461a      	mov	r2, r3
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	4313      	orrs	r3, r2
 8004948:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800494a:	2202      	movs	r2, #2
 800494c:	2185      	movs	r1, #133	; 0x85
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f003 f9f1 	bl	8007d36 <VL53L0X_WrByte>
 8004954:	4603      	mov	r3, r0
 8004956:	461a      	mov	r2, r3
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	4313      	orrs	r3, r2
 800495c:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800495e:	2204      	movs	r2, #4
 8004960:	21ff      	movs	r1, #255	; 0xff
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f003 f9e7 	bl	8007d36 <VL53L0X_WrByte>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	4313      	orrs	r3, r2
 8004970:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8004972:	2200      	movs	r2, #0
 8004974:	21cd      	movs	r1, #205	; 0xcd
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f003 f9dd 	bl	8007d36 <VL53L0X_WrByte>
 800497c:	4603      	mov	r3, r0
 800497e:	461a      	mov	r2, r3
 8004980:	7bfb      	ldrb	r3, [r7, #15]
 8004982:	4313      	orrs	r3, r2
 8004984:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8004986:	2211      	movs	r2, #17
 8004988:	21cc      	movs	r1, #204	; 0xcc
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f003 f9d3 	bl	8007d36 <VL53L0X_WrByte>
 8004990:	4603      	mov	r3, r0
 8004992:	461a      	mov	r2, r3
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	4313      	orrs	r3, r2
 8004998:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800499a:	2207      	movs	r2, #7
 800499c:	21ff      	movs	r1, #255	; 0xff
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f003 f9c9 	bl	8007d36 <VL53L0X_WrByte>
 80049a4:	4603      	mov	r3, r0
 80049a6:	461a      	mov	r2, r3
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80049ae:	2200      	movs	r2, #0
 80049b0:	21be      	movs	r1, #190	; 0xbe
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f003 f9bf 	bl	8007d36 <VL53L0X_WrByte>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461a      	mov	r2, r3
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	4313      	orrs	r3, r2
 80049c0:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80049c2:	2206      	movs	r2, #6
 80049c4:	21ff      	movs	r1, #255	; 0xff
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f003 f9b5 	bl	8007d36 <VL53L0X_WrByte>
 80049cc:	4603      	mov	r3, r0
 80049ce:	461a      	mov	r2, r3
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80049d6:	2209      	movs	r2, #9
 80049d8:	21cc      	movs	r1, #204	; 0xcc
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f003 f9ab 	bl	8007d36 <VL53L0X_WrByte>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	73fb      	strb	r3, [r7, #15]

    Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80049ea:	2200      	movs	r2, #0
 80049ec:	21ff      	movs	r1, #255	; 0xff
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f003 f9a1 	bl	8007d36 <VL53L0X_WrByte>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80049fe:	2201      	movs	r2, #1
 8004a00:	21ff      	movs	r1, #255	; 0xff
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f003 f997 	bl	8007d36 <VL53L0X_WrByte>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	7bfb      	ldrb	r3, [r7, #15]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004a12:	2200      	movs	r2, #0
 8004a14:	2100      	movs	r1, #0
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f003 f98d 	bl	8007d36 <VL53L0X_WrByte>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	461a      	mov	r2, r3
 8004a20:	7bfb      	ldrb	r3, [r7, #15]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	e056      	b.n	8004ad6 <VL53L0X_SetGpioConfig+0x236>

  } else {

    if (Status == VL53L0X_ERROR_NONE) {
 8004a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d120      	bne.n	8004a72 <VL53L0X_SetGpioConfig+0x1d2>
      switch (Functionality) {
 8004a30:	787b      	ldrb	r3, [r7, #1]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d81b      	bhi.n	8004a6e <VL53L0X_SetGpioConfig+0x1ce>
 8004a36:	a201      	add	r2, pc, #4	; (adr r2, 8004a3c <VL53L0X_SetGpioConfig+0x19c>)
 8004a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3c:	08004a51 	.word	0x08004a51
 8004a40:	08004a57 	.word	0x08004a57
 8004a44:	08004a5d 	.word	0x08004a5d
 8004a48:	08004a63 	.word	0x08004a63
 8004a4c:	08004a69 	.word	0x08004a69
      case VL53L0X_GPIOFUNCTIONALITY_OFF:
        data = 0x00;
 8004a50:	2300      	movs	r3, #0
 8004a52:	73bb      	strb	r3, [r7, #14]
        break;
 8004a54:	e00d      	b.n	8004a72 <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
        data = 0x01;
 8004a56:	2301      	movs	r3, #1
 8004a58:	73bb      	strb	r3, [r7, #14]
        break;
 8004a5a:	e00a      	b.n	8004a72 <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
        data = 0x02;
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	73bb      	strb	r3, [r7, #14]
        break;
 8004a60:	e007      	b.n	8004a72 <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
        data = 0x03;
 8004a62:	2303      	movs	r3, #3
 8004a64:	73bb      	strb	r3, [r7, #14]
        break;
 8004a66:	e004      	b.n	8004a72 <VL53L0X_SetGpioConfig+0x1d2>
      case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
        data = 0x04;
 8004a68:	2304      	movs	r3, #4
 8004a6a:	73bb      	strb	r3, [r7, #14]
        break;
 8004a6c:	e001      	b.n	8004a72 <VL53L0X_SetGpioConfig+0x1d2>
      default:
        Status = VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
 8004a6e:	23f5      	movs	r3, #245	; 0xf5
 8004a70:	73fb      	strb	r3, [r7, #15]
      }
    }

    if (Status == VL53L0X_ERROR_NONE)
 8004a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d107      	bne.n	8004a8a <VL53L0X_SetGpioConfig+0x1ea>
      Status =
          VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);
 8004a7a:	7bbb      	ldrb	r3, [r7, #14]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	210a      	movs	r1, #10
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f003 f958 	bl	8007d36 <VL53L0X_WrByte>
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]

    if (Status == VL53L0X_ERROR_NONE) {
 8004a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <VL53L0X_SetGpioConfig+0x212>
      if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004a92:	7e3b      	ldrb	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <VL53L0X_SetGpioConfig+0x1fe>
        data = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	73bb      	strb	r3, [r7, #14]
 8004a9c:	e001      	b.n	8004aa2 <VL53L0X_SetGpioConfig+0x202>
      else
        data = (uint8_t)(1 << 4);
 8004a9e:	2310      	movs	r3, #16
 8004aa0:	73bb      	strb	r3, [r7, #14]

      Status = VL53L0X_UpdateByte(Dev, VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH,
 8004aa2:	7bbb      	ldrb	r3, [r7, #14]
 8004aa4:	22ef      	movs	r2, #239	; 0xef
 8004aa6:	2184      	movs	r1, #132	; 0x84
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f003 f988 	bl	8007dbe <VL53L0X_UpdateByte>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	73fb      	strb	r3, [r7, #15]
                                  0xEF, data);
    }

    if (Status == VL53L0X_ERROR_NONE)
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <VL53L0X_SetGpioConfig+0x222>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Pin0GpioFunctionality,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	787a      	ldrb	r2, [r7, #1]
 8004abe:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
                                         Functionality);

    if (Status == VL53L0X_ERROR_NONE)
 8004ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d105      	bne.n	8004ad6 <VL53L0X_SetGpioConfig+0x236>
      Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004aca:	2100      	movs	r1, #0
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f83f 	bl	8004b50 <VL53L0X_ClearInterruptMask>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	73fb      	strb	r3, [r7, #15]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8004ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop

08004ae4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
                                             VL53L0X_DeviceModes DeviceMode,
                                             FixPoint1616_t *pThresholdLow,
                                             FixPoint1616_t *pThresholdHigh) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	607a      	str	r2, [r7, #4]
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	460b      	mov	r3, r1
 8004af2:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  uint16_t Threshold16;
  LOG_FUNCTION_START("");

  /* no dependency on DeviceMode for Ewok */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	461a      	mov	r2, r3
 8004afe:	210e      	movs	r1, #14
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f003 f9bf 	bl	8007e84 <VL53L0X_RdWord>
 8004b06:	4603      	mov	r3, r0
 8004b08:	75fb      	strb	r3, [r7, #23]
  /* Need to multiply by 2 because the FW will apply a x2 */
  *pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004b0a:	8abb      	ldrh	r3, [r7, #20]
 8004b0c:	045b      	lsls	r3, r3, #17
 8004b0e:	461a      	mov	r2, r3
 8004b10:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <VL53L0X_GetInterruptThresholds+0x68>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6013      	str	r3, [r2, #0]

  if (Status == VL53L0X_ERROR_NONE) {
 8004b18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10f      	bne.n	8004b40 <VL53L0X_GetInterruptThresholds+0x5c>
    Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH, &Threshold16);
 8004b20:	f107 0314 	add.w	r3, r7, #20
 8004b24:	461a      	mov	r2, r3
 8004b26:	210c      	movs	r1, #12
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f003 f9ab 	bl	8007e84 <VL53L0X_RdWord>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	75fb      	strb	r3, [r7, #23]
    /* Need to multiply by 2 because the FW will apply a x2 */
    *pThresholdHigh = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004b32:	8abb      	ldrh	r3, [r7, #20]
 8004b34:	045b      	lsls	r3, r3, #17
 8004b36:	461a      	mov	r2, r3
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <VL53L0X_GetInterruptThresholds+0x68>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	683a      	ldr	r2, [r7, #0]
 8004b3e:	6013      	str	r3, [r2, #0]
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8004b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3718      	adds	r7, #24
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	1ffe0000 	.word	0x1ffe0000

08004b50 <VL53L0X_ClearInterruptMask>:
  return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev,
                                         uint32_t InterruptMask) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
  uint8_t LoopCount;
  uint8_t Byte;
  LOG_FUNCTION_START("");

  /* clear bit 0 range interrupt, bit 1 error interrupt */
  LoopCount = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	73bb      	strb	r3, [r7, #14]
  do {
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
 8004b62:	2201      	movs	r2, #1
 8004b64:	210b      	movs	r1, #11
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f003 f8e5 	bl	8007d36 <VL53L0X_WrByte>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
 8004b70:	2200      	movs	r2, #0
 8004b72:	210b      	movs	r1, #11
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f003 f8de 	bl	8007d36 <VL53L0X_WrByte>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	73fb      	strb	r3, [r7, #15]
    Status |= VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004b84:	f107 030d 	add.w	r3, r7, #13
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2113      	movs	r1, #19
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f003 f958 	bl	8007e42 <VL53L0X_RdByte>
 8004b92:	4603      	mov	r3, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	73fb      	strb	r3, [r7, #15]
    LoopCount++;
 8004b9c:	7bbb      	ldrb	r3, [r7, #14]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	73bb      	strb	r3, [r7, #14]
  } while (((Byte & 0x07) != 0x00) && (LoopCount < 3) &&
 8004ba2:	7b7b      	ldrb	r3, [r7, #13]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <VL53L0X_ClearInterruptMask+0x6c>
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d804      	bhi.n	8004bbc <VL53L0X_ClearInterruptMask+0x6c>
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d100      	bne.n	8004bbc <VL53L0X_ClearInterruptMask+0x6c>
  do {
 8004bba:	e7d2      	b.n	8004b62 <VL53L0X_ClearInterruptMask+0x12>
           (Status == VL53L0X_ERROR_NONE));

  if (LoopCount >= 3)
 8004bbc:	7bbb      	ldrb	r3, [r7, #14]
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <VL53L0X_ClearInterruptMask+0x76>
    Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8004bc2:	23f4      	movs	r3, #244	; 0xf4
 8004bc4:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 8004bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
                                             uint32_t *pInterruptMaskStatus) {
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  uint8_t Byte;
  LOG_FUNCTION_START("");

  Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8004be0:	f107 030e 	add.w	r3, r7, #14
 8004be4:	461a      	mov	r2, r3
 8004be6:	2113      	movs	r1, #19
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f003 f92a 	bl	8007e42 <VL53L0X_RdByte>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	73fb      	strb	r3, [r7, #15]
  *pInterruptMaskStatus = Byte & 0x07;
 8004bf2:	7bbb      	ldrb	r3, [r7, #14]
 8004bf4:	f003 0207 	and.w	r2, r3, #7
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	601a      	str	r2, [r3, #0]

  if (Byte & 0x18)
 8004bfc:	7bbb      	ldrb	r3, [r7, #14]
 8004bfe:	f003 0318 	and.w	r3, r3, #24
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <VL53L0X_GetInterruptMaskStatus+0x38>
    Status = VL53L0X_ERROR_RANGE_ERROR;
 8004c06:	23fa      	movs	r3, #250	; 0xfa
 8004c08:	73fb      	strb	r3, [r7, #15]

  LOG_FUNCTION_END(Status);
  return Status;
 8004c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <VL53L0X_PerformRefSpadManagement>:
  return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
                                               uint32_t *refSpadCount,
                                               uint8_t *isApertureSpads) {
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c22:	2300      	movs	r3, #0
 8004c24:	75fb      	strb	r3, [r7, #23]
  LOG_FUNCTION_START("");

  Status =
      VL53L0X_perform_ref_spad_management(Dev, refSpadCount, isApertureSpads);
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa09 	bl	8005042 <VL53L0X_perform_ref_spad_management>
 8004c30:	4603      	mov	r3, r0
 8004c32:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);

  return Status;
 8004c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <VL53L0X_get_offset_calibration_data_micro_meter>:
  LOG_FUNCTION_END(Status);
  return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(
    VL53L0X_DEV Dev, int32_t *pOffsetCalibrationDataMicroMeter) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	73fb      	strb	r3, [r7, #15]
  uint16_t RangeOffsetRegister;
  int16_t cMaxOffset = 2047;
 8004c4e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004c52:	81bb      	strh	r3, [r7, #12]
  int16_t cOffsetRange = 4096;
 8004c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c58:	817b      	strh	r3, [r7, #10]

  /* Note that offset has 10.2 format */

  Status = VL53L0X_RdWord(Dev, VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	461a      	mov	r2, r3
 8004c60:	2128      	movs	r1, #40	; 0x28
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f003 f90e 	bl	8007e84 <VL53L0X_RdWord>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	73fb      	strb	r3, [r7, #15]
                          &RangeOffsetRegister);

  if (Status == VL53L0X_ERROR_NONE) {
 8004c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11e      	bne.n	8004cb2 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8004c74:	893b      	ldrh	r3, [r7, #8]
 8004c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	813b      	strh	r3, [r7, #8]

    /* Apply 12 bit 2's compliment conversion */
    if (RangeOffsetRegister > cMaxOffset)
 8004c7e:	893b      	ldrh	r3, [r7, #8]
 8004c80:	461a      	mov	r2, r3
 8004c82:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	dd0b      	ble.n	8004ca2 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
      *pOffsetCalibrationDataMicroMeter =
          (int16_t)(RangeOffsetRegister - cOffsetRange) * 250;
 8004c8a:	893a      	ldrh	r2, [r7, #8]
 8004c8c:	897b      	ldrh	r3, [r7, #10]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	461a      	mov	r2, r3
 8004c96:	23fa      	movs	r3, #250	; 0xfa
 8004c98:	fb03 f202 	mul.w	r2, r3, r2
      *pOffsetCalibrationDataMicroMeter =
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e007      	b.n	8004cb2 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
    else
      *pOffsetCalibrationDataMicroMeter = (int16_t)RangeOffsetRegister * 250;
 8004ca2:	893b      	ldrh	r3, [r7, #8]
 8004ca4:	b21b      	sxth	r3, r3
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	23fa      	movs	r3, #250	; 0xfa
 8004caa:	fb03 f202 	mul.w	r2, r3, r2
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	601a      	str	r2, [r3, #0]
  }

  return Status;
 8004cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <_Z18get_next_good_spadPhmmPl>:

  return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size, uint32_t curr,
                        int32_t *next) {
 8004cbe:	b480      	push	{r7}
 8004cc0:	b08b      	sub	sp, #44	; 0x2c
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
  uint32_t startIndex;
  uint32_t fineOffset;
  uint32_t cSpadsPerByte = 8;
 8004ccc:	2308      	movs	r3, #8
 8004cce:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;
  uint8_t dataByte;
  uint8_t success = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	77bb      	strb	r3, [r7, #30]
   *
   * The coarse index is the byte index of the array and the fine index is
   * the index of the bit within each byte.
   */

  *next = -1;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cda:	601a      	str	r2, [r3, #0]

  startIndex = curr / cSpadsPerByte;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce4:	617b      	str	r3, [r7, #20]
  fineOffset = curr % cSpadsPerByte;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cee:	69b9      	ldr	r1, [r7, #24]
 8004cf0:	fb01 f202 	mul.w	r2, r1, r2
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	613b      	str	r3, [r7, #16]

  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d234      	bcs.n	8004d6e <_Z18get_next_good_spadPhmmPl+0xb0>
 8004d04:	7fbb      	ldrb	r3, [r7, #30]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d131      	bne.n	8004d6e <_Z18get_next_good_spadPhmmPl+0xb0>
       coarseIndex++) {
    fineIndex = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	623b      	str	r3, [r7, #32]
    dataByte = goodSpadArray[coarseIndex];
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	4413      	add	r3, r2
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	77fb      	strb	r3, [r7, #31]

    if (coarseIndex == startIndex) {
 8004d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d106      	bne.n	8004d2e <_Z18get_next_good_spadPhmmPl+0x70>
      /* locate the bit position of the provided current
       * spad bit before iterating */
      dataByte >>= fineOffset;
 8004d20:	7ffa      	ldrb	r2, [r7, #31]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	fa42 f303 	asr.w	r3, r2, r3
 8004d28:	77fb      	strb	r3, [r7, #31]
      fineIndex = fineOffset;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	623b      	str	r3, [r7, #32]
    }

    while (fineIndex < cSpadsPerByte) {
 8004d2e:	6a3a      	ldr	r2, [r7, #32]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d217      	bcs.n	8004d66 <_Z18get_next_good_spadPhmmPl+0xa8>
      if ((dataByte & 0x1) == 1) {
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <_Z18get_next_good_spadPhmmPl+0x9a>
        success = 1;
 8004d40:	2301      	movs	r3, #1
 8004d42:	77bb      	strb	r3, [r7, #30]
        *next = coarseIndex * cSpadsPerByte + fineIndex;
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	fb03 f202 	mul.w	r2, r3, r2
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	4413      	add	r3, r2
 8004d50:	461a      	mov	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	601a      	str	r2, [r3, #0]
        break;
 8004d56:	e006      	b.n	8004d66 <_Z18get_next_good_spadPhmmPl+0xa8>
      }
      dataByte >>= 1;
 8004d58:	7ffb      	ldrb	r3, [r7, #31]
 8004d5a:	085b      	lsrs	r3, r3, #1
 8004d5c:	77fb      	strb	r3, [r7, #31]
      fineIndex++;
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	3301      	adds	r3, #1
 8004d62:	623b      	str	r3, [r7, #32]
    while (fineIndex < cSpadsPerByte) {
 8004d64:	e7e3      	b.n	8004d2e <_Z18get_next_good_spadPhmmPl+0x70>
  for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	3301      	adds	r3, #1
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6c:	e7c6      	b.n	8004cfc <_Z18get_next_good_spadPhmmPl+0x3e>
    }
  }
}
 8004d6e:	bf00      	nop
 8004d70:	372c      	adds	r7, #44	; 0x2c
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <_Z11is_aperturem>:

uint8_t is_aperture(uint32_t spadIndex) {
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /*
   * This function reports if a given spad index is an aperture SPAD by
   * deriving the quadrant.
   */
  uint32_t quadrant;
  uint8_t isAperture = 1;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
  quadrant = spadIndex >> 6;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	099b      	lsrs	r3, r3, #6
 8004d8c:	60bb      	str	r3, [r7, #8]
  if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8004d8e:	4a07      	ldr	r2, [pc, #28]	; (8004dac <_Z11is_aperturem+0x30>)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <_Z11is_aperturem+0x22>
    isAperture = 0;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	73fb      	strb	r3, [r7, #15]

  return isAperture;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3714      	adds	r7, #20
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr
 8004dac:	200002bc 	.word	0x200002bc

08004db0 <_Z15enable_spad_bitPhmm>:

VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
                              uint32_t spadIndex) {
 8004db0:	b480      	push	{r7}
 8004db2:	b089      	sub	sp, #36	; 0x24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	77fb      	strb	r3, [r7, #31]
  uint32_t cSpadsPerByte = 8;
 8004dc0:	2308      	movs	r3, #8
 8004dc2:	61bb      	str	r3, [r7, #24]
  uint32_t coarseIndex;
  uint32_t fineIndex;

  coarseIndex = spadIndex / cSpadsPerByte;
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]
  fineIndex = spadIndex % cSpadsPerByte;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004dd6:	69b9      	ldr	r1, [r7, #24]
 8004dd8:	fb01 f202 	mul.w	r2, r1, r2
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
  if (coarseIndex >= size)
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d302      	bcc.n	8004dee <_Z15enable_spad_bitPhmm+0x3e>
    status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004de8:	23ce      	movs	r3, #206	; 0xce
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e010      	b.n	8004e10 <_Z15enable_spad_bitPhmm+0x60>
  else
    spadArray[coarseIndex] |= (1 << fineIndex);
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	4413      	add	r3, r2
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b25a      	sxtb	r2, r3
 8004df8:	2101      	movs	r1, #1
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	4313      	orrs	r3, r2
 8004e04:	b259      	sxtb	r1, r3
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	b2ca      	uxtb	r2, r1
 8004e0e:	701a      	strb	r2, [r3, #0]

  return status;
 8004e10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3724      	adds	r7, #36	; 0x24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>:
  }

  return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_WriteMulti(
 8004e2a:	2306      	movs	r3, #6
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	21b0      	movs	r1, #176	; 0xb0
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f002 ff2c 	bl	8007c8e <VL53L0X_WriteMulti>
 8004e36:	4603      	mov	r3, r0
 8004e38:	73fb      	strb	r3, [r7, #15]
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
  return status;
 8004e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <_Z16get_ref_spad_mapP13VL53L0X_Dev_tPh>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray) {
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b084      	sub	sp, #16
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ReadMulti(
 8004e50:	2306      	movs	r3, #6
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	21b0      	movs	r1, #176	; 0xb0
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f002 ff44 	bl	8007ce4 <VL53L0X_ReadMulti>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	73fb      	strb	r3, [r7, #15]
      Dev, VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0, refSpadArray, 6);
  return status;
 8004e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>:

VL53L0X_Error enable_ref_spads(VL53L0X_DEV Dev, uint8_t apertureSpads,
                               uint8_t goodSpadArray[], uint8_t spadArray[],
                               uint32_t size, uint32_t start, uint32_t offset,
                               uint32_t spadCount, uint32_t *lastSpad) {
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08c      	sub	sp, #48	; 0x30
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	607a      	str	r2, [r7, #4]
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	460b      	mov	r3, r1
 8004e7a:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint32_t index;
  uint32_t i;
  int32_t nextGoodSpad = offset;
 8004e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e84:	61fb      	str	r3, [r7, #28]
   *
   * This function applies to only aperture or only non-aperture spads.
   * Checks are performed to ensure this.
   */

  currentSpad = offset;
 8004e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e88:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d231      	bcs.n	8004efa <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    get_next_good_spad(goodSpadArray, size, currentSpad, &nextGoodSpad);
 8004e96:	f107 031c 	add.w	r3, r7, #28
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7ff ff0d 	bl	8004cbe <_Z18get_next_good_spadPhmmPl>

    if (nextGoodSpad == -1) {
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eaa:	d103      	bne.n	8004eb4 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x48>
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004eac:	23ce      	movs	r3, #206	; 0xce
 8004eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8004eb2:	e022      	b.n	8004efa <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    }

    /* Confirm that the next good SPAD is non-aperture */
    if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eba:	4413      	add	r3, r2
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7ff ff5d 	bl	8004d7c <_Z11is_aperturem>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	7afb      	ldrb	r3, [r7, #11]
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x72>
      /* if we can't get the required number of good aperture
       * spads from the current quadrant then this is an error
       */
      status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004ed6:	23ce      	movs	r3, #206	; 0xce
 8004ed8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 8004edc:	e00d      	b.n	8004efa <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x8e>
    }
    currentSpad = (uint32_t)nextGoodSpad;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	623b      	str	r3, [r7, #32]
    enable_spad_bit(spadArray, size, currentSpad);
 8004ee2:	6a3a      	ldr	r2, [r7, #32]
 8004ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ee6:	6838      	ldr	r0, [r7, #0]
 8004ee8:	f7ff ff62 	bl	8004db0 <_Z15enable_spad_bitPhmm>
    currentSpad++;
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	623b      	str	r3, [r7, #32]
  for (index = 0; index < spadCount; index++) {
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ef8:	e7c9      	b.n	8004e8e <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0x22>
  }
  *lastSpad = currentSpad;
 8004efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004efc:	6a3a      	ldr	r2, [r7, #32]
 8004efe:	601a      	str	r2, [r3, #0]

  if (status == VL53L0X_ERROR_NONE)
 8004f00:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xaa>
    status = set_ref_spad_map(Dev, spadArray);
 8004f08:	6839      	ldr	r1, [r7, #0]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f7ff ff88 	bl	8004e20 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (status == VL53L0X_ERROR_NONE) {
 8004f16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d121      	bne.n	8004f62 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
    status = get_ref_spad_map(Dev, checkSpadArray);
 8004f1e:	f107 0314 	add.w	r3, r7, #20
 8004f22:	4619      	mov	r1, r3
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f7ff ff8e 	bl	8004e46 <_Z16get_ref_spad_mapP13VL53L0X_Dev_tPh>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    i = 0;
 8004f30:	2300      	movs	r3, #0
 8004f32:	627b      	str	r3, [r7, #36]	; 0x24

    /* Compare spad maps. If not equal report error. */
    while (i < size) {
 8004f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d212      	bcs.n	8004f62 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
      if (spadArray[i] != checkSpadArray[i]) {
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	4413      	add	r3, r2
 8004f42:	781a      	ldrb	r2, [r3, #0]
 8004f44:	f107 0114 	add.w	r1, r7, #20
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	440b      	add	r3, r1
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d003      	beq.n	8004f5a <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xee>
        status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004f52:	23ce      	movs	r3, #206	; 0xce
 8004f54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 8004f58:	e003      	b.n	8004f62 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xf6>
      }
      i++;
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
    while (i < size) {
 8004f60:	e7e8      	b.n	8004f34 <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm+0xc8>
    }
  }
  return status;
 8004f62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3730      	adds	r7, #48	; 0x30
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>:

VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
                                             uint16_t *refSignalRate) {
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b08a      	sub	sp, #40	; 0x28
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  VL53L0X_RangingMeasurementData_t rangingMeasurementData;

  uint8_t SequenceConfig = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8004f8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  /*
   * This function performs a reference signal rate measurement.
   */
  if (status == VL53L0X_ERROR_NONE)
 8004f8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x38>
    status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);
 8004f96:	22c0      	movs	r2, #192	; 0xc0
 8004f98:	2101      	movs	r1, #1
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f002 fecb 	bl	8007d36 <VL53L0X_WrByte>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 8004fa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d108      	bne.n	8004fc0 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x52>
    status =
        VL53L0X_PerformSingleRangingMeasurement(Dev, &rangingMeasurementData);
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff fc43 	bl	8004840 <VL53L0X_PerformSingleRangingMeasurement>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 8004fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d107      	bne.n	8004fd8 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x6a>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004fc8:	2201      	movs	r2, #1
 8004fca:	21ff      	movs	r1, #255	; 0xff
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f002 feb2 	bl	8007d36 <VL53L0X_WrByte>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE)
 8004fd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d107      	bne.n	8004ff0 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x82>
    status = VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	21b6      	movs	r1, #182	; 0xb6
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f002 ff4d 	bl	8007e84 <VL53L0X_RdWord>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                            refSignalRate);

  if (status == VL53L0X_ERROR_NONE)
 8004ff0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0x9a>
    status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	21ff      	movs	r1, #255	; 0xff
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f002 fe9a 	bl	8007d36 <VL53L0X_WrByte>
 8005002:	4603      	mov	r3, r0
 8005004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status == VL53L0X_ERROR_NONE) {
 8005008:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800500c:	2b00      	cmp	r3, #0
 800500e:	d112      	bne.n	8005036 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0xc8>
    /* restore the previous Sequence Config */
    status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 8005010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005014:	461a      	mov	r2, r3
 8005016:	2101      	movs	r1, #1
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f002 fe8c 	bl	8007d36 <VL53L0X_WrByte>
 800501e:	4603      	mov	r3, r0
 8005020:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status == VL53L0X_ERROR_NONE)
 8005024:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005028:	2b00      	cmp	r3, #0
 800502a:	d104      	bne.n	8005036 <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt+0xc8>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005032:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return status;
 8005036:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800503a:	4618      	mov	r0, r3
 800503c:	3728      	adds	r7, #40	; 0x28
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
                                                  uint32_t *refSpadCount,
                                                  uint8_t *isApertureSpads) {
 8005042:	b590      	push	{r4, r7, lr}
 8005044:	b09d      	sub	sp, #116	; 0x74
 8005046:	af06      	add	r7, sp, #24
 8005048:	60f8      	str	r0, [r7, #12]
 800504a:	60b9      	str	r1, [r7, #8]
 800504c:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800504e:	2300      	movs	r3, #0
 8005050:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  uint8_t lastSpadArray[6];
  uint8_t startSelect = 0xB4;
 8005054:	23b4      	movs	r3, #180	; 0xb4
 8005056:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  uint32_t minimumSpadCount = 3;
 800505a:	2303      	movs	r3, #3
 800505c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t maxSpadCount = 44;
 800505e:	232c      	movs	r3, #44	; 0x2c
 8005060:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t currentSpadIndex = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t lastSpadIndex = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
  int32_t nextGoodSpad = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
  uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800506e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8005072:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t peakSignalRateRef;
  uint32_t needAptSpads = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t index = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t spadArraySize = 6;
 800507c:	2306      	movs	r3, #6
 800507e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t signalRateDiff = 0;
 8005080:	2300      	movs	r3, #0
 8005082:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t lastSignalRateDiff = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t complete = 0;
 8005088:	2300      	movs	r3, #0
 800508a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint8_t VhvSettings = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	747b      	strb	r3, [r7, #17]
  uint8_t PhaseCal = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	743b      	strb	r3, [r7, #16]
  uint32_t refSpadCount_int = 0;
 8005096:	2300      	movs	r3, #0
 8005098:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t isApertureSpads_int = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   * The start point is currently fixed to 180, which lies towards the end
   * of the non-aperture quadrant and runs in to the adjacent aperture
   * quadrant.
   */

  targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80050a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
   * This is a short term implementation. The good spad map will be
   * provided as an input.
   * Note that there are 6 bytes. Only the first 44 bits will be used to
   * represent spads.
   */
  for (index = 0; index < spadArraySize; index++)
 80050a8:	2300      	movs	r3, #0
 80050aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80050ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d20a      	bcs.n	80050ca <VL53L0X_perform_ref_spad_management+0x88>
    Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80050be:	2200      	movs	r2, #0
 80050c0:	701a      	strb	r2, [r3, #0]
  for (index = 0; index < spadArraySize; index++)
 80050c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c4:	3301      	adds	r3, #1
 80050c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050c8:	e7f0      	b.n	80050ac <VL53L0X_perform_ref_spad_management+0x6a>

  Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80050ca:	2201      	movs	r2, #1
 80050cc:	21ff      	movs	r1, #255	; 0xff
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f002 fe31 	bl	8007d36 <VL53L0X_WrByte>
 80050d4:	4603      	mov	r3, r0
 80050d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 80050da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <VL53L0X_perform_ref_spad_management+0xb0>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 80050e2:	2200      	movs	r2, #0
 80050e4:	214f      	movs	r1, #79	; 0x4f
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f002 fe25 	bl	8007d36 <VL53L0X_WrByte>
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 80050f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d107      	bne.n	800510a <VL53L0X_perform_ref_spad_management+0xc8>
    Status = VL53L0X_WrByte(
 80050fa:	222c      	movs	r2, #44	; 0x2c
 80050fc:	214e      	movs	r1, #78	; 0x4e
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f002 fe19 	bl	8007d36 <VL53L0X_WrByte>
 8005104:	4603      	mov	r3, r0
 8005106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        Dev, VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

  if (Status == VL53L0X_ERROR_NONE)
 800510a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800510e:	2b00      	cmp	r3, #0
 8005110:	d107      	bne.n	8005122 <VL53L0X_perform_ref_spad_management+0xe0>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005112:	2200      	movs	r2, #0
 8005114:	21ff      	movs	r1, #255	; 0xff
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f002 fe0d 	bl	8007d36 <VL53L0X_WrByte>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE)
 8005122:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <VL53L0X_perform_ref_spad_management+0xfc>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
 800512a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800512e:	461a      	mov	r2, r3
 8005130:	21b6      	movs	r1, #182	; 0xb6
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f002 fdff 	bl	8007d36 <VL53L0X_WrByte>
 8005138:	4603      	mov	r3, r0
 800513a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                            startSelect);

  if (Status == VL53L0X_ERROR_NONE)
 800513e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <VL53L0X_perform_ref_spad_management+0x114>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);
 8005146:	2200      	movs	r2, #0
 8005148:	2180      	movs	r1, #128	; 0x80
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f002 fdf3 	bl	8007d36 <VL53L0X_WrByte>
 8005150:	4603      	mov	r3, r0
 8005152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  /* Perform ref calibration */
  if (Status == VL53L0X_ERROR_NONE)
 8005156:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <VL53L0X_perform_ref_spad_management+0x132>
    Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings, &PhaseCal, 0);
 800515e:	f107 0210 	add.w	r2, r7, #16
 8005162:	f107 0111 	add.w	r1, r7, #17
 8005166:	2300      	movs	r3, #0
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fb1f 	bl	80057ac <VL53L0X_perform_ref_calibration>
 800516e:	4603      	mov	r3, r0
 8005170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

  if (Status == VL53L0X_ERROR_NONE) {
 8005174:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005178:	2b00      	cmp	r3, #0
 800517a:	d121      	bne.n	80051c0 <VL53L0X_perform_ref_spad_management+0x17e>
    /* Enable Minimum NON-APERTURE Spads */
    currentSpadIndex = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	653b      	str	r3, [r7, #80]	; 0x50
    lastSpadIndex = currentSpadIndex;
 8005180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005182:	61bb      	str	r3, [r7, #24]
    needAptSpads = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	64fb      	str	r3, [r7, #76]	; 0x4c
    Status = enable_ref_spads(
 8005188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800518a:	b2d9      	uxtb	r1, r3
        Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
        Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	f503 7492 	add.w	r4, r3, #292	; 0x124
    Status = enable_ref_spads(
 8005198:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800519c:	f107 0218 	add.w	r2, r7, #24
 80051a0:	9204      	str	r2, [sp, #16]
 80051a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051a4:	9203      	str	r2, [sp, #12]
 80051a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80051a8:	9202      	str	r2, [sp, #8]
 80051aa:	9301      	str	r3, [sp, #4]
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	9300      	str	r3, [sp, #0]
 80051b0:	4623      	mov	r3, r4
 80051b2:	4602      	mov	r2, r0
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff fe59 	bl	8004e6c <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>
 80051ba:	4603      	mov	r3, r0
 80051bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        currentSpadIndex, minimumSpadCount, &lastSpadIndex);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80051c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d179      	bne.n	80052bc <VL53L0X_perform_ref_spad_management+0x27a>
    currentSpadIndex = lastSpadIndex;
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	653b      	str	r3, [r7, #80]	; 0x50

    Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 80051cc:	f107 0312 	add.w	r3, r7, #18
 80051d0:	4619      	mov	r1, r3
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f7ff fecb 	bl	8004f6e <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 80051d8:	4603      	mov	r3, r0
 80051da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef > targetRefRate)) {
 80051de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d166      	bne.n	80052b4 <VL53L0X_perform_ref_spad_management+0x272>
 80051e6:	8a7b      	ldrh	r3, [r7, #18]
 80051e8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d262      	bcs.n	80052b4 <VL53L0X_perform_ref_spad_management+0x272>
      /* Signal rate measurement too high,
       * switch to APERTURE SPADs */

      for (index = 0; index < spadArraySize; index++)
 80051ee:	2300      	movs	r3, #0
 80051f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80051f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d20a      	bcs.n	8005210 <VL53L0X_perform_ref_spad_management+0x1ce>
        Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051fe:	4413      	add	r3, r2
 8005200:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
      for (index = 0; index < spadArraySize; index++)
 8005208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520a:	3301      	adds	r3, #1
 800520c:	64bb      	str	r3, [r7, #72]	; 0x48
 800520e:	e7f0      	b.n	80051f2 <VL53L0X_perform_ref_spad_management+0x1b0>

      /* Increment to the first APERTURE spad */
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005210:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005214:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005216:	4413      	add	r3, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f7ff fdaf 	bl	8004d7c <_Z11is_aperturem>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d105      	bne.n	8005230 <VL53L0X_perform_ref_spad_management+0x1ee>
 8005224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	429a      	cmp	r2, r3
 800522a:	d201      	bcs.n	8005230 <VL53L0X_perform_ref_spad_management+0x1ee>
 800522c:	2301      	movs	r3, #1
 800522e:	e000      	b.n	8005232 <VL53L0X_perform_ref_spad_management+0x1f0>
 8005230:	2300      	movs	r3, #0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <VL53L0X_perform_ref_spad_management+0x1fc>
             (currentSpadIndex < maxSpadCount)) {
        currentSpadIndex++;
 8005236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005238:	3301      	adds	r3, #1
 800523a:	653b      	str	r3, [r7, #80]	; 0x50
      while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800523c:	e7e8      	b.n	8005210 <VL53L0X_perform_ref_spad_management+0x1ce>
      }

      needAptSpads = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	64fb      	str	r3, [r7, #76]	; 0x4c

      Status = enable_ref_spads(
 8005242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005244:	b2d9      	uxtb	r1, r3
          Dev, needAptSpads, Dev->Data.SpadData.RefGoodSpadMap,
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f503 7095 	add.w	r0, r3, #298	; 0x12a
          Dev->Data.SpadData.RefSpadEnables, spadArraySize, startSelect,
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 7492 	add.w	r4, r3, #292	; 0x124
      Status = enable_ref_spads(
 8005252:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005256:	f107 0218 	add.w	r2, r7, #24
 800525a:	9204      	str	r2, [sp, #16]
 800525c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800525e:	9203      	str	r2, [sp, #12]
 8005260:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005262:	9202      	str	r2, [sp, #8]
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	4623      	mov	r3, r4
 800526c:	4602      	mov	r2, r0
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff fdfc 	bl	8004e6c <_Z16enable_ref_spadsP13VL53L0X_Dev_thPhS1_mmmmPm>
 8005274:	4603      	mov	r3, r0
 8005276:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          currentSpadIndex, minimumSpadCount, &lastSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 800527a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800527e:	2b00      	cmp	r3, #0
 8005280:	d11b      	bne.n	80052ba <VL53L0X_perform_ref_spad_management+0x278>
        currentSpadIndex = lastSpadIndex;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	653b      	str	r3, [r7, #80]	; 0x50
        Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 8005286:	f107 0312 	add.w	r3, r7, #18
 800528a:	4619      	mov	r1, r3
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff fe6e 	bl	8004f6e <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 8005292:	4603      	mov	r3, r0
 8005294:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

        if ((Status == VL53L0X_ERROR_NONE) &&
 8005298:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10c      	bne.n	80052ba <VL53L0X_perform_ref_spad_management+0x278>
            (peakSignalRateRef > targetRefRate)) {
 80052a0:	8a7b      	ldrh	r3, [r7, #18]
        if ((Status == VL53L0X_ERROR_NONE) &&
 80052a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d208      	bcs.n	80052ba <VL53L0X_perform_ref_spad_management+0x278>
           * setting the minimum number of
           * APERTURE spads. Can do no more
           * therefore set the min number of
           * aperture spads as the result.
           */
          isApertureSpads_int = 1;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          refSpadCount_int = minimumSpadCount;
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	63fb      	str	r3, [r7, #60]	; 0x3c
      if (Status == VL53L0X_ERROR_NONE) {
 80052b2:	e002      	b.n	80052ba <VL53L0X_perform_ref_spad_management+0x278>
        }
      }
    } else {
      needAptSpads = 0;
 80052b4:	2300      	movs	r3, #0
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b8:	e000      	b.n	80052bc <VL53L0X_perform_ref_spad_management+0x27a>
      if (Status == VL53L0X_ERROR_NONE) {
 80052ba:	bf00      	nop
    }
  }

  if ((Status == VL53L0X_ERROR_NONE) && (peakSignalRateRef < targetRefRate)) {
 80052bc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 80b3 	bne.w	800542c <VL53L0X_perform_ref_spad_management+0x3ea>
 80052c6:	8a7b      	ldrh	r3, [r7, #18]
 80052c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80052ca:	429a      	cmp	r2, r3
 80052cc:	f240 80ae 	bls.w	800542c <VL53L0X_perform_ref_spad_management+0x3ea>
    /* At this point, the minimum number of either aperture
     * or non-aperture spads have been set. Proceed to add
     * spads and perform measurements until the target
     * reference is reached.
     */
    isApertureSpads_int = needAptSpads;
 80052d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    refSpadCount_int = minimumSpadCount;
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	63fb      	str	r3, [r7, #60]	; 0x3c

    memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 7192 	add.w	r1, r3, #292	; 0x124
 80052e0:	f107 031c 	add.w	r3, r7, #28
 80052e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052e6:	4618      	mov	r0, r3
 80052e8:	f002 fe56 	bl	8007f98 <memcpy>
    lastSignalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80052ec:	8a7b      	ldrh	r3, [r7, #18]
 80052ee:	461a      	mov	r2, r3
 80052f0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfb8      	it	lt
 80052f8:	425b      	neglt	r3, r3
 80052fa:	647b      	str	r3, [r7, #68]	; 0x44
    complete = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    while (!complete) {
 8005302:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005306:	2b00      	cmp	r3, #0
 8005308:	f040 8090 	bne.w	800542c <VL53L0X_perform_ref_spad_management+0x3ea>
      get_next_good_spad(Dev->Data.SpadData.RefGoodSpadMap, spadArraySize,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
 8005312:	f107 0314 	add.w	r3, r7, #20
 8005316:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800531a:	f7ff fcd0 	bl	8004cbe <_Z18get_next_good_spadPhmmPl>
                         currentSpadIndex, &nextGoodSpad);

      if (nextGoodSpad == -1) {
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d103      	bne.n	800532e <VL53L0X_perform_ref_spad_management+0x2ec>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005326:	23ce      	movs	r3, #206	; 0xce
 8005328:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 800532c:	e07e      	b.n	800542c <VL53L0X_perform_ref_spad_management+0x3ea>
      }

      (refSpadCount_int)++;
 800532e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005330:	3301      	adds	r3, #1
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c

      /* Cannot combine Aperture and Non-Aperture spads, so
       * ensure the current spad is of the correct type.
       */
      if (is_aperture((uint32_t)startSelect + nextGoodSpad) != needAptSpads) {
 8005334:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4413      	add	r3, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fd1d 	bl	8004d7c <_Z11is_aperturem>
 8005342:	4603      	mov	r3, r0
 8005344:	461a      	mov	r2, r3
 8005346:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005348:	4293      	cmp	r3, r2
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <VL53L0X_perform_ref_spad_management+0x31c>
        Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005356:	23ce      	movs	r3, #206	; 0xce
 8005358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        break;
 800535c:	e066      	b.n	800542c <VL53L0X_perform_ref_spad_management+0x3ea>
      }

      currentSpadIndex = nextGoodSpad;
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	653b      	str	r3, [r7, #80]	; 0x50
      Status = enable_spad_bit(Dev->Data.SpadData.RefSpadEnables, spadArraySize,
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005368:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800536a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fd1f 	bl	8004db0 <_Z15enable_spad_bitPhmm>
 8005372:	4603      	mov	r3, r0
 8005374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                               currentSpadIndex);

      if (Status == VL53L0X_ERROR_NONE) {
 8005378:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10c      	bne.n	800539a <VL53L0X_perform_ref_spad_management+0x358>
        currentSpadIndex++;
 8005380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005382:	3301      	adds	r3, #1
 8005384:	653b      	str	r3, [r7, #80]	; 0x50
        /* Proceed to apply the additional spad and
         * perform measurement. */
        Status = set_ref_spad_map(Dev, Dev->Data.SpadData.RefSpadEnables);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800538c:	4619      	mov	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fd46 	bl	8004e20 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 8005394:	4603      	mov	r3, r0
 8005396:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      }

      if (Status != VL53L0X_ERROR_NONE)
 800539a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d141      	bne.n	8005426 <VL53L0X_perform_ref_spad_management+0x3e4>
        break;

      Status = perform_ref_signal_measurement(Dev, &peakSignalRateRef);
 80053a2:	f107 0312 	add.w	r3, r7, #18
 80053a6:	4619      	mov	r1, r3
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f7ff fde0 	bl	8004f6e <_Z30perform_ref_signal_measurementP13VL53L0X_Dev_tPt>
 80053ae:	4603      	mov	r3, r0
 80053b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

      if (Status != VL53L0X_ERROR_NONE)
 80053b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d136      	bne.n	800542a <VL53L0X_perform_ref_spad_management+0x3e8>
        break;

      signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80053bc:	8a7b      	ldrh	r3, [r7, #18]
 80053be:	461a      	mov	r2, r3
 80053c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	bfb8      	it	lt
 80053c8:	425b      	neglt	r3, r3
 80053ca:	627b      	str	r3, [r7, #36]	; 0x24

      if (peakSignalRateRef > targetRefRate) {
 80053cc:	8a7b      	ldrh	r3, [r7, #18]
 80053ce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d21c      	bcs.n	800540e <VL53L0X_perform_ref_spad_management+0x3cc>
        /* Select the spad map that provides the
         * measurement closest to the target rate,
         * either above or below it.
         */
        if (signalRateDiff > lastSignalRateDiff) {
 80053d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053d8:	429a      	cmp	r2, r3
 80053da:	d914      	bls.n	8005406 <VL53L0X_perform_ref_spad_management+0x3c4>
          /* Previous spad map produced a closer
           * measurement, so choose this. */
          Status = set_ref_spad_map(Dev, lastSpadArray);
 80053dc:	f107 031c 	add.w	r3, r7, #28
 80053e0:	4619      	mov	r1, r3
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff fd1c 	bl	8004e20 <_Z16set_ref_spad_mapP13VL53L0X_Dev_tPh>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          memcpy(Dev->Data.SpadData.RefSpadEnables, lastSpadArray,
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80053f4:	f107 011c 	add.w	r1, r7, #28
 80053f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 fdcc 	bl	8007f98 <memcpy>
                 spadArraySize);

          (refSpadCount_int)--;
 8005400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005402:	3b01      	subs	r3, #1
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        complete = 1;
 8005406:	2301      	movs	r3, #1
 8005408:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540c:	e779      	b.n	8005302 <VL53L0X_perform_ref_spad_management+0x2c0>
      } else {
        /* Continue to add spads */
        lastSignalRateDiff = signalRateDiff;
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	647b      	str	r3, [r7, #68]	; 0x44
        memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables, spadArraySize);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800541e:	4618      	mov	r0, r3
 8005420:	f002 fdba 	bl	8007f98 <memcpy>
    while (!complete) {
 8005424:	e76d      	b.n	8005302 <VL53L0X_perform_ref_spad_management+0x2c0>
        break;
 8005426:	bf00      	nop
 8005428:	e000      	b.n	800542c <VL53L0X_perform_ref_spad_management+0x3ea>
        break;
 800542a:	bf00      	nop
      }

    } /* while */
  }

  if (Status == VL53L0X_ERROR_NONE) {
 800542c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005430:	2b00      	cmp	r3, #0
 8005432:	d115      	bne.n	8005460 <VL53L0X_perform_ref_spad_management+0x41e>
    *refSpadCount = refSpadCount_int;
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005438:	601a      	str	r2, [r3, #0]
    *isApertureSpads = isApertureSpads_int;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005440:	701a      	strb	r2, [r3, #0]

    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b2da      	uxtb	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                       (uint8_t)(*refSpadCount));
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	781a      	ldrb	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                       *isApertureSpads);
  }

  return Status;
 8005460:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005464:	4618      	mov	r0, r3
 8005466:	375c      	adds	r7, #92	; 0x5c
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}

0800546c <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>:

  return Status;
}

VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
                                                     uint8_t vhv_init_byte) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 800547c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10a      	bne.n	800549a <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x2e>
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005484:	78fb      	ldrb	r3, [r7, #3]
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	2100      	movs	r1, #0
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f002 fc50 	bl	8007d36 <VL53L0X_WrByte>
 8005496:	4603      	mov	r3, r0
 8005498:	73fb      	strb	r3, [r7, #15]
                       VL53L0X_REG_SYSRANGE_MODE_START_STOP | vhv_init_byte);

  if (Status == VL53L0X_ERROR_NONE)
 800549a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d104      	bne.n	80054ac <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x40>
    Status = VL53L0X_measurement_poll_for_completion(Dev);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 f9d4 	bl	8005850 <VL53L0X_measurement_poll_for_completion>
 80054a8:	4603      	mov	r3, r0
 80054aa:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80054ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d105      	bne.n	80054c0 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x54>
    Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80054b4:	2100      	movs	r1, #0
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7ff fb4a 	bl	8004b50 <VL53L0X_ClearInterruptMask>
 80054bc:	4603      	mov	r3, r0
 80054be:	73fb      	strb	r3, [r7, #15]

  if (Status == VL53L0X_ERROR_NONE)
 80054c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d106      	bne.n	80054d6 <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th+0x6a>
    Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2100      	movs	r1, #0
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f002 fc32 	bl	8007d36 <VL53L0X_WrByte>
 80054d2:	4603      	mov	r3, r0
 80054d4:	73fb      	strb	r3, [r7, #15]

  return Status;
 80054d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>:

VL53L0X_Error VL53L0X_ref_calibration_io(
    VL53L0X_DEV Dev, uint8_t read_not_write, uint8_t VhvSettings,
    uint8_t PhaseCal, uint8_t *pVhvSettings, uint8_t *pPhaseCal,
    const uint8_t vhv_enable, const uint8_t phase_enable) {
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
 80054ea:	4608      	mov	r0, r1
 80054ec:	4611      	mov	r1, r2
 80054ee:	461a      	mov	r2, r3
 80054f0:	4603      	mov	r3, r0
 80054f2:	70fb      	strb	r3, [r7, #3]
 80054f4:	460b      	mov	r3, r1
 80054f6:	70bb      	strb	r3, [r7, #2]
 80054f8:	4613      	mov	r3, r2
 80054fa:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80054fc:	2300      	movs	r3, #0
 80054fe:	73fb      	strb	r3, [r7, #15]
  uint8_t PhaseCalint = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	73bb      	strb	r3, [r7, #14]

  /* Read VHV from device */
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005504:	2201      	movs	r2, #1
 8005506:	21ff      	movs	r1, #255	; 0xff
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f002 fc14 	bl	8007d36 <VL53L0X_WrByte>
 800550e:	4603      	mov	r3, r0
 8005510:	461a      	mov	r2, r3
 8005512:	7bfb      	ldrb	r3, [r7, #15]
 8005514:	4313      	orrs	r3, r2
 8005516:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005518:	2200      	movs	r2, #0
 800551a:	2100      	movs	r1, #0
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f002 fc0a 	bl	8007d36 <VL53L0X_WrByte>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	4313      	orrs	r3, r2
 800552a:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800552c:	2200      	movs	r2, #0
 800552e:	21ff      	movs	r1, #255	; 0xff
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f002 fc00 	bl	8007d36 <VL53L0X_WrByte>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	4313      	orrs	r3, r2
 800553e:	73fb      	strb	r3, [r7, #15]

  if (read_not_write) {
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01e      	beq.n	8005584 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xa2>
    if (vhv_enable)
 8005546:	f897 3020 	ldrb.w	r3, [r7, #32]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0x80>
      Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	21cb      	movs	r1, #203	; 0xcb
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f002 fc75 	bl	8007e42 <VL53L0X_RdByte>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	4313      	orrs	r3, r2
 8005560:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 8005562:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005566:	2b00      	cmp	r3, #0
 8005568:	d02a      	beq.n	80055c0 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
      Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800556a:	f107 030e 	add.w	r3, r7, #14
 800556e:	461a      	mov	r2, r3
 8005570:	21ee      	movs	r1, #238	; 0xee
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f002 fc65 	bl	8007e42 <VL53L0X_RdByte>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	7bfb      	ldrb	r3, [r7, #15]
 800557e:	4313      	orrs	r3, r2
 8005580:	73fb      	strb	r3, [r7, #15]
 8005582:	e01d      	b.n	80055c0 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
  } else {
    if (vhv_enable)
 8005584:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xc0>
      Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800558c:	78bb      	ldrb	r3, [r7, #2]
 800558e:	461a      	mov	r2, r3
 8005590:	21cb      	movs	r1, #203	; 0xcb
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f002 fbcf 	bl	8007d36 <VL53L0X_WrByte>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	4313      	orrs	r3, r2
 80055a0:	73fb      	strb	r3, [r7, #15]
    if (phase_enable)
 80055a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh+0xde>
      Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80055aa:	787b      	ldrb	r3, [r7, #1]
 80055ac:	2280      	movs	r2, #128	; 0x80
 80055ae:	21ee      	movs	r1, #238	; 0xee
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f002 fc04 	bl	8007dbe <VL53L0X_UpdateByte>
 80055b6:	4603      	mov	r3, r0
 80055b8:	461a      	mov	r2, r3
 80055ba:	7bfb      	ldrb	r3, [r7, #15]
 80055bc:	4313      	orrs	r3, r2
 80055be:	73fb      	strb	r3, [r7, #15]
  }

  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80055c0:	2201      	movs	r2, #1
 80055c2:	21ff      	movs	r1, #255	; 0xff
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f002 fbb6 	bl	8007d36 <VL53L0X_WrByte>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80055d4:	2201      	movs	r2, #1
 80055d6:	2100      	movs	r1, #0
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f002 fbac 	bl	8007d36 <VL53L0X_WrByte>
 80055de:	4603      	mov	r3, r0
 80055e0:	461a      	mov	r2, r3
 80055e2:	7bfb      	ldrb	r3, [r7, #15]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	73fb      	strb	r3, [r7, #15]
  Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80055e8:	2200      	movs	r2, #0
 80055ea:	21ff      	movs	r1, #255	; 0xff
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f002 fba2 	bl	8007d36 <VL53L0X_WrByte>
 80055f2:	4603      	mov	r3, r0
 80055f4:	461a      	mov	r2, r3
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	73fb      	strb	r3, [r7, #15]

  *pPhaseCal = (uint8_t)(PhaseCalint & 0xEF);
 80055fc:	7bbb      	ldrb	r3, [r7, #14]
 80055fe:	f023 0310 	bic.w	r3, r3, #16
 8005602:	b2da      	uxtb	r2, r3
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	701a      	strb	r2, [r3, #0]

  return Status;
 8005608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh>:

VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              const uint8_t get_data_enable,
                                              const uint8_t restore_config) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b08a      	sub	sp, #40	; 0x28
 8005618:	af04      	add	r7, sp, #16
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4611      	mov	r1, r2
 8005620:	461a      	mov	r2, r3
 8005622:	460b      	mov	r3, r1
 8005624:	71fb      	strb	r3, [r7, #7]
 8005626:	4613      	mov	r3, r2
 8005628:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 800562e:	2300      	movs	r3, #0
 8005630:	75bb      	strb	r3, [r7, #22]
  uint8_t VhvSettings = 0;
 8005632:	2300      	movs	r3, #0
 8005634:	757b      	strb	r3, [r7, #21]
  uint8_t PhaseCal = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	753b      	strb	r3, [r7, #20]
  uint8_t PhaseCalInt = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	74fb      	strb	r3, [r7, #19]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  if (restore_config)
 800563e:	79bb      	ldrb	r3, [r7, #6]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x38>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800564a:	75bb      	strb	r3, [r7, #22]

  /* Run VHV */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800564c:	2201      	movs	r2, #1
 800564e:	2101      	movs	r1, #1
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f002 fb70 	bl	8007d36 <VL53L0X_WrByte>
 8005656:	4603      	mov	r3, r0
 8005658:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 800565a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d105      	bne.n	800566e <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x5a>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005662:	2140      	movs	r1, #64	; 0x40
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f7ff ff01 	bl	800546c <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>
 800566a:	4603      	mov	r3, r0
 800566c:	75fb      	strb	r3, [r7, #23]

  /* Read VHV from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800566e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d115      	bne.n	80056a2 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x8e>
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d112      	bne.n	80056a2 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x8e>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 800567c:	7d39      	ldrb	r1, [r7, #20]
 800567e:	7d7a      	ldrb	r2, [r7, #21]
 8005680:	2300      	movs	r3, #0
 8005682:	9303      	str	r3, [sp, #12]
 8005684:	2301      	movs	r3, #1
 8005686:	9302      	str	r3, [sp, #8]
 8005688:	f107 0313 	add.w	r3, r7, #19
 800568c:	9301      	str	r3, [sp, #4]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	460b      	mov	r3, r1
 8005694:	2101      	movs	r1, #1
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f7ff ff23 	bl	80054e2 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>
 800569c:	4603      	mov	r3, r0
 800569e:	75fb      	strb	r3, [r7, #23]
 80056a0:	e002      	b.n	80056a8 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0x94>
                                        PhaseCal, /* Not used here */
                                        pVhvSettings, &PhaseCalInt, 1, 0);
  } else
    *pVhvSettings = 0;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80056a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d112      	bne.n	80056d6 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
 80056b0:	79bb      	ldrb	r3, [r7, #6]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00f      	beq.n	80056d6 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 80056b6:	7dbb      	ldrb	r3, [r7, #22]
 80056b8:	461a      	mov	r2, r3
 80056ba:	2101      	movs	r1, #1
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f002 fb3a 	bl	8007d36 <VL53L0X_WrByte>
 80056c2:	4603      	mov	r3, r0
 80056c4:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 80056c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d103      	bne.n	80056d6 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh+0xc2>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	7dba      	ldrb	r2, [r7, #22]
 80056d2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 80056d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
                                                uint8_t *pPhaseCal,
                                                const uint8_t get_data_enable,
                                                const uint8_t restore_config) {
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b08a      	sub	sp, #40	; 0x28
 80056e6:	af04      	add	r7, sp, #16
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	4611      	mov	r1, r2
 80056ee:	461a      	mov	r2, r3
 80056f0:	460b      	mov	r3, r1
 80056f2:	71fb      	strb	r3, [r7, #7]
 80056f4:	4613      	mov	r3, r2
 80056f6:	71bb      	strb	r3, [r7, #6]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	75bb      	strb	r3, [r7, #22]
  uint8_t VhvSettings = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	757b      	strb	r3, [r7, #21]
  uint8_t PhaseCal = 0;
 8005704:	2300      	movs	r3, #0
 8005706:	753b      	strb	r3, [r7, #20]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  if (restore_config)
 8005708:	79bb      	ldrb	r3, [r7, #6]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <VL53L0X_perform_phase_calibration+0x34>
    SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005714:	75bb      	strb	r3, [r7, #22]

  /* Run PhaseCal */
  Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8005716:	2202      	movs	r2, #2
 8005718:	2101      	movs	r1, #1
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f002 fb0b 	bl	8007d36 <VL53L0X_WrByte>
 8005720:	4603      	mov	r3, r0
 8005722:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 8005724:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d105      	bne.n	8005738 <VL53L0X_perform_phase_calibration+0x56>
    Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800572c:	2100      	movs	r1, #0
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff fe9c 	bl	800546c <_Z38VL53L0X_perform_single_ref_calibrationP13VL53L0X_Dev_th>
 8005734:	4603      	mov	r3, r0
 8005736:	75fb      	strb	r3, [r7, #23]

  /* Read PhaseCal from device */
  if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005738:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d115      	bne.n	800576c <VL53L0X_perform_phase_calibration+0x8a>
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d112      	bne.n	800576c <VL53L0X_perform_phase_calibration+0x8a>
    Status = VL53L0X_ref_calibration_io(Dev, 1, VhvSettings,
 8005746:	7d39      	ldrb	r1, [r7, #20]
 8005748:	7d7a      	ldrb	r2, [r7, #21]
 800574a:	2301      	movs	r3, #1
 800574c:	9303      	str	r3, [sp, #12]
 800574e:	2300      	movs	r3, #0
 8005750:	9302      	str	r3, [sp, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	f107 0313 	add.w	r3, r7, #19
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	460b      	mov	r3, r1
 800575e:	2101      	movs	r1, #1
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff febe 	bl	80054e2 <_Z26VL53L0X_ref_calibration_ioP13VL53L0X_Dev_thhhPhS1_hh>
 8005766:	4603      	mov	r3, r0
 8005768:	75fb      	strb	r3, [r7, #23]
 800576a:	e002      	b.n	8005772 <VL53L0X_perform_phase_calibration+0x90>
                                        PhaseCal, /* Not used here */
                                        &VhvSettingsint, pPhaseCal, 0, 1);
  } else
    *pPhaseCal = 0;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]

  if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8005772:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d112      	bne.n	80057a0 <VL53L0X_perform_phase_calibration+0xbe>
 800577a:	79bb      	ldrb	r3, [r7, #6]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <VL53L0X_perform_phase_calibration+0xbe>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 8005780:	7dbb      	ldrb	r3, [r7, #22]
 8005782:	461a      	mov	r2, r3
 8005784:	2101      	movs	r1, #1
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f002 fad5 	bl	8007d36 <VL53L0X_WrByte>
 800578c:	4603      	mov	r3, r0
 800578e:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 8005790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d103      	bne.n	80057a0 <VL53L0X_perform_phase_calibration+0xbe>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	7dba      	ldrb	r2, [r7, #22]
 800579c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 80057a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
                                              uint8_t *pVhvSettings,
                                              uint8_t *pPhaseCal,
                                              uint8_t get_data_enable) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	70fb      	strb	r3, [r7, #3]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
  uint8_t SequenceConfig = 0;
 80057be:	2300      	movs	r3, #0
 80057c0:	75bb      	strb	r3, [r7, #22]

  /* store the value of the sequence config,
   * this will be reset before the end of the function
   */

  SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80057c8:	75bb      	strb	r3, [r7, #22]

  /* In the following function we don't save the config to optimize
   * writes on device. Config is saved and restored only once. */
  Status =
      VL53L0X_perform_vhv_calibration(Dev, pVhvSettings, get_data_enable, 0);
 80057ca:	78fa      	ldrb	r2, [r7, #3]
 80057cc:	2300      	movs	r3, #0
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f7ff ff1f 	bl	8005614 <_Z31VL53L0X_perform_vhv_calibrationP13VL53L0X_Dev_tPhhh>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE)
 80057da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d107      	bne.n	80057f2 <VL53L0X_perform_ref_calibration+0x46>
    Status =
        VL53L0X_perform_phase_calibration(Dev, pPhaseCal, get_data_enable, 0);
 80057e2:	78fa      	ldrb	r2, [r7, #3]
 80057e4:	2300      	movs	r3, #0
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff ff7a 	bl	80056e2 <VL53L0X_perform_phase_calibration>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 80057f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10f      	bne.n	800581a <VL53L0X_perform_ref_calibration+0x6e>
    /* restore the previous Sequence Config */
    Status =
        VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfig);
 80057fa:	7dbb      	ldrb	r3, [r7, #22]
 80057fc:	461a      	mov	r2, r3
 80057fe:	2101      	movs	r1, #1
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f002 fa98 	bl	8007d36 <VL53L0X_WrByte>
 8005806:	4603      	mov	r3, r0
 8005808:	75fb      	strb	r3, [r7, #23]
    if (Status == VL53L0X_ERROR_NONE)
 800580a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <VL53L0X_perform_ref_calibration+0x6e>
      PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	7dba      	ldrb	r2, [r7, #22]
 8005816:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
  }

  return Status;
 800581a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3718      	adds	r7, #24
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <_ZSt3absx>:
  abs(long __i) { return __builtin_labs(__i); }
#endif

#ifdef _GLIBCXX_USE_LONG_LONG
  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
 8005826:	b4b0      	push	{r4, r5, r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	e9c7 0100 	strd	r0, r1, [r7]
 8005830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005834:	2b00      	cmp	r3, #0
 8005836:	da05      	bge.n	8005844 <_ZSt3absx+0x1e>
 8005838:	2100      	movs	r1, #0
 800583a:	4254      	negs	r4, r2
 800583c:	eb61 0503 	sbc.w	r5, r1, r3
 8005840:	4622      	mov	r2, r4
 8005842:	462b      	mov	r3, r5
 8005844:	4610      	mov	r0, r2
 8005846:	4619      	mov	r1, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bcb0      	pop	{r4, r5, r7}
 800584e:	4770      	bx	lr

08005850 <VL53L0X_measurement_poll_for_completion>:
    data[mirrorIndex] = tempData;
  }
  return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev) {
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005858:	2300      	movs	r3, #0
 800585a:	75fb      	strb	r3, [r7, #23]
  uint8_t NewDataReady = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	73fb      	strb	r3, [r7, #15]
  uint32_t LoopNb;

  LOG_FUNCTION_START("");

  LoopNb = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]

  do {
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8005864:	f107 030f 	add.w	r3, r7, #15
 8005868:	4619      	mov	r1, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7fe fe83 	bl	8004576 <VL53L0X_GetMeasurementDataReady>
 8005870:	4603      	mov	r3, r0
 8005872:	75fb      	strb	r3, [r7, #23]
    if (Status != 0)
 8005874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10f      	bne.n	800589c <VL53L0X_measurement_poll_for_completion+0x4c>
      break; /* the error is set */

    if (NewDataReady == 1)
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	2b01      	cmp	r3, #1
 8005880:	d00e      	beq.n	80058a0 <VL53L0X_measurement_poll_for_completion+0x50>
      break; /* done note that status == 0 */

    LoopNb++;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3301      	adds	r3, #1
 8005886:	613b      	str	r3, [r7, #16]
    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	2bc7      	cmp	r3, #199	; 0xc7
 800588c:	d902      	bls.n	8005894 <VL53L0X_measurement_poll_for_completion+0x44>
      Status = VL53L0X_ERROR_TIME_OUT;
 800588e:	23f9      	movs	r3, #249	; 0xf9
 8005890:	75fb      	strb	r3, [r7, #23]
      break;
 8005892:	e006      	b.n	80058a2 <VL53L0X_measurement_poll_for_completion+0x52>
    }

    VL53L0X_PollingDelay(Dev);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f002 fb37 	bl	8007f08 <VL53L0X_PollingDelay>
    Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800589a:	e7e3      	b.n	8005864 <VL53L0X_measurement_poll_for_completion+0x14>
      break; /* the error is set */
 800589c:	bf00      	nop
 800589e:	e000      	b.n	80058a2 <VL53L0X_measurement_poll_for_completion+0x52>
      break; /* done note that status == 0 */
 80058a0:	bf00      	nop
  } while (1);

  LOG_FUNCTION_END(Status);

  return Status;
 80058a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <VL53L0X_decode_vcsel_period>:

uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg) {
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	4603      	mov	r3, r0
 80058b6:	71fb      	strb	r3, [r7, #7]
  /*!
   * Converts the encoded VCSEL period register value into the real
   * period in PLL clocks
   */

  uint8_t vcsel_period_pclks = 0;
 80058b8:	2300      	movs	r3, #0
 80058ba:	73fb      	strb	r3, [r7, #15]

  vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	3301      	adds	r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	005b      	lsls	r3, r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]

  return vcsel_period_pclks;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <VL53L0X_isqrt>:
  vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;

  return vcsel_period_reg;
}

uint32_t VL53L0X_isqrt(uint32_t num) {
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
   * Implements an integer square root
   *
   * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
   */

  uint32_t res = 0;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]
  uint32_t bit = 1 << 30;
 80058e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80058e4:	60bb      	str	r3, [r7, #8]
  /* The second-to-top bit is set:
   *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

  /* "bit" starts at the highest power of four <= the argument. */
  while (bit > num)
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d903      	bls.n	80058f6 <VL53L0X_isqrt+0x22>
    bit >>= 2;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	089b      	lsrs	r3, r3, #2
 80058f2:	60bb      	str	r3, [r7, #8]
  while (bit > num)
 80058f4:	e7f7      	b.n	80058e6 <VL53L0X_isqrt+0x12>

  while (bit != 0) {
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d018      	beq.n	800592e <VL53L0X_isqrt+0x5a>
    if (num >= res + bit) {
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	4413      	add	r3, r2
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	429a      	cmp	r2, r3
 8005906:	d30b      	bcc.n	8005920 <VL53L0X_isqrt+0x4c>
      num -= res + bit;
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	607b      	str	r3, [r7, #4]
      res = (res >> 1) + bit;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	085b      	lsrs	r3, r3, #1
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	4413      	add	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	e002      	b.n	8005926 <VL53L0X_isqrt+0x52>
    } else
      res >>= 1;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	60fb      	str	r3, [r7, #12]

    bit >>= 2;
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	089b      	lsrs	r3, r3, #2
 800592a:	60bb      	str	r3, [r7, #8]
  while (bit != 0) {
 800592c:	e7e3      	b.n	80058f6 <VL53L0X_isqrt+0x22>
  }

  return res;
 800592e:	68fb      	ldr	r3, [r7, #12]
}
 8005930:	4618      	mov	r0, r3
 8005932:	3714      	adds	r7, #20
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>:
    res = VL53L0X_isqrt(a * a + b * b);

  return res;
}

VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005944:	2300      	movs	r3, #0
 8005946:	75fb      	strb	r3, [r7, #23]
  uint8_t strobe;
  uint32_t LoopNb;
  LOG_FUNCTION_START("");

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8005948:	2200      	movs	r2, #0
 800594a:	2183      	movs	r1, #131	; 0x83
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f002 f9f2 	bl	8007d36 <VL53L0X_WrByte>
 8005952:	4603      	mov	r3, r0
 8005954:	461a      	mov	r2, r3
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	4313      	orrs	r3, r2
 800595a:	75fb      	strb	r3, [r7, #23]

  /* polling
   * use timeout to avoid deadlock*/
  if (Status == VL53L0X_ERROR_NONE) {
 800595c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d11d      	bne.n	80059a0 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x64>
    LoopNb = 0;
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
    do {
      Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8005968:	f107 030f 	add.w	r3, r7, #15
 800596c:	461a      	mov	r2, r3
 800596e:	2183      	movs	r1, #131	; 0x83
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f002 fa66 	bl	8007e42 <VL53L0X_RdByte>
 8005976:	4603      	mov	r3, r0
 8005978:	75fb      	strb	r3, [r7, #23]
      if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10a      	bne.n	8005996 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
 8005980:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
        break;

      LoopNb = LoopNb + 1;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	3301      	adds	r3, #1
 800598c:	613b      	str	r3, [r7, #16]
    } while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2bc7      	cmp	r3, #199	; 0xc7
 8005992:	d800      	bhi.n	8005996 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x5a>
    do {
 8005994:	e7e8      	b.n	8005968 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x2c>

    if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2bc7      	cmp	r3, #199	; 0xc7
 800599a:	d901      	bls.n	80059a0 <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t+0x64>
      Status = VL53L0X_ERROR_TIME_OUT;
 800599c:	23f9      	movs	r3, #249	; 0xf9
 800599e:	75fb      	strb	r3, [r7, #23]
  }

  Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80059a0:	2201      	movs	r2, #1
 80059a2:	2183      	movs	r1, #131	; 0x83
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f002 f9c6 	bl	8007d36 <VL53L0X_WrByte>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	7dfb      	ldrb	r3, [r7, #23]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	75fb      	strb	r3, [r7, #23]

  LOG_FUNCTION_END(Status);
  return Status;
 80059b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option) {
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b098      	sub	sp, #96	; 0x60
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	460b      	mov	r3, r1
 80059ca:	70fb      	strb	r3, [r7, #3]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80059cc:	2300      	movs	r3, #0
 80059ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t byte;
  uint32_t TmpDWord;
  uint8_t ModuleId;
  uint8_t Revision;
  uint8_t ReferenceSpadCount = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  uint8_t ReferenceSpadType = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  uint32_t PartUIDUpper = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PartUIDLower = 0;
 80059e2:	2300      	movs	r3, #0
 80059e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t OffsetFixed1104_mm = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	64bb      	str	r3, [r7, #72]	; 0x48
  int16_t OffsetMicroMeters = 0;
 80059ea:	2300      	movs	r3, #0
 80059ec:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 80059f0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80059f4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t DistMeasFixed1104_400_mm = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80059fa:	2300      	movs	r3, #0
 80059fc:	653b      	str	r3, [r7, #80]	; 0x50
  char ProductId[19];
  char *ProductId_tmp;
  uint8_t ReadDataFromDeviceDone;
  FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t NvmRefGoodSpadMap[VL53L0X_REF_SPAD_BUFFER_SIZE];
  int i;

  LOG_FUNCTION_START("");

  ReadDataFromDeviceDone =
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005a08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone);

  /* This access is done only once after that a GetDeviceInfo or
   * datainit is done*/
  if (ReadDataFromDeviceDone != 7) {
 8005a0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a10:	2b07      	cmp	r3, #7
 8005a12:	f000 83fc 	beq.w	800620e <VL53L0X_get_info_from_device+0x84e>

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005a16:	2201      	movs	r2, #1
 8005a18:	2180      	movs	r1, #128	; 0x80
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f002 f98b 	bl	8007d36 <VL53L0X_WrByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005a2e:	2201      	movs	r2, #1
 8005a30:	21ff      	movs	r1, #255	; 0xff
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f002 f97f 	bl	8007d36 <VL53L0X_WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f002 f973 	bl	8007d36 <VL53L0X_WrByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005a5e:	2206      	movs	r2, #6
 8005a60:	21ff      	movs	r1, #255	; 0xff
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f002 f967 	bl	8007d36 <VL53L0X_WrByte>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a70:	4313      	orrs	r3, r2
 8005a72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005a76:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	2183      	movs	r1, #131	; 0x83
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f002 f9df 	bl	8007e42 <VL53L0X_RdByte>
 8005a84:	4603      	mov	r3, r0
 8005a86:	461a      	mov	r2, r3
 8005a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte | 4);
 8005a92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005a96:	f043 0304 	orr.w	r3, r3, #4
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	2183      	movs	r1, #131	; 0x83
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f002 f948 	bl	8007d36 <VL53L0X_WrByte>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005ab4:	2207      	movs	r2, #7
 8005ab6:	21ff      	movs	r1, #255	; 0xff
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f002 f93c 	bl	8007d36 <VL53L0X_WrByte>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8005acc:	2201      	movs	r2, #1
 8005ace:	2181      	movs	r1, #129	; 0x81
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f002 f930 	bl	8007d36 <VL53L0X_WrByte>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	461a      	mov	r2, r3
 8005ada:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_PollingDelay(Dev);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f002 fa0f 	bl	8007f08 <VL53L0X_PollingDelay>
 8005aea:	4603      	mov	r3, r0
 8005aec:	461a      	mov	r2, r3
 8005aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005af8:	2201      	movs	r2, #1
 8005afa:	2180      	movs	r1, #128	; 0x80
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f002 f91a 	bl	8007d36 <VL53L0X_WrByte>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8098 	beq.w	8005c4c <VL53L0X_get_info_from_device+0x28c>
 8005b1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f040 8091 	bne.w	8005c4c <VL53L0X_get_info_from_device+0x28c>
      Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8005b2a:	226b      	movs	r2, #107	; 0x6b
 8005b2c:	2194      	movs	r1, #148	; 0x94
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 f901 	bl	8007d36 <VL53L0X_WrByte>
 8005b34:	4603      	mov	r3, r0
 8005b36:	461a      	mov	r2, r3
 8005b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff fefa 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2190      	movs	r1, #144	; 0x90
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f002 f9b1 	bl	8007ec6 <VL53L0X_RdDWord>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8005b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b74:	0a1b      	lsrs	r3, r3, #8
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      ReferenceSpadType = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	0bdb      	lsrs	r3, r3, #15
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8005b8e:	2224      	movs	r2, #36	; 0x24
 8005b90:	2194      	movs	r1, #148	; 0x94
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f002 f8cf 	bl	8007d36 <VL53L0X_WrByte>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff fec8 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005bac:	4603      	mov	r3, r0
 8005bae:	461a      	mov	r2, r3
 8005bb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005bba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2190      	movs	r1, #144	; 0x90
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f002 f97f 	bl	8007ec6 <VL53L0X_RdDWord>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24) & 0xff);
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	0e1b      	lsrs	r3, r3, #24
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	723b      	strb	r3, [r7, #8]
      NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16) & 0xff);
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	727b      	strb	r3, [r7, #9]
      NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8) & 0xff);
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	0a1b      	lsrs	r3, r3, #8
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	72bb      	strb	r3, [r7, #10]
      NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8005bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	72fb      	strb	r3, [r7, #11]

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005bf4:	2225      	movs	r2, #37	; 0x25
 8005bf6:	2194      	movs	r1, #148	; 0x94
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f002 f89c 	bl	8007d36 <VL53L0X_WrByte>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	461a      	mov	r2, r3
 8005c02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c06:	4313      	orrs	r3, r2
 8005c08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fe95 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005c12:	4603      	mov	r3, r0
 8005c14:	461a      	mov	r2, r3
 8005c16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005c20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c24:	461a      	mov	r2, r3
 8005c26:	2190      	movs	r1, #144	; 0x90
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f002 f94c 	bl	8007ec6 <VL53L0X_RdDWord>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461a      	mov	r2, r3
 8005c32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c36:	4313      	orrs	r3, r2
 8005c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24) & 0xff);
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	0e1b      	lsrs	r3, r3, #24
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	733b      	strb	r3, [r7, #12]
      NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16) & 0xff);
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	0c1b      	lsrs	r3, r3, #16
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	737b      	strb	r3, [r7, #13]
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 8005c4c:	78fb      	ldrb	r3, [r7, #3]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 817d 	beq.w	8005f52 <VL53L0X_get_info_from_device+0x592>
 8005c58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f040 8176 	bne.w	8005f52 <VL53L0X_get_info_from_device+0x592>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8005c66:	2202      	movs	r2, #2
 8005c68:	2194      	movs	r1, #148	; 0x94
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f002 f863 	bl	8007d36 <VL53L0X_WrByte>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fe5c 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005c84:	4603      	mov	r3, r0
 8005c86:	461a      	mov	r2, r3
 8005c88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8005c92:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005c96:	461a      	mov	r2, r3
 8005c98:	2190      	movs	r1, #144	; 0x90
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f002 f8d1 	bl	8007e42 <VL53L0X_RdByte>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005cae:	227b      	movs	r2, #123	; 0x7b
 8005cb0:	2194      	movs	r1, #148	; 0x94
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f002 f83f 	bl	8007d36 <VL53L0X_WrByte>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f7ff fe38 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8005cda:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2190      	movs	r1, #144	; 0x90
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f002 f8ad 	bl	8007e42 <VL53L0X_RdByte>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	461a      	mov	r2, r3
 8005cec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005cf6:	2277      	movs	r2, #119	; 0x77
 8005cf8:	2194      	movs	r1, #148	; 0x94
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f002 f81b 	bl	8007d36 <VL53L0X_WrByte>
 8005d00:	4603      	mov	r3, r0
 8005d02:	461a      	mov	r2, r3
 8005d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff fe14 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005d22:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005d26:	461a      	mov	r2, r3
 8005d28:	2190      	movs	r1, #144	; 0x90
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f002 f8cb 	bl	8007ec6 <VL53L0X_RdDWord>
 8005d30:	4603      	mov	r3, r0
 8005d32:	461a      	mov	r2, r3
 8005d34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8005d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d40:	0e5b      	lsrs	r3, r3, #25
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	743b      	strb	r3, [r7, #16]
      ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	0c9b      	lsrs	r3, r3, #18
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	747b      	strb	r3, [r7, #17]
      ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	0adb      	lsrs	r3, r3, #11
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	74bb      	strb	r3, [r7, #18]
      ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	091b      	lsrs	r3, r3, #4
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	74fb      	strb	r3, [r7, #19]

      byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005d82:	2278      	movs	r2, #120	; 0x78
 8005d84:	2194      	movs	r1, #148	; 0x94
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f001 ffd5 	bl	8007d36 <VL53L0X_WrByte>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff fdce 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005da0:	4603      	mov	r3, r0
 8005da2:	461a      	mov	r2, r3
 8005da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005dae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005db2:	461a      	mov	r2, r3
 8005db4:	2190      	movs	r1, #144	; 0x90
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f002 f885 	bl	8007ec6 <VL53L0X_RdDWord>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[4] = (char)(byte + ((TmpDWord >> 29) & 0x07f));
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	0f5b      	lsrs	r3, r3, #29
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005dd4:	4413      	add	r3, r2
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	753b      	strb	r3, [r7, #20]
      ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	0d9b      	lsrs	r3, r3, #22
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	757b      	strb	r3, [r7, #21]
      ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	0bdb      	lsrs	r3, r3, #15
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	75bb      	strb	r3, [r7, #22]
      ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	75fb      	strb	r3, [r7, #23]
      ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	763b      	strb	r3, [r7, #24]

      byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	019b      	lsls	r3, r3, #6
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8005e24:	2279      	movs	r2, #121	; 0x79
 8005e26:	2194      	movs	r1, #148	; 0x94
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 ff84 	bl	8007d36 <VL53L0X_WrByte>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	461a      	mov	r2, r3
 8005e32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f7ff fd7d 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005e42:	4603      	mov	r3, r0
 8005e44:	461a      	mov	r2, r3
 8005e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005e54:	461a      	mov	r2, r3
 8005e56:	2190      	movs	r1, #144	; 0x90
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f002 f834 	bl	8007ec6 <VL53L0X_RdDWord>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	461a      	mov	r2, r3
 8005e62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[9] = (char)(byte + ((TmpDWord >> 26) & 0x07f));
 8005e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e6e:	0e9b      	lsrs	r3, r3, #26
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005e76:	4413      	add	r3, r2
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	767b      	strb	r3, [r7, #25]
      ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7e:	0cdb      	lsrs	r3, r3, #19
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	76bb      	strb	r3, [r7, #26]
      ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e8c:	0b1b      	lsrs	r3, r3, #12
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	76fb      	strb	r3, [r7, #27]
      ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	773b      	strb	r3, [r7, #28]

      byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8005eb8:	227a      	movs	r2, #122	; 0x7a
 8005eba:	2194      	movs	r1, #148	; 0x94
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f001 ff3a 	bl	8007d36 <VL53L0X_WrByte>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_device_read_strobe(Dev);
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fd33 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005ee4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2190      	movs	r1, #144	; 0x90
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 ffea 	bl	8007ec6 <VL53L0X_RdDWord>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      ProductId[13] = (char)(byte + ((TmpDWord >> 30) & 0x07f));
 8005f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f02:	0f9b      	lsrs	r3, r3, #30
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f0a:	4413      	add	r3, r2
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	777b      	strb	r3, [r7, #29]
      ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8005f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f12:	0ddb      	lsrs	r3, r3, #23
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	77bb      	strb	r3, [r7, #30]
      ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8005f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	77fb      	strb	r3, [r7, #31]
      ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8005f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2e:	0a5b      	lsrs	r3, r3, #9
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	f887 3020 	strb.w	r3, [r7, #32]
      ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3e:	089b      	lsrs	r3, r3, #2
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      ProductId[18] = '\0';
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	f003 0304 	and.w	r3, r3, #4
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 80f1 	beq.w	8006140 <VL53L0X_get_info_from_device+0x780>
 8005f5e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 80ea 	bne.w	8006140 <VL53L0X_get_info_from_device+0x780>

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005f6c:	227b      	movs	r2, #123	; 0x7b
 8005f6e:	2194      	movs	r1, #148	; 0x94
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f001 fee0 	bl	8007d36 <VL53L0X_WrByte>
 8005f76:	4603      	mov	r3, r0
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f7ff fcd9 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005f98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	2190      	movs	r1, #144	; 0x90
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f001 ff90 	bl	8007ec6 <VL53L0X_RdDWord>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	461a      	mov	r2, r3
 8005faa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005fb4:	227c      	movs	r2, #124	; 0x7c
 8005fb6:	2194      	movs	r1, #148	; 0x94
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f001 febc 	bl	8007d36 <VL53L0X_WrByte>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fcb5 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005fe0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2190      	movs	r1, #144	; 0x90
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f001 ff6c 	bl	8007ec6 <VL53L0X_RdDWord>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005ffc:	2273      	movs	r2, #115	; 0x73
 8005ffe:	2194      	movs	r1, #148	; 0x94
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fe98 	bl	8007d36 <VL53L0X_WrByte>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800600e:	4313      	orrs	r3, r2
 8006010:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff fc91 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800601a:	4603      	mov	r3, r0
 800601c:	461a      	mov	r2, r3
 800601e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006022:	4313      	orrs	r3, r2
 8006024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006028:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800602c:	461a      	mov	r2, r3
 800602e:	2190      	movs	r1, #144	; 0x90
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 ff48 	bl	8007ec6 <VL53L0X_RdDWord>
 8006036:	4603      	mov	r3, r0
 8006038:	461a      	mov	r2, r3
 800603a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800603e:	4313      	orrs	r3, r2
 8006040:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 8006044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006046:	021b      	lsls	r3, r3, #8
 8006048:	b29b      	uxth	r3, r3
 800604a:	653b      	str	r3, [r7, #80]	; 0x50

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800604c:	2274      	movs	r2, #116	; 0x74
 800604e:	2194      	movs	r1, #148	; 0x94
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f001 fe70 	bl	8007d36 <VL53L0X_WrByte>
 8006056:	4603      	mov	r3, r0
 8006058:	461a      	mov	r2, r3
 800605a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800605e:	4313      	orrs	r3, r2
 8006060:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fc69 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800606a:	4603      	mov	r3, r0
 800606c:	461a      	mov	r2, r3
 800606e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006072:	4313      	orrs	r3, r2
 8006074:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800607c:	461a      	mov	r2, r3
 800607e:	2190      	movs	r1, #144	; 0x90
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f001 ff20 	bl	8007ec6 <VL53L0X_RdDWord>
 8006086:	4603      	mov	r3, r0
 8006088:	461a      	mov	r2, r3
 800608a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800608e:	4313      	orrs	r3, r2
 8006090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      SignalRateMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	0e1b      	lsrs	r3, r3, #24
 8006098:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800609a:	4313      	orrs	r3, r2
 800609c:	653b      	str	r3, [r7, #80]	; 0x50

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800609e:	2275      	movs	r2, #117	; 0x75
 80060a0:	2194      	movs	r1, #148	; 0x94
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f001 fe47 	bl	8007d36 <VL53L0X_WrByte>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060b0:	4313      	orrs	r3, r2
 80060b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7ff fc40 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 80060bc:	4603      	mov	r3, r0
 80060be:	461a      	mov	r2, r3
 80060c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80060ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80060ce:	461a      	mov	r2, r3
 80060d0:	2190      	movs	r1, #144	; 0x90
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fef7 	bl	8007ec6 <VL53L0X_RdDWord>
 80060d8:	4603      	mov	r3, r0
 80060da:	461a      	mov	r2, r3
 80060dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff) << 8;
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	021b      	lsls	r3, r3, #8
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	657b      	str	r3, [r7, #84]	; 0x54

      Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80060ee:	2276      	movs	r2, #118	; 0x76
 80060f0:	2194      	movs	r1, #148	; 0x94
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f001 fe1f 	bl	8007d36 <VL53L0X_WrByte>
 80060f8:	4603      	mov	r3, r0
 80060fa:	461a      	mov	r2, r3
 80060fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006100:	4313      	orrs	r3, r2
 8006102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_device_read_strobe(Dev);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff fc18 	bl	800593c <_Z26VL53L0X_device_read_strobeP13VL53L0X_Dev_t>
 800610c:	4603      	mov	r3, r0
 800610e:	461a      	mov	r2, r3
 8006110:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006114:	4313      	orrs	r3, r2
 8006116:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800611a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800611e:	461a      	mov	r2, r3
 8006120:	2190      	movs	r1, #144	; 0x90
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fecf 	bl	8007ec6 <VL53L0X_RdDWord>
 8006128:	4603      	mov	r3, r0
 800612a:	461a      	mov	r2, r3
 800612c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006130:	4313      	orrs	r3, r2
 8006132:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000) >> 24);
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	0e1b      	lsrs	r3, r3, #24
 800613a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800613c:	4313      	orrs	r3, r2
 800613e:	657b      	str	r3, [r7, #84]	; 0x54
    }

    Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006140:	2200      	movs	r2, #0
 8006142:	2181      	movs	r1, #129	; 0x81
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fdf6 	bl	8007d36 <VL53L0X_WrByte>
 800614a:	4603      	mov	r3, r0
 800614c:	461a      	mov	r2, r3
 800614e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006152:	4313      	orrs	r3, r2
 8006154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006158:	2206      	movs	r2, #6
 800615a:	21ff      	movs	r1, #255	; 0xff
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fdea 	bl	8007d36 <VL53L0X_WrByte>
 8006162:	4603      	mov	r3, r0
 8006164:	461a      	mov	r2, r3
 8006166:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800616a:	4313      	orrs	r3, r2
 800616c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006170:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006174:	461a      	mov	r2, r3
 8006176:	2183      	movs	r1, #131	; 0x83
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f001 fe62 	bl	8007e42 <VL53L0X_RdByte>
 800617e:	4603      	mov	r3, r0
 8006180:	461a      	mov	r2, r3
 8006182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006186:	4313      	orrs	r3, r2
 8006188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x83, byte & 0xfb);
 800618c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006190:	f023 0304 	bic.w	r3, r3, #4
 8006194:	b2db      	uxtb	r3, r3
 8006196:	461a      	mov	r2, r3
 8006198:	2183      	movs	r1, #131	; 0x83
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fdcb 	bl	8007d36 <VL53L0X_WrByte>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061a8:	4313      	orrs	r3, r2
 80061aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80061ae:	2201      	movs	r2, #1
 80061b0:	21ff      	movs	r1, #255	; 0xff
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f001 fdbf 	bl	8007d36 <VL53L0X_WrByte>
 80061b8:	4603      	mov	r3, r0
 80061ba:	461a      	mov	r2, r3
 80061bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061c0:	4313      	orrs	r3, r2
 80061c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80061c6:	2201      	movs	r2, #1
 80061c8:	2100      	movs	r1, #0
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fdb3 	bl	8007d36 <VL53L0X_WrByte>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061d8:	4313      	orrs	r3, r2
 80061da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80061de:	2200      	movs	r2, #0
 80061e0:	21ff      	movs	r1, #255	; 0xff
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f001 fda7 	bl	8007d36 <VL53L0X_WrByte>
 80061e8:	4603      	mov	r3, r0
 80061ea:	461a      	mov	r2, r3
 80061ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80061f0:	4313      	orrs	r3, r2
 80061f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80061f6:	2200      	movs	r2, #0
 80061f8:	2180      	movs	r1, #128	; 0x80
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 fd9b 	bl	8007d36 <VL53L0X_WrByte>
 8006200:	4603      	mov	r3, r0
 8006202:	461a      	mov	r2, r3
 8006204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006208:	4313      	orrs	r3, r2
 800620a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  }

  if ((Status == VL53L0X_ERROR_NONE) && (ReadDataFromDeviceDone != 7)) {
 800620e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006212:	2b00      	cmp	r3, #0
 8006214:	f040 808f 	bne.w	8006336 <VL53L0X_get_info_from_device+0x976>
 8006218:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800621c:	2b07      	cmp	r3, #7
 800621e:	f000 808a 	beq.w	8006336 <VL53L0X_get_info_from_device+0x976>
    /* Assign to variable if status is ok */
    if (((option & 1) == 1) && ((ReadDataFromDeviceDone & 1) == 0)) {
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d024      	beq.n	8006276 <VL53L0X_get_info_from_device+0x8b6>
 800622c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11e      	bne.n	8006276 <VL53L0X_get_info_from_device+0x8b6>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadCount,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800623e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
                                         ReferenceSpadCount);

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReferenceSpadType,
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006248:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                                         ReferenceSpadType);

      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800624c:	2300      	movs	r3, #0
 800624e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006252:	2b05      	cmp	r3, #5
 8006254:	dc0f      	bgt.n	8006276 <VL53L0X_get_info_from_device+0x8b6>
        Dev->Data.SpadData.RefGoodSpadMap[i] = NvmRefGoodSpadMap[i];
 8006256:	f107 0208 	add.w	r2, r7, #8
 800625a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800625c:	4413      	add	r3, r2
 800625e:	7819      	ldrb	r1, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006264:	4413      	add	r3, r2
 8006266:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800626a:	460a      	mov	r2, r1
 800626c:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	3301      	adds	r3, #1
 8006272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006274:	e7ec      	b.n	8006250 <VL53L0X_get_info_from_device+0x890>
      }
    }

    if (((option & 2) == 2) && ((ReadDataFromDeviceDone & 2) == 0)) {
 8006276:	78fb      	ldrb	r3, [r7, #3]
 8006278:	f003 0302 	and.w	r3, r3, #2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d018      	beq.n	80062b2 <VL53L0X_get_info_from_device+0x8f2>
 8006280:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d112      	bne.n	80062b2 <VL53L0X_get_info_from_device+0x8f2>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ModuleId, ModuleId);
 800628c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, Revision, Revision);
 8006296:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2

      ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ProductId);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	33f3      	adds	r3, #243	; 0xf3
 80062a4:	63bb      	str	r3, [r7, #56]	; 0x38
      VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 80062a6:	f107 0310 	add.w	r3, r7, #16
 80062aa:	4619      	mov	r1, r3
 80062ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80062ae:	f001 fea9 	bl	8008004 <strcpy>
    }

    if (((option & 4) == 4) && ((ReadDataFromDeviceDone & 4) == 0)) {
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d030      	beq.n	800631e <VL53L0X_get_info_from_device+0x95e>
 80062bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80062c0:	f003 0304 	and.w	r3, r3, #4
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d12a      	bne.n	800631e <VL53L0X_get_info_from_device+0x95e>
      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDUpper, PartUIDUpper);
 80062c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PartUIDLower, PartUIDLower);
 80062d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

      SignalRateMeasFixed400mmFix =
 80062d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062da:	025b      	lsls	r3, r3, #9
 80062dc:	643b      	str	r3, [r7, #64]	; 0x40
          VL53L0X_FIXPOINT97TOFIXPOINT1616(SignalRateMeasFixed1104_400_mm);

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, SignalRateMeasFixed400mm,
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062e2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
                                         SignalRateMeasFixed400mmFix);

      OffsetMicroMeters = 0;
 80062e6:	2300      	movs	r3, #0
 80062e8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      if (DistMeasFixed1104_400_mm != 0) {
 80062ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d011      	beq.n	8006316 <VL53L0X_get_info_from_device+0x956>
        OffsetFixed1104_mm = DistMeasFixed1104_400_mm - DistMeasTgtFixed1104_mm;
 80062f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80062f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	64bb      	str	r3, [r7, #72]	; 0x48
        OffsetMicroMeters = (OffsetFixed1104_mm * 1000) >> 4;
 80062fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006300:	fb02 f303 	mul.w	r3, r2, r3
 8006304:	091b      	lsrs	r3, r3, #4
 8006306:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
        OffsetMicroMeters *= -1;
 800630a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800630e:	425b      	negs	r3, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      }

      PALDevDataSet(Dev, Part2PartOffsetAdjustmentNVMMicroMeter,
 8006316:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]
                    OffsetMicroMeters);
    }
    byte = (uint8_t)(ReadDataFromDeviceDone | option);
 800631e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006322:	78fb      	ldrb	r3, [r7, #3]
 8006324:	4313      	orrs	r3, r2
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, byte);
 800632c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8006336:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800633a:	4618      	mov	r0, r3
 800633c:	3760      	adds	r7, #96	; 0x60
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>:

uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev,
                                      uint8_t vcsel_period_pclks) {
 8006342:	b480      	push	{r7}
 8006344:	b087      	sub	sp, #28
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  LOG_FUNCTION_START("");

  /* The above calculation will produce rounding errors,
     therefore set fixed value
  */
  PLL_period_ps = 1655;
 800634e:	f240 6277 	movw	r2, #1655	; 0x677
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	e9c7 2304 	strd	r2, r3, [r7, #16]

  macro_period_vclks = 2304;
 800635a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800635e:	60fb      	str	r3, [r7, #12]
  macro_period_ps =
      (uint32_t)(macro_period_vclks * vcsel_period_pclks * PLL_period_ps);
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	fb02 f303 	mul.w	r3, r2, r3
  macro_period_ps =
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	fb02 f303 	mul.w	r3, r2, r3
 800636e:	60bb      	str	r3, [r7, #8]

  LOG_FUNCTION_END("");
  return macro_period_ps;
 8006370:	68bb      	ldr	r3, [r7, #8]
}
 8006372:	4618      	mov	r0, r3
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks) {
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  /*!
   * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
   */

  uint16_t encoded_timeout = 0;
 8006386:	2300      	movs	r3, #0
 8006388:	82fb      	strh	r3, [r7, #22]
  uint32_t ls_byte = 0;
 800638a:	2300      	movs	r3, #0
 800638c:	613b      	str	r3, [r7, #16]
  uint16_t ms_byte = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	81fb      	strh	r3, [r7, #14]

  if (timeout_macro_clks > 0) {
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d017      	beq.n	80063c8 <VL53L0X_encode_timeout+0x4a>
    ls_byte = timeout_macro_clks - 1;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3b01      	subs	r3, #1
 800639c:	613b      	str	r3, [r7, #16]

    while ((ls_byte & 0xFFFFFF00) > 0) {
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d006      	beq.n	80063b6 <VL53L0X_encode_timeout+0x38>
      ls_byte = ls_byte >> 1;
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	613b      	str	r3, [r7, #16]
      ms_byte++;
 80063ae:	89fb      	ldrh	r3, [r7, #14]
 80063b0:	3301      	adds	r3, #1
 80063b2:	81fb      	strh	r3, [r7, #14]
    while ((ls_byte & 0xFFFFFF00) > 0) {
 80063b4:	e7f3      	b.n	800639e <VL53L0X_encode_timeout+0x20>
    }

    encoded_timeout = (ms_byte << 8) + (uint16_t)(ls_byte & 0x000000FF);
 80063b6:	89fb      	ldrh	r3, [r7, #14]
 80063b8:	021b      	lsls	r3, r3, #8
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	82fb      	strh	r3, [r7, #22]
  }

  return encoded_timeout;
 80063c8:	8afb      	ldrh	r3, [r7, #22]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout) {
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	4603      	mov	r3, r0
 80063de:	80fb      	strh	r3, [r7, #6]
  /*!
   * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
   */

  uint32_t timeout_macro_clks = 0;
 80063e0:	2300      	movs	r3, #0
 80063e2:	60fb      	str	r3, [r7, #12]

  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 80063e4:	88fb      	ldrh	r3, [r7, #6]
 80063e6:	b2db      	uxtb	r3, r3
                        << (uint32_t)((encoded_timeout & 0xFF00) >> 8)) +
 80063e8:	88fa      	ldrh	r2, [r7, #6]
 80063ea:	0a12      	lsrs	r2, r2, #8
 80063ec:	b292      	uxth	r2, r2
 80063ee:	4093      	lsls	r3, r2
  timeout_macro_clks = ((uint32_t)(encoded_timeout & 0x00FF)
 80063f0:	3301      	adds	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
                       1;

  return timeout_macro_clks;
 80063f4:	68fb      	ldr	r3, [r7, #12]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
	...

08006404 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev, uint32_t timeout_period_us,
                                    uint8_t vcsel_period_pclks) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	4613      	mov	r3, r2
 8006410:	71fb      	strb	r3, [r7, #7]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t timeout_period_mclks = 0;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006416:	79fb      	ldrb	r3, [r7, #7]
 8006418:	4619      	mov	r1, r3
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff ff91 	bl	8006342 <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>
 8006420:	61b8      	str	r0, [r7, #24]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006428:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <VL53L0X_calc_timeout_mclks+0x50>)
 800642a:	fba2 2303 	umull	r2, r3, r2, r3
 800642e:	099b      	lsrs	r3, r3, #6
 8006430:	617b      	str	r3, [r7, #20]

  timeout_period_mclks = (uint32_t)(
      ((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006438:	fb03 f202 	mul.w	r2, r3, r2
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	441a      	add	r2, r3
  timeout_period_mclks = (uint32_t)(
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	fbb2 f3f3 	udiv	r3, r2, r3
 8006448:	61fb      	str	r3, [r7, #28]

  return timeout_period_mclks;
 800644a:	69fb      	ldr	r3, [r7, #28]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	10624dd3 	.word	0x10624dd3

08006458 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev, uint16_t timeout_period_mclks,
                                 uint8_t vcsel_period_pclks) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	807b      	strh	r3, [r7, #2]
 8006464:	4613      	mov	r3, r2
 8006466:	707b      	strb	r3, [r7, #1]
  uint32_t macro_period_ps;
  uint32_t macro_period_ns;
  uint32_t actual_timeout_period_us = 0;
 8006468:	2300      	movs	r3, #0
 800646a:	617b      	str	r3, [r7, #20]

  macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800646c:	787b      	ldrb	r3, [r7, #1]
 800646e:	4619      	mov	r1, r3
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f7ff ff66 	bl	8006342 <_Z28VL53L0X_calc_macro_period_psP13VL53L0X_Dev_th>
 8006476:	6138      	str	r0, [r7, #16]
  macro_period_ns = (macro_period_ps + 500) / 1000;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800647e:	4a0b      	ldr	r2, [pc, #44]	; (80064ac <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth+0x54>)
 8006480:	fba2 2303 	umull	r2, r3, r2, r3
 8006484:	099b      	lsrs	r3, r3, #6
 8006486:	60fb      	str	r3, [r7, #12]

  actual_timeout_period_us =
      ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 8006488:	887b      	ldrh	r3, [r7, #2]
 800648a:	68fa      	ldr	r2, [r7, #12]
 800648c:	fb03 f202 	mul.w	r2, r3, r2
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	085b      	lsrs	r3, r3, #1
 8006494:	4413      	add	r3, r2
  actual_timeout_period_us =
 8006496:	4a05      	ldr	r2, [pc, #20]	; (80064ac <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth+0x54>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	099b      	lsrs	r3, r3, #6
 800649e:	617b      	str	r3, [r7, #20]

  return actual_timeout_period_us;
 80064a0:	697b      	ldr	r3, [r7, #20]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	10624dd3 	.word	0x10624dd3

080064b0 <get_sequence_step_timeout>:

VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t *pTimeOutMicroSecs) {
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08c      	sub	sp, #48	; 0x30
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	460b      	mov	r3, r1
 80064ba:	607a      	str	r2, [r7, #4]
 80064bc:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80064be:	2300      	movs	r3, #0
 80064c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  uint8_t CurrentVCSELPulsePeriodPClk;
  uint8_t EncodedTimeOutByte = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	f887 3020 	strb.w	r3, [r7, #32]
  uint32_t TimeoutMicroSeconds = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t PreRangeEncodedTimeOut = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	83fb      	strh	r3, [r7, #30]
  uint16_t MsrcTimeOutMClks;
  uint16_t PreRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks = 0;
 80064d2:	2300      	movs	r3, #0
 80064d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 80064d6:	7afb      	ldrb	r3, [r7, #11]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <get_sequence_step_timeout+0x38>
 80064dc:	7afb      	ldrb	r3, [r7, #11]
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d002      	beq.n	80064e8 <get_sequence_step_timeout+0x38>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 80064e2:	7afb      	ldrb	r3, [r7, #11]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d128      	bne.n	800653a <get_sequence_step_timeout+0x8a>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 80064e8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80064ec:	461a      	mov	r2, r3
 80064ee:	2100      	movs	r1, #0
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f7fd fadf 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 80064f6:	4603      	mov	r3, r0
 80064f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);
    if (Status == VL53L0X_ERROR_NONE) {
 80064fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006500:	2b00      	cmp	r3, #0
 8006502:	d109      	bne.n	8006518 <get_sequence_step_timeout+0x68>
      Status = VL53L0X_RdByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 8006504:	f107 0320 	add.w	r3, r7, #32
 8006508:	461a      	mov	r2, r3
 800650a:	2146      	movs	r1, #70	; 0x46
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f001 fc98 	bl	8007e42 <VL53L0X_RdByte>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                              &EncodedTimeOutByte);
    }
    MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006518:	f897 3020 	ldrb.w	r3, [r7, #32]
 800651c:	b29b      	uxth	r3, r3
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ff59 	bl	80063d6 <VL53L0X_decode_timeout>
 8006524:	4603      	mov	r3, r0
 8006526:	847b      	strh	r3, [r7, #34]	; 0x22

    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, MsrcTimeOutMClks,
 8006528:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800652c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800652e:	4619      	mov	r1, r3
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff ff91 	bl	8006458 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 8006536:	62b8      	str	r0, [r7, #40]	; 0x28
 8006538:	e092      	b.n	8006660 <get_sequence_step_timeout+0x1b0>
                                                  CurrentVCSELPulsePeriodPClk);
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800653a:	7afb      	ldrb	r3, [r7, #11]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d135      	bne.n	80065ac <get_sequence_step_timeout+0xfc>
    /* Retrieve PRE-RANGE VCSEL Period */
    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 8006540:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006544:	461a      	mov	r2, r3
 8006546:	2100      	movs	r1, #0
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7fd fab3 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 800654e:	4603      	mov	r3, r0
 8006550:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                         &CurrentVCSELPulsePeriodPClk);

    /* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 8006554:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006558:	2b00      	cmp	r3, #0
 800655a:	f040 8081 	bne.w	8006660 <get_sequence_step_timeout+0x1b0>

      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 800655e:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006562:	461a      	mov	r2, r3
 8006564:	2100      	movs	r1, #0
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7fd faa4 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      if (Status == VL53L0X_ERROR_NONE) {
 8006572:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006576:	2b00      	cmp	r3, #0
 8006578:	d109      	bne.n	800658e <get_sequence_step_timeout+0xde>
        Status =
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 800657a:	f107 031e 	add.w	r3, r7, #30
 800657e:	461a      	mov	r2, r3
 8006580:	2151      	movs	r1, #81	; 0x51
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 fc7e 	bl	8007e84 <VL53L0X_RdWord>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                           &PreRangeEncodedTimeOut);
      }

      PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 800658e:	8bfb      	ldrh	r3, [r7, #30]
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff ff20 	bl	80063d6 <VL53L0X_decode_timeout>
 8006596:	4603      	mov	r3, r0
 8006598:	84fb      	strh	r3, [r7, #38]	; 0x26

      TimeoutMicroSeconds = VL53L0X_calc_timeout_us(
 800659a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800659e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065a0:	4619      	mov	r1, r3
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff ff58 	bl	8006458 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 80065a8:	62b8      	str	r0, [r7, #40]	; 0x28
 80065aa:	e059      	b.n	8006660 <get_sequence_step_timeout+0x1b0>
          Dev, PreRangeTimeOutMClks, CurrentVCSELPulsePeriodPClk);
    }
  } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80065ac:	7afb      	ldrb	r3, [r7, #11]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d156      	bne.n	8006660 <get_sequence_step_timeout+0x1b0>

    VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80065b2:	f107 0314 	add.w	r3, r7, #20
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7fd fb85 	bl	8003cc8 <VL53L0X_GetSequenceStepEnables>
    PreRangeTimeOutMClks = 0;
 80065be:	2300      	movs	r3, #0
 80065c0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (SchedulerSequenceSteps.PreRangeOn) {
 80065c2:	7dfb      	ldrb	r3, [r7, #23]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d01d      	beq.n	8006604 <get_sequence_step_timeout+0x154>
      /* Retrieve PRE-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 80065c8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80065cc:	461a      	mov	r2, r3
 80065ce:	2100      	movs	r1, #0
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f7fd fa6f 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                           &CurrentVCSELPulsePeriodPClk);

      /* Retrieve PRE-RANGE Timeout in Macro periods
       * (MCLKS) */
      if (Status == VL53L0X_ERROR_NONE) {
 80065dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10f      	bne.n	8006604 <get_sequence_step_timeout+0x154>
        Status =
            VL53L0X_RdWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80065e4:	f107 031e 	add.w	r3, r7, #30
 80065e8:	461a      	mov	r2, r3
 80065ea:	2151      	movs	r1, #81	; 0x51
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f001 fc49 	bl	8007e84 <VL53L0X_RdWord>
 80065f2:	4603      	mov	r3, r0
 80065f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                           &PreRangeEncodedTimeOut);
        PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 80065f8:	8bfb      	ldrh	r3, [r7, #30]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff feeb 	bl	80063d6 <VL53L0X_decode_timeout>
 8006600:	4603      	mov	r3, r0
 8006602:	84fb      	strh	r3, [r7, #38]	; 0x26
      }
    }

    if (Status == VL53L0X_ERROR_NONE) {
 8006604:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006608:	2b00      	cmp	r3, #0
 800660a:	d109      	bne.n	8006620 <get_sequence_step_timeout+0x170>
      /* Retrieve FINAL-RANGE VCSEL Period */
      Status = VL53L0X_GetVcselPulsePeriod(
 800660c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006610:	461a      	mov	r2, r3
 8006612:	2101      	movs	r1, #1
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7fd fa4d 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 800661a:	4603      	mov	r3, r0
 800661c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, &CurrentVCSELPulsePeriodPClk);
    }

    /* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
    if (Status == VL53L0X_ERROR_NONE) {
 8006620:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10f      	bne.n	8006648 <get_sequence_step_timeout+0x198>
      Status =
          VL53L0X_RdWord(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8006628:	f107 031c 	add.w	r3, r7, #28
 800662c:	461a      	mov	r2, r3
 800662e:	2171      	movs	r1, #113	; 0x71
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f001 fc27 	bl	8007e84 <VL53L0X_RdWord>
 8006636:	4603      	mov	r3, r0
 8006638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                         &FinalRangeEncodedTimeOut);
      FinalRangeTimeOutMClks = VL53L0X_decode_timeout(FinalRangeEncodedTimeOut);
 800663c:	8bbb      	ldrh	r3, [r7, #28]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fec9 	bl	80063d6 <VL53L0X_decode_timeout>
 8006644:	4603      	mov	r3, r0
 8006646:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006648:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800664a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	84bb      	strh	r3, [r7, #36]	; 0x24
    TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev, FinalRangeTimeOutMClks,
 8006650:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006656:	4619      	mov	r1, r3
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fefd 	bl	8006458 <_Z23VL53L0X_calc_timeout_usP13VL53L0X_Dev_tth>
 800665e:	62b8      	str	r0, [r7, #40]	; 0x28
                                                  CurrentVCSELPulsePeriodPClk);
  }

  *pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006664:	601a      	str	r2, [r3, #0]

  return Status;
 8006666:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800666a:	4618      	mov	r0, r3
 800666c:	3730      	adds	r7, #48	; 0x30
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <set_sequence_step_timeout>:

VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
                                        VL53L0X_SequenceStepId SequenceStepId,
                                        uint32_t TimeOutMicroSecs) {
 8006672:	b580      	push	{r7, lr}
 8006674:	b08a      	sub	sp, #40	; 0x28
 8006676:	af00      	add	r7, sp, #0
 8006678:	60f8      	str	r0, [r7, #12]
 800667a:	460b      	mov	r3, r1
 800667c:	607a      	str	r2, [r7, #4]
 800667e:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006680:	2300      	movs	r3, #0
 8006682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint16_t MsrcRangeTimeOutMClks;
  uint16_t FinalRangeTimeOutMClks;
  uint16_t FinalRangeEncodedTimeOut;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

  if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC) ||
 8006686:	7afb      	ldrb	r3, [r7, #11]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <set_sequence_step_timeout+0x26>
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d002      	beq.n	8006698 <set_sequence_step_timeout+0x26>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_DSS) ||
 8006692:	7afb      	ldrb	r3, [r7, #11]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d138      	bne.n	800670a <set_sequence_step_timeout+0x98>
      (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

    Status = VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE,
 8006698:	f107 031d 	add.w	r3, r7, #29
 800669c:	461a      	mov	r2, r3
 800669e:	2100      	movs	r1, #0
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7fd fa07 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 80066a6:	4603      	mov	r3, r0
 80066a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                         &CurrentVCSELPulsePeriodPClk);

    if (Status == VL53L0X_ERROR_NONE) {
 80066ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d11a      	bne.n	80066ea <set_sequence_step_timeout+0x78>
      MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 80066b4:	7f7b      	ldrb	r3, [r7, #29]
 80066b6:	461a      	mov	r2, r3
 80066b8:	6879      	ldr	r1, [r7, #4]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	f7ff fea2 	bl	8006404 <VL53L0X_calc_timeout_mclks>
 80066c0:	4603      	mov	r3, r0
 80066c2:	83fb      	strh	r3, [r7, #30]
          Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

      if (MsrcRangeTimeOutMClks > 256)
 80066c4:	8bfb      	ldrh	r3, [r7, #30]
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d903      	bls.n	80066d4 <set_sequence_step_timeout+0x62>
        MsrcEncodedTimeOut = 255;
 80066cc:	23ff      	movs	r3, #255	; 0xff
 80066ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80066d2:	e004      	b.n	80066de <set_sequence_step_timeout+0x6c>
      else
        MsrcEncodedTimeOut = (uint8_t)MsrcRangeTimeOutMClks - 1;
 80066d4:	8bfb      	ldrh	r3, [r7, #30]
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	3b01      	subs	r3, #1
 80066da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

      VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 80066de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                         MsrcEncodedTimeOut);
    }

    if (Status == VL53L0X_ERROR_NONE) {
 80066ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 80ad 	bne.w	800684e <set_sequence_step_timeout+0x1dc>
      Status = VL53L0X_WrByte(Dev, VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
 80066f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80066f8:	461a      	mov	r2, r3
 80066fa:	2146      	movs	r1, #70	; 0x46
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f001 fb1a 	bl	8007d36 <VL53L0X_WrByte>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (Status == VL53L0X_ERROR_NONE) {
 8006708:	e0a1      	b.n	800684e <set_sequence_step_timeout+0x1dc>
                              MsrcEncodedTimeOut);
    }
  } else {

    if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800670a:	7afb      	ldrb	r3, [r7, #11]
 800670c:	2b03      	cmp	r3, #3
 800670e:	d135      	bne.n	800677c <set_sequence_step_timeout+0x10a>

      if (Status == VL53L0X_ERROR_NONE) {
 8006710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006714:	2b00      	cmp	r3, #0
 8006716:	d11b      	bne.n	8006750 <set_sequence_step_timeout+0xde>
        Status = VL53L0X_GetVcselPulsePeriod(
 8006718:	f107 031d 	add.w	r3, r7, #29
 800671c:	461a      	mov	r2, r3
 800671e:	2100      	movs	r1, #0
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	f7fd f9c7 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 8006726:	4603      	mov	r3, r0
 8006728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);
        PreRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 800672c:	7f7b      	ldrb	r3, [r7, #29]
 800672e:	461a      	mov	r2, r3
 8006730:	6879      	ldr	r1, [r7, #4]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fe66 	bl	8006404 <VL53L0X_calc_timeout_mclks>
 8006738:	4603      	mov	r3, r0
 800673a:	84bb      	strh	r3, [r7, #36]	; 0x24
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);
        PreRangeEncodedTimeOut = VL53L0X_encode_timeout(PreRangeTimeOutMClks);
 800673c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800673e:	4618      	mov	r0, r3
 8006740:	f7ff fe1d 	bl	800637e <VL53L0X_encode_timeout>
 8006744:	4603      	mov	r3, r0
 8006746:	837b      	strh	r3, [r7, #26]

        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, LastEncodedTimeout,
 8006748:	8b7a      	ldrh	r2, [r7, #26]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
                                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 8006750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006754:	2b00      	cmp	r3, #0
 8006756:	d108      	bne.n	800676a <set_sequence_step_timeout+0xf8>
        Status =
            VL53L0X_WrWord(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8006758:	8b7b      	ldrh	r3, [r7, #26]
 800675a:	461a      	mov	r2, r3
 800675c:	2151      	movs	r1, #81	; 0x51
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f001 fb0b 	bl	8007d7a <VL53L0X_WrWord>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                           PreRangeEncodedTimeOut);
      }

      if (Status == VL53L0X_ERROR_NONE) {
 800676a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800676e:	2b00      	cmp	r3, #0
 8006770:	d16d      	bne.n	800684e <set_sequence_step_timeout+0x1dc>
        VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs,
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800677a:	e068      	b.n	800684e <set_sequence_step_timeout+0x1dc>
                                           TimeOutMicroSecs);
      }
    } else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800677c:	7afb      	ldrb	r3, [r7, #11]
 800677e:	2b04      	cmp	r3, #4
 8006780:	d162      	bne.n	8006848 <set_sequence_step_timeout+0x1d6>
       * must be added. To do this both final and pre-range
       * timeouts must be expressed in macro periods MClks
       * because they have different vcsel periods.
       */

      VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006782:	f107 0314 	add.w	r3, r7, #20
 8006786:	4619      	mov	r1, r3
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7fd fa9d 	bl	8003cc8 <VL53L0X_GetSequenceStepEnables>
      PreRangeTimeOutMClks = 0;
 800678e:	2300      	movs	r3, #0
 8006790:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (SchedulerSequenceSteps.PreRangeOn) {
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01d      	beq.n	80067d4 <set_sequence_step_timeout+0x162>

        /* Retrieve PRE-RANGE VCSEL Period */
        Status = VL53L0X_GetVcselPulsePeriod(
 8006798:	f107 031d 	add.w	r3, r7, #29
 800679c:	461a      	mov	r2, r3
 800679e:	2100      	movs	r1, #0
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7fd f987 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, &CurrentVCSELPulsePeriodPClk);

        /* Retrieve PRE-RANGE Timeout in Macro periods
         * (MCLKS) */
        if (Status == VL53L0X_ERROR_NONE) {
 80067ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10f      	bne.n	80067d4 <set_sequence_step_timeout+0x162>
          Status = VL53L0X_RdWord(Dev, 0x51, &PreRangeEncodedTimeOut);
 80067b4:	f107 031a 	add.w	r3, r7, #26
 80067b8:	461a      	mov	r2, r3
 80067ba:	2151      	movs	r1, #81	; 0x51
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f001 fb61 	bl	8007e84 <VL53L0X_RdWord>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          PreRangeTimeOutMClks = VL53L0X_decode_timeout(PreRangeEncodedTimeOut);
 80067c8:	8b7b      	ldrh	r3, [r7, #26]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fe03 	bl	80063d6 <VL53L0X_decode_timeout>
 80067d0:	4603      	mov	r3, r0
 80067d2:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      /* Calculate FINAL RANGE Timeout in Macro Periods
       * (MCLKS) and add PRE-RANGE value
       */
      if (Status == VL53L0X_ERROR_NONE) {
 80067d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d109      	bne.n	80067f0 <set_sequence_step_timeout+0x17e>

        Status =
            VL53L0X_GetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
 80067dc:	f107 031d 	add.w	r3, r7, #29
 80067e0:	461a      	mov	r2, r3
 80067e2:	2101      	movs	r1, #1
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7fd f965 	bl	8003ab4 <VL53L0X_GetVcselPulsePeriod>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                        &CurrentVCSELPulsePeriodPClk);
      }
      if (Status == VL53L0X_ERROR_NONE) {
 80067f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d12a      	bne.n	800684e <set_sequence_step_timeout+0x1dc>

        FinalRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(
 80067f8:	7f7b      	ldrb	r3, [r7, #29]
 80067fa:	461a      	mov	r2, r3
 80067fc:	6879      	ldr	r1, [r7, #4]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	f7ff fe00 	bl	8006404 <VL53L0X_calc_timeout_mclks>
 8006804:	4603      	mov	r3, r0
 8006806:	847b      	strh	r3, [r7, #34]	; 0x22
            Dev, TimeOutMicroSecs, (uint8_t)CurrentVCSELPulsePeriodPClk);

        FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8006808:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800680a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800680c:	4413      	add	r3, r2
 800680e:	847b      	strh	r3, [r7, #34]	; 0x22

        FinalRangeEncodedTimeOut =
            VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8006810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff fdb3 	bl	800637e <VL53L0X_encode_timeout>
 8006818:	4603      	mov	r3, r0
 800681a:	843b      	strh	r3, [r7, #32]

        if (Status == VL53L0X_ERROR_NONE) {
 800681c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006820:	2b00      	cmp	r3, #0
 8006822:	d108      	bne.n	8006836 <set_sequence_step_timeout+0x1c4>
          Status = VL53L0X_WrWord(Dev, 0x71, FinalRangeEncodedTimeOut);
 8006824:	8c3b      	ldrh	r3, [r7, #32]
 8006826:	461a      	mov	r2, r3
 8006828:	2171      	movs	r1, #113	; 0x71
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f001 faa5 	bl	8007d7a <VL53L0X_WrWord>
 8006830:	4603      	mov	r3, r0
 8006832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (Status == VL53L0X_ERROR_NONE) {
 8006836:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800683a:	2b00      	cmp	r3, #0
 800683c:	d107      	bne.n	800684e <set_sequence_step_timeout+0x1dc>
          VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs,
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8006846:	e002      	b.n	800684e <set_sequence_step_timeout+0x1dc>
                                             TimeOutMicroSecs);
        }
      }
    } else
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006848:	23fc      	movs	r3, #252	; 0xfc
 800684a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return Status;
 800684e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006852:	4618      	mov	r0, r3
 8006854:	3728      	adds	r7, #40	; 0x28
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <VL53L0X_get_vcsel_pulse_period>:
}

VL53L0X_Error
VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
                               VL53L0X_VcselPeriod VcselPeriodType,
                               uint8_t *pVCSELPulsePeriodPCLK) {
 800685a:	b580      	push	{r7, lr}
 800685c:	b086      	sub	sp, #24
 800685e:	af00      	add	r7, sp, #0
 8006860:	60f8      	str	r0, [r7, #12]
 8006862:	460b      	mov	r3, r1
 8006864:	607a      	str	r2, [r7, #4]
 8006866:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006868:	2300      	movs	r3, #0
 800686a:	75fb      	strb	r3, [r7, #23]
  uint8_t vcsel_period_reg;

  switch (VcselPeriodType) {
 800686c:	7afb      	ldrb	r3, [r7, #11]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8006872:	2b01      	cmp	r3, #1
 8006874:	d00a      	beq.n	800688c <VL53L0X_get_vcsel_pulse_period+0x32>
 8006876:	e013      	b.n	80068a0 <VL53L0X_get_vcsel_pulse_period+0x46>
  case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
 8006878:	f107 0316 	add.w	r3, r7, #22
 800687c:	461a      	mov	r2, r3
 800687e:	2150      	movs	r1, #80	; 0x50
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f001 fade 	bl	8007e42 <VL53L0X_RdByte>
 8006886:	4603      	mov	r3, r0
 8006888:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800688a:	e00b      	b.n	80068a4 <VL53L0X_get_vcsel_pulse_period+0x4a>
  case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
 800688c:	f107 0316 	add.w	r3, r7, #22
 8006890:	461a      	mov	r2, r3
 8006892:	2170      	movs	r1, #112	; 0x70
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f001 fad4 	bl	8007e42 <VL53L0X_RdByte>
 800689a:	4603      	mov	r3, r0
 800689c:	75fb      	strb	r3, [r7, #23]
                            &vcsel_period_reg);
    break;
 800689e:	e001      	b.n	80068a4 <VL53L0X_get_vcsel_pulse_period+0x4a>
  default:
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068a0:	23fc      	movs	r3, #252	; 0xfc
 80068a2:	75fb      	strb	r3, [r7, #23]
  }

  if (Status == VL53L0X_ERROR_NONE)
 80068a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d107      	bne.n	80068bc <VL53L0X_get_vcsel_pulse_period+0x62>
    *pVCSELPulsePeriodPCLK = VL53L0X_decode_vcsel_period(vcsel_period_reg);
 80068ac:	7dbb      	ldrb	r3, [r7, #22]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe fffd 	bl	80058ae <VL53L0X_decode_vcsel_period>
 80068b4:	4603      	mov	r3, r0
 80068b6:	461a      	mov	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	701a      	strb	r2, [r3, #0]

  return Status;
 80068bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3718      	adds	r7, #24
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <VL53L0X_set_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t MeasurementTimingBudgetMicroSeconds) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b092      	sub	sp, #72	; 0x48
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t FinalRangeTimingBudgetMicroSeconds;
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 80068d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80068dc:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1320;
 80068de:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 80068e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t EndOverheadMicroSeconds = 960;
 80068e4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80068e8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t MsrcOverheadMicroSeconds = 660;
 80068ea:	f44f 7325 	mov.w	r3, #660	; 0x294
 80068ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t TccOverheadMicroSeconds = 590;
 80068f0:	f240 234e 	movw	r3, #590	; 0x24e
 80068f4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t DssOverheadMicroSeconds = 690;
 80068f6:	f240 23b2 	movw	r3, #690	; 0x2b2
 80068fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t PreRangeOverheadMicroSeconds = 660;
 80068fc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006902:	f240 2326 	movw	r3, #550	; 0x226
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 8006908:	2300      	movs	r3, #0
 800690a:	60fb      	str	r3, [r7, #12]
  uint32_t cMinTimingBudgetMicroSeconds = 20000;
 800690c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006910:	623b      	str	r3, [r7, #32]
  uint32_t SubTimeout = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]

  LOG_FUNCTION_START("");

  if (MeasurementTimingBudgetMicroSeconds < cMinTimingBudgetMicroSeconds) {
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	429a      	cmp	r2, r3
 800691c:	d205      	bcs.n	800692a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 800691e:	23fc      	movs	r3, #252	; 0xfc
 8006920:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    return Status;
 8006924:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006928:	e0aa      	b.n	8006a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  FinalRangeTimingBudgetMicroSeconds =
      MeasurementTimingBudgetMicroSeconds -
      (StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800692a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800692c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800692e:	4413      	add	r3, r2
  FinalRangeTimingBudgetMicroSeconds =
 8006930:	683a      	ldr	r2, [r7, #0]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	643b      	str	r3, [r7, #64]	; 0x40

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006936:	f107 0314 	add.w	r3, r7, #20
 800693a:	4619      	mov	r1, r3
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fd f9c3 	bl	8003cc8 <VL53L0X_GetSequenceStepEnables>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

  if (Status == VL53L0X_ERROR_NONE &&
 8006948:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800694c:	2b00      	cmp	r3, #0
 800694e:	d15b      	bne.n	8006a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 8006950:	7d3b      	ldrb	r3, [r7, #20]
  if (Status == VL53L0X_ERROR_NONE &&
 8006952:	2b00      	cmp	r3, #0
 8006954:	d105      	bne.n	8006962 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 8006956:	7d7b      	ldrb	r3, [r7, #21]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
       SchedulerSequenceSteps.DssOn)) {
 800695c:	7dbb      	ldrb	r3, [r7, #22]
      (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 800695e:	2b00      	cmp	r3, #0
 8006960:	d052      	beq.n	8006a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

    /* TCC, MSRC and DSS all share the same timeout */
    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 8006962:	f107 0310 	add.w	r3, r7, #16
 8006966:	461a      	mov	r2, r3
 8006968:	2102      	movs	r1, #2
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff fda0 	bl	80064b0 <get_sequence_step_timeout>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &MsrcDccTccTimeoutMicroSeconds);

    /* Subtract the TCC, MSRC and DSS timeouts if they are
     * enabled. */

    if (Status != VL53L0X_ERROR_NONE)
 8006976:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
      return Status;
 800697e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006982:	e07d      	b.n	8006a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

    /* TCC */
    if (SchedulerSequenceSteps.TccOn) {
 8006984:	7d3b      	ldrb	r3, [r7, #20]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00f      	beq.n	80069aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

      SubTimeout = MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	4413      	add	r3, r2
 8006990:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006992:	69fa      	ldr	r2, [r7, #28]
 8006994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006996:	429a      	cmp	r2, r3
 8006998:	d204      	bcs.n	80069a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800699a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	643b      	str	r3, [r7, #64]	; 0x40
 80069a2:	e002      	b.n	80069aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069a4:	23fc      	movs	r3, #252	; 0xfc
 80069a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }

    if (Status != VL53L0X_ERROR_NONE) {
 80069aa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
      LOG_FUNCTION_END(Status);
      return Status;
 80069b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069b6:	e063      	b.n	8006a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
    }

    /* DSS */
    if (SchedulerSequenceSteps.DssOn) {
 80069b8:	7dbb      	ldrb	r3, [r7, #22]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d011      	beq.n	80069e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

      SubTimeout =
          2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	4413      	add	r3, r2
      SubTimeout =
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80069c8:	69fa      	ldr	r2, [r7, #28]
 80069ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d204      	bcs.n	80069da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80069d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	643b      	str	r3, [r7, #64]	; 0x40
 80069d8:	e016      	b.n	8006a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069da:	23fc      	movs	r3, #252	; 0xfc
 80069dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80069e0:	e012      	b.n	8006a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      }
    } else if (SchedulerSequenceSteps.MsrcOn) {
 80069e2:	7d7b      	ldrb	r3, [r7, #21]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00f      	beq.n	8006a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      /* MSRC */
      SubTimeout = MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ec:	4413      	add	r3, r2
 80069ee:	61fb      	str	r3, [r7, #28]

      if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d204      	bcs.n	8006a02 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
        FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80069f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	643b      	str	r3, [r7, #64]	; 0x40
 8006a00:	e002      	b.n	8006a08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
      } else {
        /* Requested timeout too big. */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a02:	23fc      	movs	r3, #252	; 0xfc
 8006a04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  if (Status != VL53L0X_ERROR_NONE) {
 8006a08:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
    LOG_FUNCTION_END(Status);
    return Status;
 8006a10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a14:	e034      	b.n	8006a80 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
  }

  if (SchedulerSequenceSteps.PreRangeOn) {
 8006a16:	7dfb      	ldrb	r3, [r7, #23]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d019      	beq.n	8006a50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

    /* Subtract the Pre-range timeout if enabled. */

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 8006a1c:	f107 030c 	add.w	r3, r7, #12
 8006a20:	461a      	mov	r2, r3
 8006a22:	2103      	movs	r1, #3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fd43 	bl	80064b0 <get_sequence_step_timeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       &PreRangeTimeoutMicroSeconds);

    SubTimeout = PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a34:	4413      	add	r3, r2
 8006a36:	61fb      	str	r3, [r7, #28]

    if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006a38:	69fa      	ldr	r2, [r7, #28]
 8006a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d204      	bcs.n	8006a4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
      FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8006a40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	643b      	str	r3, [r7, #64]	; 0x40
 8006a48:	e002      	b.n	8006a50 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
    } else {
      /* Requested timeout too big. */
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006a4a:	23fc      	movs	r3, #252	; 0xfc
 8006a4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
  }

  if (Status == VL53L0X_ERROR_NONE && SchedulerSequenceSteps.FinalRangeOn) {
 8006a50:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d111      	bne.n	8006a7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
 8006a58:	7e3b      	ldrb	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

    FinalRangeTimingBudgetMicroSeconds -= FinalRangeOverheadMicroSeconds;
 8006a5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	643b      	str	r3, [r7, #64]	; 0x40
     * budget and the sum of all other timeouts within the sequence.
     * If there is no room for the final range timeout, then an error
     * will be set. Otherwise the remaining time will be applied to
     * the final range.
     */
    Status = set_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 8006a66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a68:	2104      	movs	r1, #4
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff fe01 	bl	8006672 <set_sequence_step_timeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                                       FinalRangeTimingBudgetMicroSeconds);

    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	615a      	str	r2, [r3, #20]
                              MeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);

  return Status;
 8006a7c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3748      	adds	r7, #72	; 0x48
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}

08006a88 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(
    VL53L0X_DEV Dev, uint32_t *pMeasurementTimingBudgetMicroSeconds) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b090      	sub	sp, #64	; 0x40
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
  uint32_t FinalRangeTimeoutMicroSeconds;
  uint32_t MsrcDccTccTimeoutMicroSeconds = 2000;
 8006a98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006a9c:	613b      	str	r3, [r7, #16]
  uint32_t StartOverheadMicroSeconds = 1910;
 8006a9e:	f240 7376 	movw	r3, #1910	; 0x776
 8006aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t EndOverheadMicroSeconds = 960;
 8006aa4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006aa8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t MsrcOverheadMicroSeconds = 660;
 8006aaa:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t TccOverheadMicroSeconds = 590;
 8006ab0:	f240 234e 	movw	r3, #590	; 0x24e
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t DssOverheadMicroSeconds = 690;
 8006ab6:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t PreRangeOverheadMicroSeconds = 660;
 8006abc:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006ac2:	f240 2326 	movw	r3, #550	; 0x226
 8006ac6:	623b      	str	r3, [r7, #32]
  uint32_t PreRangeTimeoutMicroSeconds = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	60fb      	str	r3, [r7, #12]

  LOG_FUNCTION_START("");

  /* Start and end overhead times always present */
  *pMeasurementTimingBudgetMicroSeconds =
      StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad0:	441a      	add	r2, r3
  *pMeasurementTimingBudgetMicroSeconds =
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006ad6:	f107 0318 	add.w	r3, r7, #24
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fd f8f3 	bl	8003cc8 <VL53L0X_GetSequenceStepEnables>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status != VL53L0X_ERROR_NONE) {
 8006ae8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
    LOG_FUNCTION_END(Status);
    return Status;
 8006af0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006af4:	e075      	b.n	8006be2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
  }

  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 8006af6:	7e3b      	ldrb	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
 8006afc:	7e7b      	ldrb	r3, [r7, #25]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d102      	bne.n	8006b08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
      SchedulerSequenceSteps.DssOn) {
 8006b02:	7ebb      	ldrb	r3, [r7, #26]
  if (SchedulerSequenceSteps.TccOn || SchedulerSequenceSteps.MsrcOn ||
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d030      	beq.n	8006b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

    Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_MSRC,
 8006b08:	f107 0310 	add.w	r3, r7, #16
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	2102      	movs	r1, #2
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fccd 	bl	80064b0 <get_sequence_step_timeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                       &MsrcDccTccTimeoutMicroSeconds);

    if (Status == VL53L0X_ERROR_NONE) {
 8006b1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d122      	bne.n	8006b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      if (SchedulerSequenceSteps.TccOn) {
 8006b24:	7e3b      	ldrb	r3, [r7, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
        *pMeasurementTimingBudgetMicroSeconds +=
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + TccOverheadMicroSeconds;
 8006b2e:	6939      	ldr	r1, [r7, #16]
 8006b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b32:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 8006b34:	441a      	add	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	601a      	str	r2, [r3, #0]
      }

      if (SchedulerSequenceSteps.DssOn) {
 8006b3a:	7ebb      	ldrb	r3, [r7, #26]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
        *pMeasurementTimingBudgetMicroSeconds +=
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
            2 * (MsrcDccTccTimeoutMicroSeconds + DssOverheadMicroSeconds);
 8006b44:	6939      	ldr	r1, [r7, #16]
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	440b      	add	r3, r1
 8006b4a:	005b      	lsls	r3, r3, #1
        *pMeasurementTimingBudgetMicroSeconds +=
 8006b4c:	441a      	add	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	e00a      	b.n	8006b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
      } else if (SchedulerSequenceSteps.MsrcOn) {
 8006b54:	7e7b      	ldrb	r3, [r7, #25]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
        *pMeasurementTimingBudgetMicroSeconds +=
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
            MsrcDccTccTimeoutMicroSeconds + MsrcOverheadMicroSeconds;
 8006b5e:	6939      	ldr	r1, [r7, #16]
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	440b      	add	r3, r1
        *pMeasurementTimingBudgetMicroSeconds +=
 8006b64:	441a      	add	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	601a      	str	r2, [r3, #0]
      }
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8006b6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d114      	bne.n	8006b9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
    if (SchedulerSequenceSteps.PreRangeOn) {
 8006b72:	7efb      	ldrb	r3, [r7, #27]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d011      	beq.n	8006b9c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_PRE_RANGE,
 8006b78:	f107 030c 	add.w	r3, r7, #12
 8006b7c:	461a      	mov	r2, r3
 8006b7e:	2103      	movs	r1, #3
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff fc95 	bl	80064b0 <get_sequence_step_timeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &PreRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
          PreRangeTimeoutMicroSeconds + PreRangeOverheadMicroSeconds;
 8006b90:	68f9      	ldr	r1, [r7, #12]
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 8006b96:	441a      	add	r2, r3
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8006b9c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d114      	bne.n	8006bce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
    if (SchedulerSequenceSteps.FinalRangeOn) {
 8006ba4:	7f3b      	ldrb	r3, [r7, #28]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d011      	beq.n	8006bce <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
      Status = get_sequence_step_timeout(Dev, VL53L0X_SEQUENCESTEP_FINAL_RANGE,
 8006baa:	f107 0314 	add.w	r3, r7, #20
 8006bae:	461a      	mov	r2, r3
 8006bb0:	2104      	movs	r1, #4
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fc7c 	bl	80064b0 <get_sequence_step_timeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &FinalRangeTimeoutMicroSeconds);
      *pMeasurementTimingBudgetMicroSeconds +=
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
          (FinalRangeTimeoutMicroSeconds + FinalRangeOverheadMicroSeconds);
 8006bc2:	6979      	ldr	r1, [r7, #20]
 8006bc4:	6a3b      	ldr	r3, [r7, #32]
 8006bc6:	440b      	add	r3, r1
      *pMeasurementTimingBudgetMicroSeconds +=
 8006bc8:	441a      	add	r2, r3
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	601a      	str	r2, [r3, #0]
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8006bce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
    VL53L0X_SETPARAMETERFIELD(Dev, MeasurementTimingBudgetMicroSeconds,
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	615a      	str	r2, [r3, #20]
                              *pMeasurementTimingBudgetMicroSeconds);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8006bde:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3740      	adds	r7, #64	; 0x40
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <VL53L0X_load_tuning_settings>:

VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
                                           uint8_t *pTuningSettingBuffer) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	77fb      	strb	r3, [r7, #31]
  uint8_t localBuffer[4]; /* max */
  uint16_t Temp16;

  LOG_FUNCTION_START("");

  Index = 0;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	617b      	str	r3, [r7, #20]

  while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	4413      	add	r3, r2
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f000 80ce 	beq.w	8006da8 <VL53L0X_load_tuning_settings+0x1bc>
 8006c0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 80c9 	bne.w	8006da8 <VL53L0X_load_tuning_settings+0x1bc>
         (Status == VL53L0X_ERROR_NONE)) {
    NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	683a      	ldr	r2, [r7, #0]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	74fb      	strb	r3, [r7, #19]
    Index++;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	3301      	adds	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]
    if (NumberOfWrites == 0xFF) {
 8006c26:	7cfb      	ldrb	r3, [r7, #19]
 8006c28:	2bff      	cmp	r3, #255	; 0xff
 8006c2a:	f040 808e 	bne.w	8006d4a <VL53L0X_load_tuning_settings+0x15e>
      /* internal parameters */
      SelectParam = *(pTuningSettingBuffer + Index);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	4413      	add	r3, r2
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	747b      	strb	r3, [r7, #17]
      Index++;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	617b      	str	r3, [r7, #20]
      switch (SelectParam) {
 8006c3e:	7c7b      	ldrb	r3, [r7, #17]
 8006c40:	2b03      	cmp	r3, #3
 8006c42:	d87f      	bhi.n	8006d44 <VL53L0X_load_tuning_settings+0x158>
 8006c44:	a201      	add	r2, pc, #4	; (adr r2, 8006c4c <VL53L0X_load_tuning_settings+0x60>)
 8006c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4a:	bf00      	nop
 8006c4c:	08006c5d 	.word	0x08006c5d
 8006c50:	08006c97 	.word	0x08006c97
 8006c54:	08006cd1 	.word	0x08006cd1
 8006c58:	08006d0b 	.word	0x08006d0b
      case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	683a      	ldr	r2, [r7, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	743b      	strb	r3, [r7, #16]
        Index++;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	683a      	ldr	r2, [r7, #0]
 8006c70:	4413      	add	r3, r2
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	73fb      	strb	r3, [r7, #15]
        Index++;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c7c:	7c3b      	ldrb	r3, [r7, #16]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	89ba      	ldrh	r2, [r7, #12]
 8006c90:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
        break;
 8006c94:	e087      	b.n	8006da6 <VL53L0X_load_tuning_settings+0x1ba>
      case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	743b      	strb	r3, [r7, #16]
        Index++;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	4413      	add	r3, r2
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	73fb      	strb	r3, [r7, #15]
        Index++;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006cb6:	7c3b      	ldrb	r3, [r7, #16]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	021b      	lsls	r3, r3, #8
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	4413      	add	r3, r2
 8006cc4:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstEffPulseWidth, Temp16);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	89ba      	ldrh	r2, [r7, #12]
 8006cca:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
        break;
 8006cce:	e06a      	b.n	8006da6 <VL53L0X_load_tuning_settings+0x1ba>
      case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	4413      	add	r3, r2
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	743b      	strb	r3, [r7, #16]
        Index++;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	73fb      	strb	r3, [r7, #15]
        Index++;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	3301      	adds	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006cf0:	7c3b      	ldrb	r3, [r7, #16]
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	89ba      	ldrh	r2, [r7, #12]
 8006d04:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
        break;
 8006d08:	e04d      	b.n	8006da6 <VL53L0X_load_tuning_settings+0x1ba>
      case 3: /* uint16_t targetRefRate -> 2 bytes */
        msb = *(pTuningSettingBuffer + Index);
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	683a      	ldr	r2, [r7, #0]
 8006d0e:	4413      	add	r3, r2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	743b      	strb	r3, [r7, #16]
        Index++;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	3301      	adds	r3, #1
 8006d18:	617b      	str	r3, [r7, #20]
        lsb = *(pTuningSettingBuffer + Index);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	4413      	add	r3, r2
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	73fb      	strb	r3, [r7, #15]
        Index++;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	3301      	adds	r3, #1
 8006d28:	617b      	str	r3, [r7, #20]
        Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006d2a:	7c3b      	ldrb	r3, [r7, #16]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	021b      	lsls	r3, r3, #8
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	4413      	add	r3, r2
 8006d38:	81bb      	strh	r3, [r7, #12]
        PALDevDataSet(Dev, targetRefRate, Temp16);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	89ba      	ldrh	r2, [r7, #12]
 8006d3e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
        break;
 8006d42:	e030      	b.n	8006da6 <VL53L0X_load_tuning_settings+0x1ba>
      default: /* invalid parameter */
        Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d44:	23fc      	movs	r3, #252	; 0xfc
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e759      	b.n	8006bfe <VL53L0X_load_tuning_settings+0x12>
      }

    } else if (NumberOfWrites <= 4) {
 8006d4a:	7cfb      	ldrb	r3, [r7, #19]
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d828      	bhi.n	8006da2 <VL53L0X_load_tuning_settings+0x1b6>
      Address = *(pTuningSettingBuffer + Index);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	4413      	add	r3, r2
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	74bb      	strb	r3, [r7, #18]
      Index++;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	617b      	str	r3, [r7, #20]

      for (i = 0; i < NumberOfWrites; i++) {
 8006d60:	2300      	movs	r3, #0
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	7cfb      	ldrb	r3, [r7, #19]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	da10      	bge.n	8006d8e <VL53L0X_load_tuning_settings+0x1a2>
        localBuffer[i] = *(pTuningSettingBuffer + Index);
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4413      	add	r3, r2
 8006d72:	7819      	ldrb	r1, [r3, #0]
 8006d74:	f107 0208 	add.w	r2, r7, #8
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	460a      	mov	r2, r1
 8006d7e:	701a      	strb	r2, [r3, #0]
        Index++;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	3301      	adds	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
      for (i = 0; i < NumberOfWrites; i++) {
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	e7ea      	b.n	8006d64 <VL53L0X_load_tuning_settings+0x178>
      }

      Status = VL53L0X_WriteMulti(Dev, Address, localBuffer, NumberOfWrites);
 8006d8e:	7cfb      	ldrb	r3, [r7, #19]
 8006d90:	f107 0208 	add.w	r2, r7, #8
 8006d94:	7cb9      	ldrb	r1, [r7, #18]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 ff79 	bl	8007c8e <VL53L0X_WriteMulti>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e72d      	b.n	8006bfe <VL53L0X_load_tuning_settings+0x12>

    } else {
      Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006da2:	23fc      	movs	r3, #252	; 0xfc
 8006da4:	77fb      	strb	r3, [r7, #31]
  while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006da6:	e72a      	b.n	8006bfe <VL53L0X_load_tuning_settings+0x12>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8006da8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3720      	adds	r7, #32
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_xtalk_rate_mcps) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b088      	sub	sp, #32
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	77fb      	strb	r3, [r7, #31]

  uint8_t xtalkCompEnable;
  FixPoint1616_t totalXtalkMegaCps;
  FixPoint1616_t xtalkPerSpadMegaCps;

  *ptotal_xtalk_rate_mcps = 0;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006dca:	f107 0313 	add.w	r3, r7, #19
 8006dce:	4619      	mov	r1, r3
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7fd f845 	bl	8003e60 <VL53L0X_GetXTalkCompensationEnable>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	77fb      	strb	r3, [r7, #31]
  if (Status == VL53L0X_ERROR_NONE) {
 8006dda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d111      	bne.n	8006e06 <VL53L0X_get_total_xtalk_rate+0x52>

    if (xtalkCompEnable) {
 8006de2:	7cfb      	ldrb	r3, [r7, #19]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00e      	beq.n	8006e06 <VL53L0X_get_total_xtalk_rate+0x52>

      VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	61bb      	str	r3, [r7, #24]
                                xtalkPerSpadMegaCps);

      /* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
      totalXtalkMegaCps =
          pRangingMeasurementData->EffectiveSpadRtnCount * xtalkPerSpadMegaCps;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	8a9b      	ldrh	r3, [r3, #20]
 8006df2:	461a      	mov	r2, r3
      totalXtalkMegaCps =
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	617b      	str	r3, [r7, #20]

      /* FixPoint0824 >> 8 = FixPoint1616 */
      *ptotal_xtalk_rate_mcps = (totalXtalkMegaCps + 0x80) >> 8;
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	3380      	adds	r3, #128	; 0x80
 8006e00:	0a1a      	lsrs	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	601a      	str	r2, [r3, #0]
    }
  }

  return Status;
 8006e06:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *ptotal_signal_rate_mcps) {
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b086      	sub	sp, #24
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	75fb      	strb	r3, [r7, #23]
  FixPoint1616_t totalXtalkMegaCps;

  LOG_FUNCTION_START("");

  *ptotal_signal_rate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	601a      	str	r2, [r3, #0]

  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 8006e2a:	f107 0310 	add.w	r3, r7, #16
 8006e2e:	461a      	mov	r2, r3
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f7ff ffbe 	bl	8006db4 <VL53L0X_get_total_xtalk_rate>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	75fb      	strb	r3, [r7, #23]
                                        &totalXtalkMegaCps);

  if (Status == VL53L0X_ERROR_NONE)
 8006e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d105      	bne.n	8006e50 <VL53L0X_get_total_signal_rate+0x3e>
    *ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	441a      	add	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	601a      	str	r2, [r3, #0]

  return Status;
 8006e50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3718      	adds	r7, #24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>:
                                FixPoint1616_t totalSignalRate_mcps,
                                FixPoint1616_t totalCorrSignalRate_mcps,
                                FixPoint1616_t pwMult, uint32_t sigmaEstimateP1,
                                FixPoint1616_t sigmaEstimateP2,
                                uint32_t peakVcselDuration_us,
                                uint32_t *pdmax_mm) {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b09a      	sub	sp, #104	; 0x68
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
  const uint32_t cSigmaLimit = 18;
 8006e6a:	2312      	movs	r3, #18
 8006e6c:	657b      	str	r3, [r7, #84]	; 0x54
  const FixPoint1616_t cSignalLimit = 0x4000;     /* 0.25 */
 8006e6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e72:	653b      	str	r3, [r7, #80]	; 0x50
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 8006e74:	2342      	movs	r3, #66	; 0x42
 8006e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006e78:	2306      	movs	r3, #6
 8006e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  const uint32_t cAmbEffWidthDMax_ns = 7;
 8006e7c:	2307      	movs	r3, #7
 8006e7e:	647b      	str	r3, [r7, #68]	; 0x44
  FixPoint1616_t dmaxAmbient;
  FixPoint1616_t dmaxDarkTmp;
  FixPoint1616_t sigmaEstP2Tmp;
  uint32_t signalRateTemp_mcps;

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  LOG_FUNCTION_START("");

  dmaxCalRange_mm = PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
 8006e8c:	63fb      	str	r3, [r7, #60]	; 0x3c

  dmaxCalSignalRateRtn_mcps = PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 8006e94:	63bb      	str	r3, [r7, #56]	; 0x38

  /* uint32 * FixPoint1616 = FixPoint1616 */
  SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
 8006e9e:	637b      	str	r3, [r7, #52]	; 0x34

  /* FixPoint1616 >> 8 = FixPoint2408 */
  SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea2:	3380      	adds	r3, #128	; 0x80
 8006ea4:	0a1b      	lsrs	r3, r3, #8
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34
  SignalAt0mm *= dmaxCalRange_mm;
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eaa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006eac:	fb02 f303 	mul.w	r3, r2, r3
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34

  minSignalNeeded_p1 = 0;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	667b      	str	r3, [r7, #100]	; 0x64
  if (totalCorrSignalRate_mcps > 0) {
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d01a      	beq.n	8006ef2 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x96>

    /* Shift by 10 bits to increase resolution prior to the
     * division */
    signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Add rounding value prior to division */
    minSignalNeeded_p1 = signalRateTemp_mcps + (totalCorrSignalRate_mcps / 2);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ec8:	4413      	add	r3, r2
 8006eca:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint0626/FixPoint1616 = FixPoint2210 */
    minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006ecc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed4:	667b      	str	r3, [r7, #100]	; 0x64

    /* Apply a factored version of the speed of light.
     Correction to be applied at the end */
    minSignalNeeded_p1 *= 3;
 8006ed6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006ed8:	4613      	mov	r3, r2
 8006eda:	005b      	lsls	r3, r3, #1
 8006edc:	4413      	add	r3, r2
 8006ede:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint2210 * FixPoint2210 = FixPoint1220 */
    minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee2:	fb03 f303 	mul.w	r3, r3, r3
 8006ee6:	667b      	str	r3, [r7, #100]	; 0x64

    /* FixPoint1220 >> 16 = FixPoint2804 */
    minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006eea:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006eee:	0c1b      	lsrs	r3, r3, #16
 8006ef0:	667b      	str	r3, [r7, #100]	; 0x64
  }

  minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
 8006efa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* FixPoint1616 >> 16 =	 uint32 */
  minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f02:	0c1b      	lsrs	r3, r3, #16
 8006f04:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* uint32 * uint32	=  uint32 */
  minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	fb03 f303 	mul.w	r3, r3, r3
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Check sigmaEstimateP2
   * If this value is too high there is not enough signal rate
   * to calculate dmax value so set a suitable value to ensure
   * a very small dmax.
   */
  sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f10:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f14:	0c1b      	lsrs	r3, r3, #16
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp =
      (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns / 2) / cAmbEffWidthSigmaEst_ns;
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	3303      	adds	r3, #3
  sigmaEstP2Tmp =
 8006f1c:	4a55      	ldr	r2, [pc, #340]	; (8007074 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x218>)
 8006f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	62bb      	str	r3, [r7, #40]	; 0x28
  sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	1a9b      	subs	r3, r3, r2
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (sigmaEstP2Tmp > 0xffff) {
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f36:	d302      	bcc.n	8006f3e <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0xe2>
    minSignalNeeded_p3 = 0xfff00000;
 8006f38:	4b4f      	ldr	r3, [pc, #316]	; (8007078 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x21c>)
 8006f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8006f3c:	e014      	b.n	8006f68 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x10c>

    /* DMAX uses a different ambient width from sigma, so apply
     * correction.
     * Perform division before multiplication to prevent overflow.
     */
    sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns / 2) /
 8006f3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f40:	3303      	adds	r3, #3
 8006f42:	4a4c      	ldr	r2, [pc, #304]	; (8007074 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x218>)
 8006f44:	fba2 2303 	umull	r2, r3, r2, r3
 8006f48:	089b      	lsrs	r3, r3, #2
 8006f4a:	677b      	str	r3, [r7, #116]	; 0x74
                      cAmbEffWidthSigmaEst_ns;
    sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006f4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006f4e:	4613      	mov	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	1a9b      	subs	r3, r3, r2
 8006f54:	677b      	str	r3, [r7, #116]	; 0x74

    /* FixPoint1616 >> 16 = uint32 */
    minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f58:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	663b      	str	r3, [r7, #96]	; 0x60

    minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f62:	fb03 f303 	mul.w	r3, r3, r3
 8006f66:	663b      	str	r3, [r7, #96]	; 0x60
  }

  /* FixPoint1814 / uint32 = FixPoint1814 */
  sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006f68:	f240 1327 	movw	r3, #295	; 0x127
 8006f6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
  sigmaLimitTmp *= sigmaLimitTmp;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	fb03 f303 	mul.w	r3, r3, r3
 8006f74:	627b      	str	r3, [r7, #36]	; 0x24

  /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
  sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006f76:	f241 1304 	movw	r3, #4356	; 0x1104
 8006f7a:	623b      	str	r3, [r7, #32]

  /* FixPoint3232 >> 4 = FixPoint0428 */
  sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	091b      	lsrs	r3, r3, #4
 8006f82:	623b      	str	r3, [r7, #32]

  /* FixPoint0428 - FixPoint0428	= FixPoint0428 */
  sigmaLimitTmp -= sigmaEstSqTmp;
 8006f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* uint32_t * FixPoint0428 = FixPoint0428 */
  minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f8e:	4613      	mov	r3, r2
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	4413      	add	r3, r2
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	61fb      	str	r3, [r7, #28]

  /* FixPoint0428 >> 14 = FixPoint1814 */
  minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f9e:	0b9b      	lsrs	r3, r3, #14
 8006fa0:	61fb      	str	r3, [r7, #28]

  /* uint32 + uint32 = uint32 */
  minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fa6:	4413      	add	r3, r2
 8006fa8:	61bb      	str	r3, [r7, #24]

  /* uint32 / uint32 = uint32 */
  minSignalNeeded += (peakVcselDuration_us / 2);
 8006faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fac:	085b      	lsrs	r3, r3, #1
 8006fae:	69ba      	ldr	r2, [r7, #24]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= peakVcselDuration_us;
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbc:	61bb      	str	r3, [r7, #24]

  /* uint32 << 14 = FixPoint1814 */
  minSignalNeeded <<= 14;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	039b      	lsls	r3, r3, #14
 8006fc2:	61bb      	str	r3, [r7, #24]

  /* FixPoint1814 / FixPoint1814 = uint32 */
  minSignalNeeded += (minSignalNeeded_p4 / 2);
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	085b      	lsrs	r3, r3, #1
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4413      	add	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
  minSignalNeeded /= minSignalNeeded_p4;
 8006fce:	69ba      	ldr	r2, [r7, #24]
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fd6:	61bb      	str	r3, [r7, #24]

  /* FixPoint3200 * FixPoint2804 := FixPoint2804*/
  minSignalNeeded *= minSignalNeeded_p1;
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006fdc:	fb02 f303 	mul.w	r3, r2, r3
 8006fe0:	61bb      	str	r3, [r7, #24]
   * and 10E-22 on the denominator.
   * We do this because 32bit fix point calculation can't
   * handle the larger and smaller elements of this equation,
   * i.e. speed of light and pulse widths.
   */
  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006fe8:	4a24      	ldr	r2, [pc, #144]	; (800707c <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 8006fea:	fba2 2303 	umull	r2, r3, r2, r3
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	61bb      	str	r3, [r7, #24]
  minSignalNeeded <<= 4;
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	61bb      	str	r3, [r7, #24]

  minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006ffe:	4a1f      	ldr	r2, [pc, #124]	; (800707c <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x220>)
 8007000:	fba2 2303 	umull	r2, r3, r2, r3
 8007004:	099b      	lsrs	r3, r3, #6
 8007006:	61bb      	str	r3, [r7, #24]

  /* FixPoint1616 >> 8 = FixPoint2408 */
  signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007008:	2340      	movs	r3, #64	; 0x40
 800700a:	617b      	str	r3, [r7, #20]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (signalLimitTmp != 0)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1c8>
    dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2)) / signalLimitTmp;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	085a      	lsrs	r2, r3, #1
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	441a      	add	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007020:	65bb      	str	r3, [r7, #88]	; 0x58
 8007022:	e001      	b.n	8007028 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1cc>
  else
    dmaxDarkTmp = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	65bb      	str	r3, [r7, #88]	; 0x58

  dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007028:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800702a:	f7fe fc53 	bl	80058d4 <VL53L0X_isqrt>
 800702e:	6138      	str	r0, [r7, #16]

  /* FixPoint2408/FixPoint2408 = uint32 */
  if (minSignalNeeded != 0)
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d008      	beq.n	8007048 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1ec>
    dmaxAmbient = (SignalAt0mm + minSignalNeeded / 2) / minSignalNeeded;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	085a      	lsrs	r2, r3, #1
 800703a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703c:	441a      	add	r2, r3
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	fbb2 f3f3 	udiv	r3, r2, r3
 8007044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007046:	e001      	b.n	800704c <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x1f0>
  else
    dmaxAmbient = 0;
 8007048:	2300      	movs	r3, #0
 800704a:	65fb      	str	r3, [r7, #92]	; 0x5c

  dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800704c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800704e:	f7fe fc41 	bl	80058d4 <VL53L0X_isqrt>
 8007052:	65f8      	str	r0, [r7, #92]	; 0x5c

  *pdmax_mm = dmaxDark;
 8007054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	601a      	str	r2, [r3, #0]
  if (dmaxDark > dmaxAmbient)
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800705e:	429a      	cmp	r2, r3
 8007060:	d902      	bls.n	8007068 <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm+0x20c>
    *pdmax_mm = dmaxAmbient;
 8007062:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007064:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007066:	601a      	str	r2, [r3, #0]

  LOG_FUNCTION_END(Status);

  return Status;
 8007068:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800706c:	4618      	mov	r0, r3
 800706e:	3768      	adds	r7, #104	; 0x68
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	aaaaaaab 	.word	0xaaaaaaab
 8007078:	fff00000 	.word	0xfff00000
 800707c:	10624dd3 	.word	0x10624dd3

08007080 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(
    VL53L0X_DEV Dev, VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    FixPoint1616_t *pSigmaEstimate, uint32_t *pDmax_mm) {
 8007080:	b5b0      	push	{r4, r5, r7, lr}
 8007082:	b0b2      	sub	sp, #200	; 0xc8
 8007084:	af04      	add	r7, sp, #16
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cPulseEffectiveWidth_centi_ns = 800;
 800708e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007092:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  /* Expressed in 100ths of a ns, i.e. centi-ns */
  const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007096:	f44f 7316 	mov.w	r3, #600	; 0x258
 800709a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  const FixPoint1616_t cSigmaEstRef = 0x00000042; /* 0.001 */
 800709e:	2342      	movs	r3, #66	; 0x42
 80070a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  const uint32_t cVcselPulseWidth_ps = 4700;      /* pico secs */
 80070a4:	f241 235c 	movw	r3, #4700	; 0x125c
 80070a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  const FixPoint1616_t cSigmaEstMax = 0x028F87AE;
 80070ac:	4b69      	ldr	r3, [pc, #420]	; (8007254 <VL53L0X_calc_sigma_estimate+0x1d4>)
 80070ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  const FixPoint1616_t cSigmaEstRtnMax = 0xF000;
 80070b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80070b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const FixPoint1616_t cAmbToSignalRatioMax =
 80070ba:	4b67      	ldr	r3, [pc, #412]	; (8007258 <VL53L0X_calc_sigma_estimate+0x1d8>)
 80070bc:	67fb      	str	r3, [r7, #124]	; 0x7c
      0xF0000000 / cAmbientEffectiveWidth_centi_ns;
  /* Time Of Flight per mm (6.6 pico secs) */
  const FixPoint1616_t cTOF_per_mm_ps = 0x0006999A;
 80070be:	4b67      	ldr	r3, [pc, #412]	; (800725c <VL53L0X_calc_sigma_estimate+0x1dc>)
 80070c0:	67bb      	str	r3, [r7, #120]	; 0x78
  const uint32_t c16BitRoundingParam = 0x00008000;
 80070c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070c6:	677b      	str	r3, [r7, #116]	; 0x74
  const FixPoint1616_t cMaxXTalk_kcps = 0x00320000;
 80070c8:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 80070cc:	673b      	str	r3, [r7, #112]	; 0x70
  const uint32_t cPllPeriod_ps = 1655;
 80070ce:	f240 6377 	movw	r3, #1655	; 0x677
 80070d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  FixPoint1616_t xTalkCorrection;
  FixPoint1616_t ambientRate_kcps;
  FixPoint1616_t peakSignalRate_kcps;
  FixPoint1616_t xTalkCompRate_mcps;
  uint32_t xTalkCompRate_kcps;
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
   *	- SigmaEstEffAmbWidth
   */

  LOG_FUNCTION_START("");

  VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6a1b      	ldr	r3, [r3, #32]
 80070de:	617b      	str	r3, [r7, #20]
   * We work in kcps rather than mcps as this helps keep within the
   * confines of the 32 Fix1616 type.
   */

  ambientRate_kcps =
      (pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070e8:	fb02 f303 	mul.w	r3, r2, r3
  ambientRate_kcps =
 80070ec:	0c1b      	lsrs	r3, r3, #16
 80070ee:	66bb      	str	r3, [r7, #104]	; 0x68

  correctedSignalRate_mcps = pRangingMeasurementData->SignalRateRtnMegaCps;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	667b      	str	r3, [r7, #100]	; 0x64

  Status = VL53L0X_get_total_signal_rate(Dev, pRangingMeasurementData,
 80070f6:	f107 0310 	add.w	r3, r7, #16
 80070fa:	461a      	mov	r2, r3
 80070fc:	68b9      	ldr	r1, [r7, #8]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f7ff fe87 	bl	8006e12 <VL53L0X_get_total_signal_rate>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                                         &totalSignalRate_mcps);
  Status = VL53L0X_get_total_xtalk_rate(Dev, pRangingMeasurementData,
 800710a:	f107 0314 	add.w	r3, r7, #20
 800710e:	461a      	mov	r2, r3
 8007110:	68b9      	ldr	r1, [r7, #8]
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fe4e 	bl	8006db4 <VL53L0X_get_total_xtalk_rate>
 8007118:	4603      	mov	r3, r0
 800711a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
                                        &xTalkCompRate_mcps);

  /* Signal rate measurement provided by device is the
   * peak signal rate, not average.
   */
  peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	663b      	str	r3, [r7, #96]	; 0x60
  peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800712a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800712c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	663b      	str	r3, [r7, #96]	; 0x60

  xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007146:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800714a:	d903      	bls.n	8007154 <VL53L0X_calc_sigma_estimate+0xd4>
    xTalkCompRate_kcps = cMaxXTalk_kcps;
 800714c:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  if (Status == VL53L0X_ERROR_NONE) {
 8007154:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d165      	bne.n	8007228 <VL53L0X_calc_sigma_estimate+0x1a8>

    /* Calculate final range macro periods */
    finalRangeTimeoutMicroSecs =
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007162:	65fb      	str	r3, [r7, #92]	; 0x5c
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeTimeoutMicroSecs);

    finalRangeVcselPCLKS =
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800716a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, FinalRangeVcselPulsePeriod);

    finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800716e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007172:	461a      	mov	r2, r3
 8007174:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f7ff f944 	bl	8006404 <VL53L0X_calc_timeout_mclks>
 800717c:	6578      	str	r0, [r7, #84]	; 0x54
        Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

    /* Calculate pre-range macro periods */
    preRangeTimeoutMicroSecs =
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007184:	653b      	str	r3, [r7, #80]	; 0x50
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeTimeoutMicroSecs);

    preRangeVcselPCLKS =
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800718c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, PreRangeVcselPulsePeriod);

    preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007190:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007194:	461a      	mov	r2, r3
 8007196:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff f933 	bl	8006404 <VL53L0X_calc_timeout_mclks>
 800719e:	64b8      	str	r0, [r7, #72]	; 0x48
        Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

    vcselWidth = 3;
 80071a0:	2303      	movs	r3, #3
 80071a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (finalRangeVcselPCLKS == 8)
 80071a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d102      	bne.n	80071b4 <VL53L0X_calc_sigma_estimate+0x134>
      vcselWidth = 2;
 80071ae:	2302      	movs	r3, #2
 80071b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    peakVcselDuration_us =
        vcselWidth * 2048 * (preRangeMacroPCLKS + finalRangeMacroPCLKS);
 80071b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b8:	4413      	add	r3, r2
 80071ba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80071be:	fb02 f303 	mul.w	r3, r2, r3
    peakVcselDuration_us =
 80071c2:	02db      	lsls	r3, r3, #11
 80071c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 80071c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80071d0:	4a23      	ldr	r2, [pc, #140]	; (8007260 <VL53L0X_calc_sigma_estimate+0x1e0>)
 80071d2:	fba2 2303 	umull	r2, r3, r2, r3
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us *= cPllPeriod_ps;
 80071dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071e0:	f240 6277 	movw	r2, #1655	; 0x677
 80071e4:	fb02 f303 	mul.w	r3, r2, r3
 80071e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    peakVcselDuration_us = (peakVcselDuration_us + 500) / 1000;
 80071ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071f0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80071f4:	4a1a      	ldr	r2, [pc, #104]	; (8007260 <VL53L0X_calc_sigma_estimate+0x1e0>)
 80071f6:	fba2 2303 	umull	r2, r3, r2, r3
 80071fa:	099b      	lsrs	r3, r3, #6
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Fix1616 >> 8 = Fix2408 */
    totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	3380      	adds	r3, #128	; 0x80
 8007204:	0a1b      	lsrs	r3, r3, #8
 8007206:	613b      	str	r3, [r7, #16]

    /* Fix2408 * uint32 = Fix2408 */
    vcselTotalEventsRtn = totalSignalRate_mcps * peakVcselDuration_us;
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 >> 8 = uint32 */
    vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007216:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800721a:	3380      	adds	r3, #128	; 0x80
 800721c:	0a1b      	lsrs	r3, r3, #8
 800721e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Fix2408 << 8 = Fix1616 = */
    totalSignalRate_mcps <<= 8;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	021b      	lsls	r3, r3, #8
 8007226:	613b      	str	r3, [r7, #16]
  }

  if (Status != VL53L0X_ERROR_NONE) {
 8007228:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <VL53L0X_calc_sigma_estimate+0x1b6>
    LOG_FUNCTION_END(Status);
    return Status;
 8007230:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007234:	e12a      	b.n	800748c <VL53L0X_calc_sigma_estimate+0x40c>
  }

  if (peakSignalRate_kcps == 0) {
 8007236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007238:	2b00      	cmp	r3, #0
 800723a:	d113      	bne.n	8007264 <VL53L0X_calc_sigma_estimate+0x1e4>
    *pSigmaEstimate = cSigmaEstMax;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a05      	ldr	r2, [pc, #20]	; (8007254 <VL53L0X_calc_sigma_estimate+0x1d4>)
 8007240:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	4a03      	ldr	r2, [pc, #12]	; (8007254 <VL53L0X_calc_sigma_estimate+0x1d4>)
 8007246:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    *pDmax_mm = 0;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e11a      	b.n	8007488 <VL53L0X_calc_sigma_estimate+0x408>
 8007252:	bf00      	nop
 8007254:	028f87ae 	.word	0x028f87ae
 8007258:	00666666 	.word	0x00666666
 800725c:	0006999a 	.word	0x0006999a
 8007260:	10624dd3 	.word	0x10624dd3
  } else {
    if (vcselTotalEventsRtn < 1)
 8007264:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d102      	bne.n	8007272 <VL53L0X_calc_sigma_estimate+0x1f2>
      vcselTotalEventsRtn = 1;
 800726c:	2301      	movs	r3, #1
 800726e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
     * deltaT_ps represents the time of flight in pico secs for the
     * current range measurement, using the "TOF per mm" constant
     * (in ps).
     */

    sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007272:	f44f 7348 	mov.w	r3, #800	; 0x320
 8007276:	647b      	str	r3, [r7, #68]	; 0x44

    /* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
    sigmaEstimateP2 = (ambientRate_kcps << 16) / peakSignalRate_kcps;
 8007278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800727a:	041a      	lsls	r2, r3, #16
 800727c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800727e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007282:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800728a:	4a82      	ldr	r2, [pc, #520]	; (8007494 <VL53L0X_calc_sigma_estimate+0x414>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d902      	bls.n	8007296 <VL53L0X_calc_sigma_estimate+0x216>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007290:	4b80      	ldr	r3, [pc, #512]	; (8007494 <VL53L0X_calc_sigma_estimate+0x414>)
 8007292:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    }
    sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007296:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800729a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800729e:	fb02 f303 	mul.w	r3, r2, r3
 80072a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 80072a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fb0e 	bl	80058d4 <VL53L0X_isqrt>
 80072b8:	4603      	mov	r3, r0
 80072ba:	005b      	lsls	r3, r3, #1
 80072bc:	643b      	str	r3, [r7, #64]	; 0x40

    /* uint32 * FixPoint1616 = FixPoint1616 */
    deltaT_ps = pRangingMeasurementData->RangeMilliMeter * cTOF_per_mm_ps;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	891b      	ldrh	r3, [r3, #8]
 80072c2:	461a      	mov	r2, r3
 80072c4:	4b74      	ldr	r3, [pc, #464]	; (8007498 <VL53L0X_calc_sigma_estimate+0x418>)
 80072c6:	fb02 f303 	mul.w	r3, r2, r3
 80072ca:	63fb      	str	r3, [r7, #60]	; 0x3c
     * Divide result by 1000 to convert to mcps.
     * 500 is added to ensure rounding when integer division
     * truncates.
     */
    diff1_mcps =
        (((peakSignalRate_kcps << 16) - xTalkCompRate_kcps) + 500) / 1000;
 80072cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072ce:	041a      	lsls	r2, r3, #16
 80072d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff1_mcps =
 80072da:	4a70      	ldr	r2, [pc, #448]	; (800749c <VL53L0X_calc_sigma_estimate+0x41c>)
 80072dc:	fba2 2303 	umull	r2, r3, r2, r3
 80072e0:	099b      	lsrs	r3, r3, #6
 80072e2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* vcselRate + xtalkCompRate */
    diff2_mcps =
        (((peakSignalRate_kcps << 16) + xTalkCompRate_kcps) + 500) / 1000;
 80072e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072e6:	041a      	lsls	r2, r3, #16
 80072e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    diff2_mcps =
 80072f2:	4a6a      	ldr	r2, [pc, #424]	; (800749c <VL53L0X_calc_sigma_estimate+0x41c>)
 80072f4:	fba2 2303 	umull	r2, r3, r2, r3
 80072f8:	099b      	lsrs	r3, r3, #6
 80072fa:	637b      	str	r3, [r7, #52]	; 0x34

    /* Shift by 8 bits to increase resolution prior to the
     * division */
    diff1_mcps <<= 8;
 80072fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fe:	021b      	lsls	r3, r3, #8
 8007300:	63bb      	str	r3, [r7, #56]	; 0x38

    /* FixPoint0824/FixPoint1616 = FixPoint2408 */
    xTalkCorrection = (FixPoint1616_t)abs((long long)(diff1_mcps / diff2_mcps));
 8007302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007306:	fbb2 f3f3 	udiv	r3, r2, r3
 800730a:	2200      	movs	r2, #0
 800730c:	461c      	mov	r4, r3
 800730e:	4615      	mov	r5, r2
 8007310:	4620      	mov	r0, r4
 8007312:	4629      	mov	r1, r5
 8007314:	f7fe fa87 	bl	8005826 <_ZSt3absx>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4613      	mov	r3, r2
 800731e:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint2408 << 8 = FixPoint1616 */
    xTalkCorrection <<= 8;
 8007320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	633b      	str	r3, [r7, #48]	; 0x30

    /* FixPoint1616/uint32 = FixPoint1616 */
    pwMult = deltaT_ps / cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007328:	4a5d      	ldr	r2, [pc, #372]	; (80074a0 <VL53L0X_calc_sigma_estimate+0x420>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	0a9b      	lsrs	r3, r3, #10
 8007330:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*
     * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
     * values are small enough such that32 bits will not be
     * exceeded.
     */
    pwMult *= ((1 << 16) - xTalkCorrection);
 8007332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007334:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	fb02 f303 	mul.w	r3, r2, r3
 800733e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint3232 >> 16) = FixPoint1616 */
    pwMult = (pwMult + c16BitRoundingParam) >> 16;
 8007340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007342:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007346:	0c1b      	lsrs	r3, r3, #16
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint1616 + FixPoint1616 = FixPoint1616 */
    pwMult += (1 << 16);
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007350:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*
     * At this point the value will be 1.xx, therefore if we square
     * the value this will exceed 32 bits. To address this perform
     * a single shift to the right before the multiplication.
     */
    pwMult >>= 1;
 8007352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007354:	085b      	lsrs	r3, r3, #1
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* FixPoint1715 * FixPoint1715 = FixPoint3430 */
    pwMult = pwMult * pwMult;
 8007358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800735a:	fb03 f303 	mul.w	r3, r3, r3
 800735e:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* (FixPoint3430 >> 14) = Fix1616 */
    pwMult >>= 14;
 8007360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007362:	0b9b      	lsrs	r3, r3, #14
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* FixPoint1616 * uint32 = FixPoint1616 */
    sqr1 = pwMult * sigmaEstimateP1;
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800736a:	fb02 f303 	mul.w	r3, r2, r3
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr1 = (sqr1 + 0x8000) >> 16;
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007376:	0c1b      	lsrs	r3, r3, #16
 8007378:	62bb      	str	r3, [r7, #40]	; 0x28

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr1 *= sqr1;
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	fb03 f303 	mul.w	r3, r3, r3
 8007380:	62bb      	str	r3, [r7, #40]	; 0x28

    sqr2 = sigmaEstimateP2;
 8007382:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007386:	627b      	str	r3, [r7, #36]	; 0x24

    /* (FixPoint1616 >> 16) = FixPoint3200 */
    sqr2 = (sqr2 + 0x8000) >> 16;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800738e:	0c1b      	lsrs	r3, r3, #16
 8007390:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint3200 * FixPoint3200 = FixPoint6400 */
    sqr2 *= sqr2;
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	fb03 f303 	mul.w	r3, r3, r3
 8007398:	627b      	str	r3, [r7, #36]	; 0x24

    /* FixPoint64000 + FixPoint6400 = FixPoint6400 */
    sqrSum = sqr1 + sqr2;
 800739a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	4413      	add	r3, r2
 80073a0:	623b      	str	r3, [r7, #32]

    /* SQRT(FixPoin6400) = FixPoint3200 */
    sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 80073a2:	6a38      	ldr	r0, [r7, #32]
 80073a4:	f7fe fa96 	bl	80058d4 <VL53L0X_isqrt>
 80073a8:	61f8      	str	r0, [r7, #28]

    /* (FixPoint3200 << 16) = FixPoint1616 */
    sqrtResult_centi_ns <<= 16;
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	041b      	lsls	r3, r3, #16
 80073ae:	61fb      	str	r3, [r7, #28]
    /*
     * Note that the Speed Of Light is expressed in um per 1E-10
     * seconds (2997) Therefore to get mm/ns we have to divide by
     * 10000
     */
    sigmaEstRtn = (((sqrtResult_centi_ns + 50) / 100) / sigmaEstimateP3);
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	3332      	adds	r3, #50	; 0x32
 80073b4:	4a3b      	ldr	r2, [pc, #236]	; (80074a4 <VL53L0X_calc_sigma_estimate+0x424>)
 80073b6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ba:	095a      	lsrs	r2, r3, #5
 80073bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073be:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 80073c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ca:	f640 32b5 	movw	r2, #2997	; 0xbb5
 80073ce:	fb02 f303 	mul.w	r3, r2, r3
 80073d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Add 5000 before dividing by 10000 to ensure rounding. */
    sigmaEstRtn += 5000;
 80073d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073da:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80073de:	3308      	adds	r3, #8
 80073e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    sigmaEstRtn /= 10000;
 80073e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073e8:	4a2f      	ldr	r2, [pc, #188]	; (80074a8 <VL53L0X_calc_sigma_estimate+0x428>)
 80073ea:	fba2 2303 	umull	r2, r3, r2, r3
 80073ee:	0b5b      	lsrs	r3, r3, #13
 80073f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    if (sigmaEstRtn > cSigmaEstRtnMax) {
 80073f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073f8:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 80073fc:	d903      	bls.n	8007406 <VL53L0X_calc_sigma_estimate+0x386>
      /* Clip to prevent overflow. Will ensure safe
       * max result. */
      sigmaEstRtn = cSigmaEstRtnMax;
 80073fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    }

    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800740a:	fb03 f303 	mul.w	r3, r3, r3
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* FixPoint1616 * FixPoint1616 = FixPoint3232 */
    sqr2 = cSigmaEstRef * cSigmaEstRef;
 8007410:	f241 1304 	movw	r3, #4356	; 0x1104
 8007414:	627b      	str	r3, [r7, #36]	; 0x24

    /* sqrt(FixPoint3232) = FixPoint1616 */
    sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	4413      	add	r3, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f7fe fa59 	bl	80058d4 <VL53L0X_isqrt>
 8007422:	61b8      	str	r0, [r7, #24]
     * Note that the Shift by 4 bits increases resolution prior to
     * the sqrt, therefore the result must be shifted by 2 bits to
     * the right to revert back to the FixPoint1616 format.
     */

    sigmaEstimate = 1000 * sqrtResult;
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <VL53L0X_calc_sigma_estimate+0x3ca>
 8007438:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <VL53L0X_calc_sigma_estimate+0x3ca>
 8007440:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007444:	4a19      	ldr	r2, [pc, #100]	; (80074ac <VL53L0X_calc_sigma_estimate+0x42c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d902      	bls.n	8007450 <VL53L0X_calc_sigma_estimate+0x3d0>
        (sigmaEstimate > cSigmaEstMax)) {
      sigmaEstimate = cSigmaEstMax;
 800744a:	4b18      	ldr	r3, [pc, #96]	; (80074ac <VL53L0X_calc_sigma_estimate+0x42c>)
 800744c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    }

    *pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007456:	601a      	str	r2, [r3, #0]
    PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    Status = VL53L0X_calc_dmax(
 8007462:	6939      	ldr	r1, [r7, #16]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800746c:	9302      	str	r3, [sp, #8]
 800746e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007472:	9301      	str	r3, [sp, #4]
 8007474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff fced 	bl	8006e5c <_Z17VL53L0X_calc_dmaxP13VL53L0X_Dev_tmmmmmmPm>
 8007482:	4603      	mov	r3, r0
 8007484:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
        Dev, totalSignalRate_mcps, correctedSignalRate_mcps, pwMult,
        sigmaEstimateP1, sigmaEstimateP2, peakVcselDuration_us, pDmax_mm);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 8007488:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800748c:	4618      	mov	r0, r3
 800748e:	37b8      	adds	r7, #184	; 0xb8
 8007490:	46bd      	mov	sp, r7
 8007492:	bdb0      	pop	{r4, r5, r7, pc}
 8007494:	00666666 	.word	0x00666666
 8007498:	0006999a 	.word	0x0006999a
 800749c:	10624dd3 	.word	0x10624dd3
 80074a0:	37c67b51 	.word	0x37c67b51
 80074a4:	51eb851f 	.word	0x51eb851f
 80074a8:	d1b71759 	.word	0xd1b71759
 80074ac:	028f87ae 	.word	0x028f87ae

080074b0 <VL53L0X_get_pal_range_status>:

VL53L0X_Error VL53L0X_get_pal_range_status(
    VL53L0X_DEV Dev, uint8_t DeviceRangeStatus, FixPoint1616_t SignalRate,
    uint16_t EffectiveSpadRtnCount,
    VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
    uint8_t *pPalRangeStatus) {
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b090      	sub	sp, #64	; 0x40
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	461a      	mov	r2, r3
 80074bc:	460b      	mov	r3, r1
 80074be:	72fb      	strb	r3, [r7, #11]
 80074c0:	4613      	mov	r3, r2
 80074c2:	813b      	strh	r3, [r7, #8]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074c4:	2300      	movs	r3, #0
 80074c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint8_t NoneFlag;
  uint8_t SigmaLimitflag = 0;
 80074ca:	2300      	movs	r3, #0
 80074cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  uint8_t SignalRefClipflag = 0;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  uint8_t RangeIgnoreThresholdflag = 0;
 80074d6:	2300      	movs	r3, #0
 80074d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  uint8_t SigmaLimitCheckEnable = 0;
 80074dc:	2300      	movs	r3, #0
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t SignalRefClipLimitCheckEnable = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80074ee:	2300      	movs	r3, #0
 80074f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  FixPoint1616_t SigmaEstimate;
  FixPoint1616_t SigmaLimitValue;
  FixPoint1616_t SignalRefClipValue;
  FixPoint1616_t RangeIgnoreThresholdValue;
  FixPoint1616_t SignalRatePerSpad;
  uint8_t DeviceRangeStatusInternal = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint16_t tmpWord = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	82fb      	strh	r3, [r7, #22]
  uint8_t Temp8;
  uint32_t Dmax_mm = 0;
 80074fe:	2300      	movs	r3, #0
 8007500:	613b      	str	r3, [r7, #16]
   * the value 11 in the DeviceRangeStatus.
   * In addition, the SigmaEstimator is not included in the VL53L0X
   * DeviceRangeStatus, this will be added in the PalRangeStatus.
   */

  DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	08db      	lsrs	r3, r3, #3
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 030f 	and.w	r3, r3, #15
 800750c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

  if (DeviceRangeStatusInternal == 0 || DeviceRangeStatusInternal == 5 ||
 8007510:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007514:	2b00      	cmp	r3, #0
 8007516:	d017      	beq.n	8007548 <VL53L0X_get_pal_range_status+0x98>
 8007518:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800751c:	2b05      	cmp	r3, #5
 800751e:	d013      	beq.n	8007548 <VL53L0X_get_pal_range_status+0x98>
 8007520:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007524:	2b07      	cmp	r3, #7
 8007526:	d00f      	beq.n	8007548 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 7 || DeviceRangeStatusInternal == 12 ||
 8007528:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800752c:	2b0c      	cmp	r3, #12
 800752e:	d00b      	beq.n	8007548 <VL53L0X_get_pal_range_status+0x98>
 8007530:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007534:	2b0d      	cmp	r3, #13
 8007536:	d007      	beq.n	8007548 <VL53L0X_get_pal_range_status+0x98>
      DeviceRangeStatusInternal == 13 || DeviceRangeStatusInternal == 14 ||
 8007538:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800753c:	2b0e      	cmp	r3, #14
 800753e:	d003      	beq.n	8007548 <VL53L0X_get_pal_range_status+0x98>
 8007540:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007544:	2b0f      	cmp	r3, #15
 8007546:	d103      	bne.n	8007550 <VL53L0X_get_pal_range_status+0xa0>
      DeviceRangeStatusInternal == 15) {
    NoneFlag = 1;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800754e:	e002      	b.n	8007556 <VL53L0X_get_pal_range_status+0xa6>
  } else {
    NoneFlag = 0;
 8007550:	2300      	movs	r3, #0
 8007552:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  }

  /* LastSignalRefMcps */
  if (Status == VL53L0X_ERROR_NONE)
 8007556:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800755a:	2b00      	cmp	r3, #0
 800755c:	d107      	bne.n	800756e <VL53L0X_get_pal_range_status+0xbe>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800755e:	2201      	movs	r2, #1
 8007560:	21ff      	movs	r1, #255	; 0xff
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fbe7 	bl	8007d36 <VL53L0X_WrByte>
 8007568:	4603      	mov	r3, r0
 800756a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (Status == VL53L0X_ERROR_NONE)
 800756e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007572:	2b00      	cmp	r3, #0
 8007574:	d109      	bne.n	800758a <VL53L0X_get_pal_range_status+0xda>
    Status =
        VL53L0X_RdWord(Dev, VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF, &tmpWord);
 8007576:	f107 0316 	add.w	r3, r7, #22
 800757a:	461a      	mov	r2, r3
 800757c:	21b6      	movs	r1, #182	; 0xb6
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 fc80 	bl	8007e84 <VL53L0X_RdWord>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800758a:	8afb      	ldrh	r3, [r7, #22]
 800758c:	025b      	lsls	r3, r3, #9
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (Status == VL53L0X_ERROR_NONE)
 8007590:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007594:	2b00      	cmp	r3, #0
 8007596:	d107      	bne.n	80075a8 <VL53L0X_get_pal_range_status+0xf8>
    Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007598:	2200      	movs	r2, #0
 800759a:	21ff      	movs	r1, #255	; 0xff
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fbca 	bl	8007d36 <VL53L0X_WrByte>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075ac:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /*
   * Check if Sigma limit is enabled, if yes then do comparison with limit
   * value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 80075b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d109      	bne.n	80075cc <VL53L0X_get_pal_range_status+0x11c>
    Status = VL53L0X_GetLimitCheckEnable(
 80075b8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80075bc:	461a      	mov	r2, r3
 80075be:	2100      	movs	r1, #0
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7fc fd21 	bl	8004008 <VL53L0X_GetLimitCheckEnable>
 80075c6:	4603      	mov	r3, r0
 80075c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitCheckEnable);

  if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 80075cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d02e      	beq.n	8007632 <VL53L0X_get_pal_range_status+0x182>
 80075d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d12a      	bne.n	8007632 <VL53L0X_get_pal_range_status+0x182>
    /*
     * compute the Sigma and check with limit
     */
    Status = VL53L0X_calc_sigma_estimate(Dev, pRangingMeasurementData,
 80075dc:	f107 0310 	add.w	r3, r7, #16
 80075e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80075e4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fd4a 	bl	8007080 <VL53L0X_calc_sigma_estimate>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                         &SigmaEstimate, &Dmax_mm);
    if (Status == VL53L0X_ERROR_NONE)
 80075f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <VL53L0X_get_pal_range_status+0x152>
      pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007600:	815a      	strh	r2, [r3, #10]

    if (Status == VL53L0X_ERROR_NONE) {
 8007602:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007606:	2b00      	cmp	r3, #0
 8007608:	d113      	bne.n	8007632 <VL53L0X_get_pal_range_status+0x182>
      Status = VL53L0X_GetLimitCheckValue(
 800760a:	f107 0320 	add.w	r3, r7, #32
 800760e:	461a      	mov	r2, r3
 8007610:	2100      	movs	r1, #0
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f7fc fd7e 	bl	8004114 <VL53L0X_GetLimitCheckValue>
 8007618:	4603      	mov	r3, r0
 800761a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, &SigmaLimitValue);

      if ((SigmaLimitValue > 0) && (SigmaEstimate > SigmaLimitValue))
 800761e:	6a3b      	ldr	r3, [r7, #32]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d006      	beq.n	8007632 <VL53L0X_get_pal_range_status+0x182>
 8007624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007626:	6a3b      	ldr	r3, [r7, #32]
 8007628:	429a      	cmp	r2, r3
 800762a:	d902      	bls.n	8007632 <VL53L0X_get_pal_range_status+0x182>
        /* Limit Fail */
        SigmaLimitflag = 1;
 800762c:	2301      	movs	r3, #1
 800762e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  /*
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   */
  if (Status == VL53L0X_ERROR_NONE)
 8007632:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <VL53L0X_get_pal_range_status+0x19e>
    Status =
        VL53L0X_GetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
 800763a:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800763e:	461a      	mov	r2, r3
 8007640:	2102      	movs	r1, #2
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7fc fce0 	bl	8004008 <VL53L0X_GetLimitCheckEnable>
 8007648:	4603      	mov	r3, r0
 800764a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                    &SignalRefClipLimitCheckEnable);

  if ((SignalRefClipLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800764e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007652:	2b00      	cmp	r3, #0
 8007654:	d017      	beq.n	8007686 <VL53L0X_get_pal_range_status+0x1d6>
 8007656:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800765a:	2b00      	cmp	r3, #0
 800765c:	d113      	bne.n	8007686 <VL53L0X_get_pal_range_status+0x1d6>

    Status = VL53L0X_GetLimitCheckValue(
 800765e:	f107 031c 	add.w	r3, r7, #28
 8007662:	461a      	mov	r2, r3
 8007664:	2102      	movs	r1, #2
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f7fc fd54 	bl	8004114 <VL53L0X_GetLimitCheckValue>
 800766c:	4603      	mov	r3, r0
 800766e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, &SignalRefClipValue);

    if ((SignalRefClipValue > 0) && (LastSignalRefMcps > SignalRefClipValue)) {
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d006      	beq.n	8007686 <VL53L0X_get_pal_range_status+0x1d6>
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800767c:	429a      	cmp	r2, r3
 800767e:	d902      	bls.n	8007686 <VL53L0X_get_pal_range_status+0x1d6>
      /* Limit Fail */
      SignalRefClipflag = 1;
 8007680:	2301      	movs	r3, #1
 8007682:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   * Check if Signal ref clip limit is enabled, if yes then do comparison
   * with limit value and put the result back into pPalRangeStatus.
   * EffectiveSpadRtnCount has a format 8.8
   * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
   */
  if (Status == VL53L0X_ERROR_NONE)
 8007686:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800768a:	2b00      	cmp	r3, #0
 800768c:	d109      	bne.n	80076a2 <VL53L0X_get_pal_range_status+0x1f2>
    Status = VL53L0X_GetLimitCheckEnable(
 800768e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007692:	461a      	mov	r2, r3
 8007694:	2103      	movs	r1, #3
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f7fc fcb6 	bl	8004008 <VL53L0X_GetLimitCheckEnable>
 800769c:	4603      	mov	r3, r0
 800769e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdLimitCheckEnable);

  if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 80076a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d023      	beq.n	80076f2 <VL53L0X_get_pal_range_status+0x242>
 80076aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11f      	bne.n	80076f2 <VL53L0X_get_pal_range_status+0x242>
      (Status == VL53L0X_ERROR_NONE)) {

    /* Compute the signal rate per spad */
    if (EffectiveSpadRtnCount == 0) {
 80076b2:	893b      	ldrh	r3, [r7, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d102      	bne.n	80076be <VL53L0X_get_pal_range_status+0x20e>
      SignalRatePerSpad = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34
 80076bc:	e005      	b.n	80076ca <VL53L0X_get_pal_range_status+0x21a>
    } else {
      SignalRatePerSpad =
          (FixPoint1616_t)((256 * SignalRate) / EffectiveSpadRtnCount);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	021a      	lsls	r2, r3, #8
 80076c2:	893b      	ldrh	r3, [r7, #8]
      SignalRatePerSpad =
 80076c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    Status = VL53L0X_GetLimitCheckValue(
 80076ca:	f107 0318 	add.w	r3, r7, #24
 80076ce:	461a      	mov	r2, r3
 80076d0:	2103      	movs	r1, #3
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f7fc fd1e 	bl	8004114 <VL53L0X_GetLimitCheckValue>
 80076d8:	4603      	mov	r3, r0
 80076da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
        &RangeIgnoreThresholdValue);

    if ((RangeIgnoreThresholdValue > 0) &&
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d006      	beq.n	80076f2 <VL53L0X_get_pal_range_status+0x242>
        (SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80076e4:	69bb      	ldr	r3, [r7, #24]
    if ((RangeIgnoreThresholdValue > 0) &&
 80076e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d202      	bcs.n	80076f2 <VL53L0X_get_pal_range_status+0x242>
      /* Limit Fail add 2^6 to range status */
      RangeIgnoreThresholdflag = 1;
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    }
  }

  if (Status == VL53L0X_ERROR_NONE) {
 80076f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d14a      	bne.n	8007790 <VL53L0X_get_pal_range_status+0x2e0>
    if (NoneFlag == 1) {
 80076fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d103      	bne.n	800770a <VL53L0X_get_pal_range_status+0x25a>
      *pPalRangeStatus = 255; /* NONE */
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	22ff      	movs	r2, #255	; 0xff
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e042      	b.n	8007790 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 1 ||
 800770a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800770e:	2b01      	cmp	r3, #1
 8007710:	d007      	beq.n	8007722 <VL53L0X_get_pal_range_status+0x272>
 8007712:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007716:	2b02      	cmp	r3, #2
 8007718:	d003      	beq.n	8007722 <VL53L0X_get_pal_range_status+0x272>
               DeviceRangeStatusInternal == 2 ||
 800771a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800771e:	2b03      	cmp	r3, #3
 8007720:	d103      	bne.n	800772a <VL53L0X_get_pal_range_status+0x27a>
               DeviceRangeStatusInternal == 3) {
      *pPalRangeStatus = 5; /* HW fail */
 8007722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007724:	2205      	movs	r2, #5
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	e032      	b.n	8007790 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 6 ||
 800772a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800772e:	2b06      	cmp	r3, #6
 8007730:	d003      	beq.n	800773a <VL53L0X_get_pal_range_status+0x28a>
 8007732:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007736:	2b09      	cmp	r3, #9
 8007738:	d103      	bne.n	8007742 <VL53L0X_get_pal_range_status+0x292>
               DeviceRangeStatusInternal == 9) {
      *pPalRangeStatus = 4; /* Phase fail */
 800773a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773c:	2204      	movs	r2, #4
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	e026      	b.n	8007790 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 8 ||
 8007742:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007746:	2b08      	cmp	r3, #8
 8007748:	d007      	beq.n	800775a <VL53L0X_get_pal_range_status+0x2aa>
 800774a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800774e:	2b0a      	cmp	r3, #10
 8007750:	d003      	beq.n	800775a <VL53L0X_get_pal_range_status+0x2aa>
               DeviceRangeStatusInternal == 10 || SignalRefClipflag == 1) {
 8007752:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007756:	2b01      	cmp	r3, #1
 8007758:	d103      	bne.n	8007762 <VL53L0X_get_pal_range_status+0x2b2>
      *pPalRangeStatus = 3; /* Min range */
 800775a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800775c:	2203      	movs	r2, #3
 800775e:	701a      	strb	r2, [r3, #0]
 8007760:	e016      	b.n	8007790 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (DeviceRangeStatusInternal == 4 ||
 8007762:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007766:	2b04      	cmp	r3, #4
 8007768:	d003      	beq.n	8007772 <VL53L0X_get_pal_range_status+0x2c2>
 800776a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800776e:	2b01      	cmp	r3, #1
 8007770:	d103      	bne.n	800777a <VL53L0X_get_pal_range_status+0x2ca>
               RangeIgnoreThresholdflag == 1) {
      *pPalRangeStatus = 2; /* Signal Fail */
 8007772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007774:	2202      	movs	r2, #2
 8007776:	701a      	strb	r2, [r3, #0]
 8007778:	e00a      	b.n	8007790 <VL53L0X_get_pal_range_status+0x2e0>
    } else if (SigmaLimitflag == 1) {
 800777a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800777e:	2b01      	cmp	r3, #1
 8007780:	d103      	bne.n	800778a <VL53L0X_get_pal_range_status+0x2da>
      *pPalRangeStatus = 1; /* Sigma	 Fail */
 8007782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007784:	2201      	movs	r2, #1
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	e002      	b.n	8007790 <VL53L0X_get_pal_range_status+0x2e0>
    } else {
      *pPalRangeStatus = 0; /* Range Valid */
 800778a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778c:	2200      	movs	r2, #0
 800778e:	701a      	strb	r2, [r3, #0]
    }
  }

  /* DMAX only relevant during range error */
  if (*pPalRangeStatus == 0)
 8007790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <VL53L0X_get_pal_range_status+0x2ee>
    pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800779a:	2200      	movs	r2, #0
 800779c:	815a      	strh	r2, [r3, #10]

  /* fill the Limit Check Status */

  Status = VL53L0X_GetLimitCheckEnable(
 800779e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80077a2:	461a      	mov	r2, r3
 80077a4:	2101      	movs	r1, #1
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f7fc fc2e 	bl	8004008 <VL53L0X_GetLimitCheckEnable>
 80077ac:	4603      	mov	r3, r0
 80077ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
      Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
      &SignalRateFinalRangeLimitCheckEnable);

  if (Status == VL53L0X_ERROR_NONE) {
 80077b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d14f      	bne.n	800785a <VL53L0X_get_pal_range_status+0x3aa>
    if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80077ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d003      	beq.n	80077ca <VL53L0X_get_pal_range_status+0x31a>
 80077c2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d103      	bne.n	80077d2 <VL53L0X_get_pal_range_status+0x322>
      Temp8 = 1;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077d0:	e002      	b.n	80077d8 <VL53L0X_get_pal_range_status+0x328>
    else
      Temp8 = 0;
 80077d2:	2300      	movs	r3, #0
 80077d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    VL53L0X_SETARRAYPARAMETERFIELD(
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80077de:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        Dev, LimitChecksStatus, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

    if ((DeviceRangeStatusInternal == 4) ||
 80077e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	d003      	beq.n	80077f2 <VL53L0X_get_pal_range_status+0x342>
        (SignalRateFinalRangeLimitCheckEnable == 0))
 80077ea:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
    if ((DeviceRangeStatusInternal == 4) ||
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d103      	bne.n	80077fa <VL53L0X_get_pal_range_status+0x34a>
      Temp8 = 1;
 80077f2:	2301      	movs	r3, #1
 80077f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f8:	e002      	b.n	8007800 <VL53L0X_get_pal_range_status+0x350>
    else
      Temp8 = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007806:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
                                   VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
                                   Temp8);

    if ((SignalRefClipLimitCheckEnable == 0) || (SignalRefClipflag == 1))
 800780a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <VL53L0X_get_pal_range_status+0x36a>
 8007812:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007816:	2b01      	cmp	r3, #1
 8007818:	d103      	bne.n	8007822 <VL53L0X_get_pal_range_status+0x372>
      Temp8 = 1;
 800781a:	2301      	movs	r3, #1
 800781c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007820:	e002      	b.n	8007828 <VL53L0X_get_pal_range_status+0x378>
    else
      Temp8 = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800782e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
                                   VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

    if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8007832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007836:	2b00      	cmp	r3, #0
 8007838:	d003      	beq.n	8007842 <VL53L0X_get_pal_range_status+0x392>
 800783a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800783e:	2b01      	cmp	r3, #1
 8007840:	d103      	bne.n	800784a <VL53L0X_get_pal_range_status+0x39a>
        (RangeIgnoreThresholdflag == 1))
      Temp8 = 1;
 8007842:	2301      	movs	r3, #1
 8007844:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007848:	e002      	b.n	8007850 <VL53L0X_get_pal_range_status+0x3a0>
    else
      Temp8 = 0;
 800784a:	2300      	movs	r3, #0
 800784c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007856:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
                                   VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
                                   Temp8);
  }

  LOG_FUNCTION_END(Status);
  return Status;
 800785a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800785e:	4618      	mov	r0, r3
 8007860:	3740      	adds	r7, #64	; 0x40
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t>:
#define LOG_FUNCTION_END_FMT(status, fmt, ...)                                 \
  _LOG_FUNCTION_END_FMT(TRACE_MODULE_API, status, fmt, ##__VA_ARGS__)

VL53L0X_Error
VL53L0X_check_part_used(VL53L0X_DEV Dev, uint8_t *Revision,
                        VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007872:	2300      	movs	r3, #0
 8007874:	75fb      	strb	r3, [r7, #23]
  uint8_t ModuleIdInt;
  char *ProductId_tmp;

  LOG_FUNCTION_START("");

  Status = VL53L0X_get_info_from_device(Dev, 2);
 8007876:	2102      	movs	r1, #2
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7fe f8a1 	bl	80059c0 <VL53L0X_get_info_from_device>
 800787e:	4603      	mov	r3, r0
 8007880:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 8007882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d11c      	bne.n	80078c4 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x5e>
    ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8007890:	75bb      	strb	r3, [r7, #22]

    if (ModuleIdInt == 0) {
 8007892:	7dbb      	ldrb	r3, [r7, #22]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d107      	bne.n	80078a8 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x42>
      *Revision = 0;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3340      	adds	r3, #64	; 0x40
 80078a2:	2200      	movs	r2, #0
 80078a4:	701a      	strb	r2, [r3, #0]
 80078a6:	e00d      	b.n	80078c4 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t+0x5e>
    } else {
      *Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	701a      	strb	r2, [r3, #0]
      ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ProductId);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	33f3      	adds	r3, #243	; 0xf3
 80078b6:	613b      	str	r3, [r7, #16]
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3340      	adds	r3, #64	; 0x40
 80078bc:	6939      	ldr	r1, [r7, #16]
 80078be:	4618      	mov	r0, r3
 80078c0:	f000 fba0 	bl	8008004 <strcpy>
    }
  }

  LOG_FUNCTION_END(Status);
  return Status;
 80078c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <VL53L0X_get_device_info>:

VL53L0X_Error
VL53L0X_get_device_info(VL53L0X_DEV Dev,
                        VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo) {
 80078d0:	b5b0      	push	{r4, r5, r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]
  uint8_t revision_id;
  uint8_t Revision;

  Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 80078de:	f107 030d 	add.w	r3, r7, #13
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7ff ffbd 	bl	8007866 <_Z23VL53L0X_check_part_usedP13VL53L0X_Dev_tPhP20VL53L0X_DeviceInfo_t>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
  if (Status == VL53L0X_ERROR_NONE) {
 80078f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d13b      	bne.n	8007970 <VL53L0X_get_device_info+0xa0>
    if (Revision == 0) {
 80078f8:	7b7b      	ldrb	r3, [r7, #13]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d108      	bne.n	8007910 <VL53L0X_get_device_info+0x40>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	4a30      	ldr	r2, [pc, #192]	; (80079c4 <VL53L0X_get_device_info+0xf4>)
 8007902:	461c      	mov	r4, r3
 8007904:	4613      	mov	r3, r2
 8007906:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007908:	6020      	str	r0, [r4, #0]
 800790a:	6061      	str	r1, [r4, #4]
 800790c:	60a2      	str	r2, [r4, #8]
 800790e:	e027      	b.n	8007960 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
    } else if ((Revision <= 34) && (Revision != 32)) {
 8007910:	7b7b      	ldrb	r3, [r7, #13]
 8007912:	2b22      	cmp	r3, #34	; 0x22
 8007914:	d80b      	bhi.n	800792e <VL53L0X_get_device_info+0x5e>
 8007916:	7b7b      	ldrb	r3, [r7, #13]
 8007918:	2b20      	cmp	r3, #32
 800791a:	d008      	beq.n	800792e <VL53L0X_get_device_info+0x5e>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	4a2a      	ldr	r2, [pc, #168]	; (80079c8 <VL53L0X_get_device_info+0xf8>)
 8007920:	461c      	mov	r4, r3
 8007922:	4613      	mov	r3, r2
 8007924:	cb07      	ldmia	r3!, {r0, r1, r2}
 8007926:	6020      	str	r0, [r4, #0]
 8007928:	6061      	str	r1, [r4, #4]
 800792a:	60a2      	str	r2, [r4, #8]
 800792c:	e018      	b.n	8007960 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
    } else if (Revision < 39) {
 800792e:	7b7b      	ldrb	r3, [r7, #13]
 8007930:	2b26      	cmp	r3, #38	; 0x26
 8007932:	d808      	bhi.n	8007946 <VL53L0X_get_device_info+0x76>
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	4a25      	ldr	r2, [pc, #148]	; (80079cc <VL53L0X_get_device_info+0xfc>)
 8007938:	461c      	mov	r4, r3
 800793a:	4613      	mov	r3, r2
 800793c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800793e:	6020      	str	r0, [r4, #0]
 8007940:	6061      	str	r1, [r4, #4]
 8007942:	60a2      	str	r2, [r4, #8]
 8007944:	e00c      	b.n	8007960 <VL53L0X_get_device_info+0x90>
                         VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
    } else {
      VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	4a21      	ldr	r2, [pc, #132]	; (80079d0 <VL53L0X_get_device_info+0x100>)
 800794a:	461d      	mov	r5, r3
 800794c:	4614      	mov	r4, r2
 800794e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007950:	6028      	str	r0, [r5, #0]
 8007952:	6069      	str	r1, [r5, #4]
 8007954:	60aa      	str	r2, [r5, #8]
 8007956:	60eb      	str	r3, [r5, #12]
 8007958:	6820      	ldr	r0, [r4, #0]
 800795a:	6128      	str	r0, [r5, #16]
 800795c:	7923      	ldrb	r3, [r4, #4]
 800795e:	752b      	strb	r3, [r5, #20]
                         VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
    }

    VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	3320      	adds	r3, #32
 8007964:	491b      	ldr	r1, [pc, #108]	; (80079d4 <VL53L0X_get_device_info+0x104>)
 8007966:	461a      	mov	r2, r3
 8007968:	460b      	mov	r3, r1
 800796a:	cb03      	ldmia	r3!, {r0, r1}
 800796c:	6010      	str	r0, [r2, #0]
 800796e:	6051      	str	r1, [r2, #4]
                       VL53L0X_STRING_DEVICE_INFO_TYPE);
  }

  if (Status == VL53L0X_ERROR_NONE) {
 8007970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <VL53L0X_get_device_info+0xba>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	3360      	adds	r3, #96	; 0x60
 800797c:	461a      	mov	r2, r3
 800797e:	21c0      	movs	r1, #192	; 0xc0
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa5e 	bl	8007e42 <VL53L0X_RdByte>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
                            &pVL53L0X_DeviceInfo->ProductType);
  }
  if (Status == VL53L0X_ERROR_NONE) {
 800798a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d112      	bne.n	80079b8 <VL53L0X_get_device_info+0xe8>
    Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_REVISION_ID,
 8007992:	f107 030e 	add.w	r3, r7, #14
 8007996:	461a      	mov	r2, r3
 8007998:	21c2      	movs	r1, #194	; 0xc2
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa51 	bl	8007e42 <VL53L0X_RdByte>
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
                            &revision_id);
    pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    pVL53L0X_DeviceInfo->ProductRevisionMinor = (revision_id & 0xF0) >> 4;
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	091b      	lsrs	r3, r3, #4
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  }

  return Status;
 80079b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bdb0      	pop	{r4, r5, r7, pc}
 80079c4:	08008930 	.word	0x08008930
 80079c8:	0800893c 	.word	0x0800893c
 80079cc:	08008948 	.word	0x08008948
 80079d0:	08008954 	.word	0x08008954
 80079d4:	0800896c 	.word	0x0800896c

080079d8 <_Z19VL53L0X_write_multihhPhmP17I2C_HandleTypeDef>:

#define MY_I2C_TIMEOUT HAL_MAX_DELAY // probably change delay

int VL53L0X_write_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                        uint32_t count, I2C_HandleTypeDef *i2c)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b098      	sub	sp, #96	; 0x60
 80079dc:	af02      	add	r7, sp, #8
 80079de:	60ba      	str	r2, [r7, #8]
 80079e0:	607b      	str	r3, [r7, #4]
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
 80079e6:	460b      	mov	r3, r1
 80079e8:	73bb      	strb	r3, [r7, #14]
	uint8_t buff[65]; // 1 more than VL53L0X_MAX_I2C_XFER_SIZE for address
	buff[0] = index; // write peripheral address first
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	753b      	strb	r3, [r7, #20]
	memcpy(buff + 1, pdata, count); // copy rest of data
 80079ee:	f107 0314 	add.w	r3, r7, #20
 80079f2:	3301      	adds	r3, #1
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	68b9      	ldr	r1, [r7, #8]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f000 facd 	bl	8007f98 <memcpy>
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, count + 1, HAL_MAX_DELAY);
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	b299      	uxth	r1, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3301      	adds	r3, #1
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	f107 0214 	add.w	r2, r7, #20
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a12:	9000      	str	r0, [sp, #0]
 8007a14:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8007a16:	f7f9 fdb9 	bl	800158c <HAL_I2C_Master_Transmit>
 8007a1a:	4603      	mov	r3, r0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3758      	adds	r7, #88	; 0x58
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef>:

int VL53L0X_read_multi(uint8_t deviceAddress, uint8_t index, uint8_t *pdata,
                       uint32_t count, I2C_HandleTypeDef *i2c)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b088      	sub	sp, #32
 8007a28:	af02      	add	r7, sp, #8
 8007a2a:	60ba      	str	r2, [r7, #8]
 8007a2c:	607b      	str	r3, [r7, #4]
 8007a2e:	4603      	mov	r3, r0
 8007a30:	73fb      	strb	r3, [r7, #15]
 8007a32:	460b      	mov	r3, r1
 8007a34:	73bb      	strb	r3, [r7, #14]
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	b299      	uxth	r1, r3
 8007a3a:	f107 020e 	add.w	r2, r7, #14
 8007a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2301      	movs	r3, #1
 8007a46:	6a38      	ldr	r0, [r7, #32]
 8007a48:	f7f9 fda0 	bl	800158c <HAL_I2C_Master_Transmit>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d001      	beq.n	8007a5a <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef+0x36>
		return status;
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	e010      	b.n	8007a7c <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef+0x58>
	}
	else
	{
		// send device address with read bit set, then receive data
		status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, pdata, count, MY_I2C_TIMEOUT);
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
 8007a5c:	f043 0301 	orr.w	r3, r3, #1
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	b299      	uxth	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6c:	9200      	str	r2, [sp, #0]
 8007a6e:	68ba      	ldr	r2, [r7, #8]
 8007a70:	6a38      	ldr	r0, [r7, #32]
 8007a72:	f7f9 fe89 	bl	8001788 <HAL_I2C_Master_Receive>
 8007a76:	4603      	mov	r3, r0
 8007a78:	617b      	str	r3, [r7, #20]
		return status;
 8007a7a:	697b      	ldr	r3, [r7, #20]
	}
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3718      	adds	r7, #24
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <_Z18VL53L0X_write_bytehhhP17I2C_HandleTypeDef>:

int VL53L0X_write_byte(uint8_t deviceAddress, uint8_t index, uint8_t data,
					   I2C_HandleTypeDef *i2c)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af02      	add	r7, sp, #8
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	71fb      	strb	r3, [r7, #7]
 8007a90:	460b      	mov	r3, r1
 8007a92:	71bb      	strb	r3, [r7, #6]
 8007a94:	4613      	mov	r3, r2
 8007a96:	717b      	strb	r3, [r7, #5]
	uint8_t buff[2];
	buff[0] = index;
 8007a98:	79bb      	ldrb	r3, [r7, #6]
 8007a9a:	733b      	strb	r3, [r7, #12]
	buff[1] = data;
 8007a9c:	797b      	ldrb	r3, [r7, #5]
 8007a9e:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, 2, MY_I2C_TIMEOUT);
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	b299      	uxth	r1, r3
 8007aa4:	f107 020c 	add.w	r2, r7, #12
 8007aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	2302      	movs	r3, #2
 8007ab0:	6838      	ldr	r0, [r7, #0]
 8007ab2:	f7f9 fd6b 	bl	800158c <HAL_I2C_Master_Transmit>
 8007ab6:	4603      	mov	r3, r0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <_Z18VL53L0X_write_wordhhtP17I2C_HandleTypeDef>:

int VL53L0X_write_word(uint8_t deviceAddress, uint8_t index, uint16_t data,
		               I2C_HandleTypeDef *i2c) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	4603      	mov	r3, r0
 8007aca:	71fb      	strb	r3, [r7, #7]
 8007acc:	460b      	mov	r3, r1
 8007ace:	71bb      	strb	r3, [r7, #6]
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	80bb      	strh	r3, [r7, #4]
	uint8_t buff[3];
	buff[0] = index;
 8007ad4:	79bb      	ldrb	r3, [r7, #6]
 8007ad6:	733b      	strb	r3, [r7, #12]
	buff[1] = (data & 0xFF00) >> 8;
 8007ad8:	88bb      	ldrh	r3, [r7, #4]
 8007ada:	0a1b      	lsrs	r3, r3, #8
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	737b      	strb	r3, [r7, #13]
	buff[2] = (data & 0x00FF);
 8007ae2:	88bb      	ldrh	r3, [r7, #4]
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	73bb      	strb	r3, [r7, #14]
	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, 3, MY_I2C_TIMEOUT);
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	b299      	uxth	r1, r3
 8007aec:	f107 020c 	add.w	r2, r7, #12
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	2303      	movs	r3, #3
 8007af8:	6838      	ldr	r0, [r7, #0]
 8007afa:	f7f9 fd47 	bl	800158c <HAL_I2C_Master_Transmit>
 8007afe:	4603      	mov	r3, r0
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef>:

	return HAL_I2C_Master_Transmit(i2c, deviceAddress, buff, 5, MY_I2C_TIMEOUT);
}

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data,
					  I2C_HandleTypeDef *i2c) {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af02      	add	r7, sp, #8
 8007b0e:	60ba      	str	r2, [r7, #8]
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	4603      	mov	r3, r0
 8007b14:	73fb      	strb	r3, [r7, #15]
 8007b16:	460b      	mov	r3, r1
 8007b18:	73bb      	strb	r3, [r7, #14]
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	b299      	uxth	r1, r3
 8007b1e:	f107 020e 	add.w	r2, r7, #14
 8007b22:	f04f 33ff 	mov.w	r3, #4294967295
 8007b26:	9300      	str	r3, [sp, #0]
 8007b28:	2301      	movs	r3, #1
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7f9 fd2e 	bl	800158c <HAL_I2C_Master_Transmit>
 8007b30:	4603      	mov	r3, r0
 8007b32:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef+0x36>
		return status;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	e00f      	b.n	8007b5e <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef+0x56>
	}
	else
	{
		// send device address with read bit set, then receive data
		status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, data, 1, MY_I2C_TIMEOUT);
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	f043 0301 	orr.w	r3, r3, #1
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	b299      	uxth	r1, r3
 8007b48:	f04f 33ff 	mov.w	r3, #4294967295
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	2301      	movs	r3, #1
 8007b50:	68ba      	ldr	r2, [r7, #8]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7f9 fe18 	bl	8001788 <HAL_I2C_Master_Receive>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	617b      	str	r3, [r7, #20]
		return status;
 8007b5c:	697b      	ldr	r3, [r7, #20]
	}
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data,
					  I2C_HandleTypeDef *i2c) {
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b088      	sub	sp, #32
 8007b6a:	af02      	add	r7, sp, #8
 8007b6c:	60ba      	str	r2, [r7, #8]
 8007b6e:	607b      	str	r3, [r7, #4]
 8007b70:	4603      	mov	r3, r0
 8007b72:	73fb      	strb	r3, [r7, #15]
 8007b74:	460b      	mov	r3, r1
 8007b76:	73bb      	strb	r3, [r7, #14]
	uint16_t word;
	uint8_t buff[2];
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	b299      	uxth	r1, r3
 8007b7c:	f107 020e 	add.w	r2, r7, #14
 8007b80:	f04f 33ff 	mov.w	r3, #4294967295
 8007b84:	9300      	str	r3, [sp, #0]
 8007b86:	2301      	movs	r3, #1
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7f9 fcff 	bl	800158c <HAL_I2C_Master_Transmit>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x36>
		return status;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	e022      	b.n	8007be2 <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x7c>
	}
	// send device address with read bit set, then receive data
	status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, buff, 2, MY_I2C_TIMEOUT);
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	f043 0301 	orr.w	r3, r3, #1
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	b299      	uxth	r1, r3
 8007ba6:	f107 0210 	add.w	r2, r7, #16
 8007baa:	f04f 33ff 	mov.w	r3, #4294967295
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7f9 fde8 	bl	8001788 <HAL_I2C_Master_Receive>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	617b      	str	r3, [r7, #20]
	if (status != HAL_OK) {
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d001      	beq.n	8007bc6 <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x60>
		return status;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	e00d      	b.n	8007be2 <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef+0x7c>
	}
	word = buff[0];
 8007bc6:	7c3b      	ldrb	r3, [r7, #16]
 8007bc8:	827b      	strh	r3, [r7, #18]
	word <<= 8;
 8007bca:	8a7b      	ldrh	r3, [r7, #18]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	827b      	strh	r3, [r7, #18]
	word |= buff[1];
 8007bd0:	7c7b      	ldrb	r3, [r7, #17]
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	8a7b      	ldrh	r3, [r7, #18]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	827b      	strh	r3, [r7, #18]
	*data = word;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	8a7a      	ldrh	r2, [r7, #18]
 8007bde:	801a      	strh	r2, [r3, #0]
	return status;
 8007be0:	697b      	ldr	r3, [r7, #20]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef>:

int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data,
					   I2C_HandleTypeDef *i2c) {
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b08a      	sub	sp, #40	; 0x28
 8007bee:	af02      	add	r7, sp, #8
 8007bf0:	60ba      	str	r2, [r7, #8]
 8007bf2:	607b      	str	r3, [r7, #4]
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	73fb      	strb	r3, [r7, #15]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	73bb      	strb	r3, [r7, #14]
	uint32_t dword;
	uint8_t buff[4];
	int32_t status;
	// write index to read from to peripheral
	status = HAL_I2C_Master_Transmit(i2c, deviceAddress, &index, 1, MY_I2C_TIMEOUT);
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	b299      	uxth	r1, r3
 8007c00:	f107 020e 	add.w	r2, r7, #14
 8007c04:	f04f 33ff 	mov.w	r3, #4294967295
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7f9 fcbd 	bl	800158c <HAL_I2C_Master_Transmit>
 8007c12:	4603      	mov	r3, r0
 8007c14:	61fb      	str	r3, [r7, #28]
	if (status != HAL_OK) {
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d001      	beq.n	8007c20 <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x36>
		return status;
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	e032      	b.n	8007c86 <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x9c>
	}
	// send device address with read bit set, then receive data
	status = HAL_I2C_Master_Receive(i2c, deviceAddress | 1, buff, 2, MY_I2C_TIMEOUT);
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	b299      	uxth	r1, r3
 8007c2a:	f107 0214 	add.w	r2, r7, #20
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	2302      	movs	r3, #2
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7f9 fda6 	bl	8001788 <HAL_I2C_Master_Receive>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	61fb      	str	r3, [r7, #28]
	if (status != HAL_OK) {
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d001      	beq.n	8007c4a <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x60>
		return status;
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	e01d      	b.n	8007c86 <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef+0x9c>
	}
	dword = buff[0];
 8007c4a:	7d3b      	ldrb	r3, [r7, #20]
 8007c4c:	61bb      	str	r3, [r7, #24]
	dword <<= 8;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	61bb      	str	r3, [r7, #24]
	dword |= buff[1];
 8007c54:	7d7b      	ldrb	r3, [r7, #21]
 8007c56:	461a      	mov	r2, r3
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	61bb      	str	r3, [r7, #24]
	dword <<= 8;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	61bb      	str	r3, [r7, #24]
	dword |= buff[2];
 8007c64:	7dbb      	ldrb	r3, [r7, #22]
 8007c66:	461a      	mov	r2, r3
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	61bb      	str	r3, [r7, #24]
	dword <<= 8;
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	61bb      	str	r3, [r7, #24]
	dword |= buff[3];
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
 8007c76:	461a      	mov	r2, r3
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
	*data = dword;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	601a      	str	r2, [r3, #0]
	return status;
 8007c84:	69fb      	ldr	r3, [r7, #28]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3720      	adds	r7, #32
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <VL53L0X_WriteMulti>:
  return Status;
}

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                 uint32_t count) {
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b08a      	sub	sp, #40	; 0x28
 8007c92:	af02      	add	r7, sp, #8
 8007c94:	60f8      	str	r0, [r7, #12]
 8007c96:	607a      	str	r2, [r7, #4]
 8007c98:	603b      	str	r3, [r7, #0]
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	72fb      	strb	r3, [r7, #11]

  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	77fb      	strb	r3, [r7, #31]
  int32_t status_int = 0;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61bb      	str	r3, [r7, #24]
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b3f      	cmp	r3, #63	; 0x3f
 8007caa:	d901      	bls.n	8007cb0 <VL53L0X_WriteMulti+0x22>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cac:	23fc      	movs	r3, #252	; 0xfc
 8007cae:	77fb      	strb	r3, [r7, #31]
  }

  deviceAddress = Dev->I2cDevAddr;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007cb6:	75fb      	strb	r3, [r7, #23]

  status_int =
      VL53L0X_write_multi(deviceAddress, index, pdata, count, Dev->i2c);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007cbe:	7af9      	ldrb	r1, [r7, #11]
 8007cc0:	7df8      	ldrb	r0, [r7, #23]
 8007cc2:	9300      	str	r3, [sp, #0]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	f7ff fe86 	bl	80079d8 <_Z19VL53L0X_write_multihhPhmP17I2C_HandleTypeDef>
 8007ccc:	61b8      	str	r0, [r7, #24]

  if (status_int != 0)
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <VL53L0X_WriteMulti+0x4a>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007cd4:	23ec      	movs	r3, #236	; 0xec
 8007cd6:	77fb      	strb	r3, [r7, #31]

  return Status;
 8007cd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3720      	adds	r7, #32
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata,
                                uint32_t count) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	607a      	str	r2, [r7, #4]
 8007cee:	603b      	str	r3, [r7, #0]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	72fb      	strb	r3, [r7, #11]
  VL53L0X_I2C_USER_VAR
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  if (count >= VL53L0X_MAX_I2C_XFER_SIZE) {
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	2b3f      	cmp	r3, #63	; 0x3f
 8007cfc:	d901      	bls.n	8007d02 <VL53L0X_ReadMulti+0x1e>
    Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007cfe:	23fc      	movs	r3, #252	; 0xfc
 8007d00:	75fb      	strb	r3, [r7, #23]
  }

  deviceAddress = Dev->I2cDevAddr;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007d08:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_multi(deviceAddress, index, pdata, count, Dev->i2c);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007d10:	7af9      	ldrb	r1, [r7, #11]
 8007d12:	7db8      	ldrb	r0, [r7, #22]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	f7ff fe83 	bl	8007a24 <_Z18VL53L0X_read_multihhPhmP17I2C_HandleTypeDef>
 8007d1e:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <VL53L0X_ReadMulti+0x46>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007d26:	23ec      	movs	r3, #236	; 0xec
 8007d28:	75fb      	strb	r3, [r7, #23]

  return Status;
 8007d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b084      	sub	sp, #16
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
 8007d3e:	460b      	mov	r3, r1
 8007d40:	70fb      	strb	r3, [r7, #3]
 8007d42:	4613      	mov	r3, r2
 8007d44:	70bb      	strb	r3, [r7, #2]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007d50:	73bb      	strb	r3, [r7, #14]

  status_int = VL53L0X_write_byte(deviceAddress, index, data, Dev->i2c);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007d58:	78ba      	ldrb	r2, [r7, #2]
 8007d5a:	78f9      	ldrb	r1, [r7, #3]
 8007d5c:	7bb8      	ldrb	r0, [r7, #14]
 8007d5e:	f7ff fe91 	bl	8007a84 <_Z18VL53L0X_write_bytehhhP17I2C_HandleTypeDef>
 8007d62:	60b8      	str	r0, [r7, #8]

  if (status_int != 0)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <VL53L0X_WrByte+0x38>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007d6a:	23ec      	movs	r3, #236	; 0xec
 8007d6c:	73fb      	strb	r3, [r7, #15]

  return Status;
 8007d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
 8007d82:	460b      	mov	r3, r1
 8007d84:	70fb      	strb	r3, [r7, #3]
 8007d86:	4613      	mov	r3, r2
 8007d88:	803b      	strh	r3, [r7, #0]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007d94:	73bb      	strb	r3, [r7, #14]

  status_int = VL53L0X_write_word(deviceAddress, index, data, Dev->i2c);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007d9c:	883a      	ldrh	r2, [r7, #0]
 8007d9e:	78f9      	ldrb	r1, [r7, #3]
 8007da0:	7bb8      	ldrb	r0, [r7, #14]
 8007da2:	f7ff fe8d 	bl	8007ac0 <_Z18VL53L0X_write_wordhhtP17I2C_HandleTypeDef>
 8007da6:	60b8      	str	r0, [r7, #8]

  if (status_int != 0)
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <VL53L0X_WrWord+0x38>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007dae:	23ec      	movs	r3, #236	; 0xec
 8007db0:	73fb      	strb	r3, [r7, #15]

  return Status;
 8007db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <VL53L0X_UpdateByte>:

  return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index,
                                 uint8_t AndData, uint8_t OrData) {
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b086      	sub	sp, #24
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4603      	mov	r3, r0
 8007dce:	70fb      	strb	r3, [r7, #3]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70bb      	strb	r3, [r7, #2]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	707b      	strb	r3, [r7, #1]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;
  uint8_t data;

  deviceAddress = Dev->I2cDevAddr;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007de2:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_byte(deviceAddress, index, &data, Dev->i2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007dea:	f107 020f 	add.w	r2, r7, #15
 8007dee:	78f9      	ldrb	r1, [r7, #3]
 8007df0:	7db8      	ldrb	r0, [r7, #22]
 8007df2:	f7ff fe89 	bl	8007b08 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef>
 8007df6:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <VL53L0X_UpdateByte+0x44>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007dfe:	23ec      	movs	r3, #236	; 0xec
 8007e00:	75fb      	strb	r3, [r7, #23]

  if (Status == VL53L0X_ERROR_NONE) {
 8007e02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d115      	bne.n	8007e36 <VL53L0X_UpdateByte+0x78>
    data = (data & AndData) | OrData;
 8007e0a:	7bfa      	ldrb	r2, [r7, #15]
 8007e0c:	78bb      	ldrb	r3, [r7, #2]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	787b      	ldrb	r3, [r7, #1]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	73fb      	strb	r3, [r7, #15]
    status_int = VL53L0X_write_byte(deviceAddress, index, data, Dev->i2c);
 8007e1a:	7bfa      	ldrb	r2, [r7, #15]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007e22:	78f9      	ldrb	r1, [r7, #3]
 8007e24:	7db8      	ldrb	r0, [r7, #22]
 8007e26:	f7ff fe2d 	bl	8007a84 <_Z18VL53L0X_write_bytehhhP17I2C_HandleTypeDef>
 8007e2a:	6138      	str	r0, [r7, #16]

    if (status_int != 0)
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <VL53L0X_UpdateByte+0x78>
      Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e32:	23ec      	movs	r3, #236	; 0xec
 8007e34:	75fb      	strb	r3, [r7, #23]
  }

  return Status;
 8007e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b086      	sub	sp, #24
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	607a      	str	r2, [r7, #4]
 8007e4e:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e50:	2300      	movs	r3, #0
 8007e52:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007e5a:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_byte(deviceAddress, index, data, Dev->i2c);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007e62:	7af9      	ldrb	r1, [r7, #11]
 8007e64:	7db8      	ldrb	r0, [r7, #22]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	f7ff fe4e 	bl	8007b08 <_Z17VL53L0X_read_bytehhPhP17I2C_HandleTypeDef>
 8007e6c:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <VL53L0X_RdByte+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007e74:	23ec      	movs	r3, #236	; 0xec
 8007e76:	75fb      	strb	r3, [r7, #23]

  return Status;
 8007e78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	460b      	mov	r3, r1
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e92:	2300      	movs	r3, #0
 8007e94:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007e9c:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_word(deviceAddress, index, data, Dev->i2c);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007ea4:	7af9      	ldrb	r1, [r7, #11]
 8007ea6:	7db8      	ldrb	r0, [r7, #22]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	f7ff fe5c 	bl	8007b66 <_Z17VL53L0X_read_wordhhPtP17I2C_HandleTypeDef>
 8007eae:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <VL53L0X_RdWord+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007eb6:	23ec      	movs	r3, #236	; 0xec
 8007eb8:	75fb      	strb	r3, [r7, #23]

  return Status;
 8007eba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b086      	sub	sp, #24
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	60f8      	str	r0, [r7, #12]
 8007ece:	460b      	mov	r3, r1
 8007ed0:	607a      	str	r2, [r7, #4]
 8007ed2:	72fb      	strb	r3, [r7, #11]
  VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	75fb      	strb	r3, [r7, #23]
  int32_t status_int;
  uint8_t deviceAddress;

  deviceAddress = Dev->I2cDevAddr;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 8007ede:	75bb      	strb	r3, [r7, #22]

  status_int = VL53L0X_read_dword(deviceAddress, index, data, Dev->i2c);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8007ee6:	7af9      	ldrb	r1, [r7, #11]
 8007ee8:	7db8      	ldrb	r0, [r7, #22]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	f7ff fe7d 	bl	8007bea <_Z18VL53L0X_read_dwordhhPmP17I2C_HandleTypeDef>
 8007ef0:	6138      	str	r0, [r7, #16]

  if (status_int != 0)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <VL53L0X_RdDWord+0x36>
    Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ef8:	23ec      	movs	r3, #236	; 0xec
 8007efa:	75fb      	strb	r3, [r7, #23]

  return Status;
 8007efc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB 250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007f10:	2300      	movs	r3, #0
 8007f12:	73fb      	strb	r3, [r7, #15]
  volatile uint32_t i;
  LOG_FUNCTION_START("");

  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 8007f14:	2300      	movs	r3, #0
 8007f16:	60bb      	str	r3, [r7, #8]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	2bf9      	cmp	r3, #249	; 0xf9
 8007f1c:	bf94      	ite	ls
 8007f1e:	2301      	movls	r3, #1
 8007f20:	2300      	movhi	r3, #0
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <VL53L0X_PollingDelay+0x2a>
    // Do nothing
    asm("nop");
 8007f28:	bf00      	nop
  for (i = 0; i < VL53L0X_POLLINGDELAY_LOOPNB; i++) {
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	60bb      	str	r3, [r7, #8]
 8007f30:	e7f2      	b.n	8007f18 <VL53L0X_PollingDelay+0x10>
  }

  LOG_FUNCTION_END(status);
  return status;
 8007f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3714      	adds	r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr
	...

08007f44 <__errno>:
 8007f44:	4b01      	ldr	r3, [pc, #4]	; (8007f4c <__errno+0x8>)
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	200002cc 	.word	0x200002cc

08007f50 <__libc_init_array>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4d0d      	ldr	r5, [pc, #52]	; (8007f88 <__libc_init_array+0x38>)
 8007f54:	4c0d      	ldr	r4, [pc, #52]	; (8007f8c <__libc_init_array+0x3c>)
 8007f56:	1b64      	subs	r4, r4, r5
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	42a6      	cmp	r6, r4
 8007f5e:	d109      	bne.n	8007f74 <__libc_init_array+0x24>
 8007f60:	4d0b      	ldr	r5, [pc, #44]	; (8007f90 <__libc_init_array+0x40>)
 8007f62:	4c0c      	ldr	r4, [pc, #48]	; (8007f94 <__libc_init_array+0x44>)
 8007f64:	f000 fc96 	bl	8008894 <_init>
 8007f68:	1b64      	subs	r4, r4, r5
 8007f6a:	10a4      	asrs	r4, r4, #2
 8007f6c:	2600      	movs	r6, #0
 8007f6e:	42a6      	cmp	r6, r4
 8007f70:	d105      	bne.n	8007f7e <__libc_init_array+0x2e>
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f78:	4798      	blx	r3
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7ee      	b.n	8007f5c <__libc_init_array+0xc>
 8007f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f82:	4798      	blx	r3
 8007f84:	3601      	adds	r6, #1
 8007f86:	e7f2      	b.n	8007f6e <__libc_init_array+0x1e>
 8007f88:	08008e28 	.word	0x08008e28
 8007f8c:	08008e28 	.word	0x08008e28
 8007f90:	08008e28 	.word	0x08008e28
 8007f94:	08008e2c 	.word	0x08008e2c

08007f98 <memcpy>:
 8007f98:	440a      	add	r2, r1
 8007f9a:	4291      	cmp	r1, r2
 8007f9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa0:	d100      	bne.n	8007fa4 <memcpy+0xc>
 8007fa2:	4770      	bx	lr
 8007fa4:	b510      	push	{r4, lr}
 8007fa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007faa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fae:	4291      	cmp	r1, r2
 8007fb0:	d1f9      	bne.n	8007fa6 <memcpy+0xe>
 8007fb2:	bd10      	pop	{r4, pc}

08007fb4 <memset>:
 8007fb4:	4402      	add	r2, r0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d100      	bne.n	8007fbe <memset+0xa>
 8007fbc:	4770      	bx	lr
 8007fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8007fc2:	e7f9      	b.n	8007fb8 <memset+0x4>

08007fc4 <siprintf>:
 8007fc4:	b40e      	push	{r1, r2, r3}
 8007fc6:	b500      	push	{lr}
 8007fc8:	b09c      	sub	sp, #112	; 0x70
 8007fca:	ab1d      	add	r3, sp, #116	; 0x74
 8007fcc:	9002      	str	r0, [sp, #8]
 8007fce:	9006      	str	r0, [sp, #24]
 8007fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007fd4:	4809      	ldr	r0, [pc, #36]	; (8007ffc <siprintf+0x38>)
 8007fd6:	9107      	str	r1, [sp, #28]
 8007fd8:	9104      	str	r1, [sp, #16]
 8007fda:	4909      	ldr	r1, [pc, #36]	; (8008000 <siprintf+0x3c>)
 8007fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe0:	9105      	str	r1, [sp, #20]
 8007fe2:	6800      	ldr	r0, [r0, #0]
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	a902      	add	r1, sp, #8
 8007fe8:	f000 f870 	bl	80080cc <_svfiprintf_r>
 8007fec:	9b02      	ldr	r3, [sp, #8]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	701a      	strb	r2, [r3, #0]
 8007ff2:	b01c      	add	sp, #112	; 0x70
 8007ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff8:	b003      	add	sp, #12
 8007ffa:	4770      	bx	lr
 8007ffc:	200002cc 	.word	0x200002cc
 8008000:	ffff0208 	.word	0xffff0208

08008004 <strcpy>:
 8008004:	4603      	mov	r3, r0
 8008006:	f811 2b01 	ldrb.w	r2, [r1], #1
 800800a:	f803 2b01 	strb.w	r2, [r3], #1
 800800e:	2a00      	cmp	r2, #0
 8008010:	d1f9      	bne.n	8008006 <strcpy+0x2>
 8008012:	4770      	bx	lr

08008014 <__ssputs_r>:
 8008014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008018:	688e      	ldr	r6, [r1, #8]
 800801a:	429e      	cmp	r6, r3
 800801c:	4682      	mov	sl, r0
 800801e:	460c      	mov	r4, r1
 8008020:	4690      	mov	r8, r2
 8008022:	461f      	mov	r7, r3
 8008024:	d838      	bhi.n	8008098 <__ssputs_r+0x84>
 8008026:	898a      	ldrh	r2, [r1, #12]
 8008028:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800802c:	d032      	beq.n	8008094 <__ssputs_r+0x80>
 800802e:	6825      	ldr	r5, [r4, #0]
 8008030:	6909      	ldr	r1, [r1, #16]
 8008032:	eba5 0901 	sub.w	r9, r5, r1
 8008036:	6965      	ldr	r5, [r4, #20]
 8008038:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800803c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008040:	3301      	adds	r3, #1
 8008042:	444b      	add	r3, r9
 8008044:	106d      	asrs	r5, r5, #1
 8008046:	429d      	cmp	r5, r3
 8008048:	bf38      	it	cc
 800804a:	461d      	movcc	r5, r3
 800804c:	0553      	lsls	r3, r2, #21
 800804e:	d531      	bpl.n	80080b4 <__ssputs_r+0xa0>
 8008050:	4629      	mov	r1, r5
 8008052:	f000 fb55 	bl	8008700 <_malloc_r>
 8008056:	4606      	mov	r6, r0
 8008058:	b950      	cbnz	r0, 8008070 <__ssputs_r+0x5c>
 800805a:	230c      	movs	r3, #12
 800805c:	f8ca 3000 	str.w	r3, [sl]
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008070:	6921      	ldr	r1, [r4, #16]
 8008072:	464a      	mov	r2, r9
 8008074:	f7ff ff90 	bl	8007f98 <memcpy>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800807e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	6126      	str	r6, [r4, #16]
 8008086:	6165      	str	r5, [r4, #20]
 8008088:	444e      	add	r6, r9
 800808a:	eba5 0509 	sub.w	r5, r5, r9
 800808e:	6026      	str	r6, [r4, #0]
 8008090:	60a5      	str	r5, [r4, #8]
 8008092:	463e      	mov	r6, r7
 8008094:	42be      	cmp	r6, r7
 8008096:	d900      	bls.n	800809a <__ssputs_r+0x86>
 8008098:	463e      	mov	r6, r7
 800809a:	6820      	ldr	r0, [r4, #0]
 800809c:	4632      	mov	r2, r6
 800809e:	4641      	mov	r1, r8
 80080a0:	f000 faa8 	bl	80085f4 <memmove>
 80080a4:	68a3      	ldr	r3, [r4, #8]
 80080a6:	1b9b      	subs	r3, r3, r6
 80080a8:	60a3      	str	r3, [r4, #8]
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	4433      	add	r3, r6
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	2000      	movs	r0, #0
 80080b2:	e7db      	b.n	800806c <__ssputs_r+0x58>
 80080b4:	462a      	mov	r2, r5
 80080b6:	f000 fb97 	bl	80087e8 <_realloc_r>
 80080ba:	4606      	mov	r6, r0
 80080bc:	2800      	cmp	r0, #0
 80080be:	d1e1      	bne.n	8008084 <__ssputs_r+0x70>
 80080c0:	6921      	ldr	r1, [r4, #16]
 80080c2:	4650      	mov	r0, sl
 80080c4:	f000 fab0 	bl	8008628 <_free_r>
 80080c8:	e7c7      	b.n	800805a <__ssputs_r+0x46>
	...

080080cc <_svfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	4698      	mov	r8, r3
 80080d2:	898b      	ldrh	r3, [r1, #12]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	b09d      	sub	sp, #116	; 0x74
 80080d8:	4607      	mov	r7, r0
 80080da:	460d      	mov	r5, r1
 80080dc:	4614      	mov	r4, r2
 80080de:	d50e      	bpl.n	80080fe <_svfiprintf_r+0x32>
 80080e0:	690b      	ldr	r3, [r1, #16]
 80080e2:	b963      	cbnz	r3, 80080fe <_svfiprintf_r+0x32>
 80080e4:	2140      	movs	r1, #64	; 0x40
 80080e6:	f000 fb0b 	bl	8008700 <_malloc_r>
 80080ea:	6028      	str	r0, [r5, #0]
 80080ec:	6128      	str	r0, [r5, #16]
 80080ee:	b920      	cbnz	r0, 80080fa <_svfiprintf_r+0x2e>
 80080f0:	230c      	movs	r3, #12
 80080f2:	603b      	str	r3, [r7, #0]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e0d1      	b.n	800829e <_svfiprintf_r+0x1d2>
 80080fa:	2340      	movs	r3, #64	; 0x40
 80080fc:	616b      	str	r3, [r5, #20]
 80080fe:	2300      	movs	r3, #0
 8008100:	9309      	str	r3, [sp, #36]	; 0x24
 8008102:	2320      	movs	r3, #32
 8008104:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008108:	f8cd 800c 	str.w	r8, [sp, #12]
 800810c:	2330      	movs	r3, #48	; 0x30
 800810e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082b8 <_svfiprintf_r+0x1ec>
 8008112:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008116:	f04f 0901 	mov.w	r9, #1
 800811a:	4623      	mov	r3, r4
 800811c:	469a      	mov	sl, r3
 800811e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008122:	b10a      	cbz	r2, 8008128 <_svfiprintf_r+0x5c>
 8008124:	2a25      	cmp	r2, #37	; 0x25
 8008126:	d1f9      	bne.n	800811c <_svfiprintf_r+0x50>
 8008128:	ebba 0b04 	subs.w	fp, sl, r4
 800812c:	d00b      	beq.n	8008146 <_svfiprintf_r+0x7a>
 800812e:	465b      	mov	r3, fp
 8008130:	4622      	mov	r2, r4
 8008132:	4629      	mov	r1, r5
 8008134:	4638      	mov	r0, r7
 8008136:	f7ff ff6d 	bl	8008014 <__ssputs_r>
 800813a:	3001      	adds	r0, #1
 800813c:	f000 80aa 	beq.w	8008294 <_svfiprintf_r+0x1c8>
 8008140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008142:	445a      	add	r2, fp
 8008144:	9209      	str	r2, [sp, #36]	; 0x24
 8008146:	f89a 3000 	ldrb.w	r3, [sl]
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 80a2 	beq.w	8008294 <_svfiprintf_r+0x1c8>
 8008150:	2300      	movs	r3, #0
 8008152:	f04f 32ff 	mov.w	r2, #4294967295
 8008156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800815a:	f10a 0a01 	add.w	sl, sl, #1
 800815e:	9304      	str	r3, [sp, #16]
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008166:	931a      	str	r3, [sp, #104]	; 0x68
 8008168:	4654      	mov	r4, sl
 800816a:	2205      	movs	r2, #5
 800816c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008170:	4851      	ldr	r0, [pc, #324]	; (80082b8 <_svfiprintf_r+0x1ec>)
 8008172:	f7f8 f83d 	bl	80001f0 <memchr>
 8008176:	9a04      	ldr	r2, [sp, #16]
 8008178:	b9d8      	cbnz	r0, 80081b2 <_svfiprintf_r+0xe6>
 800817a:	06d0      	lsls	r0, r2, #27
 800817c:	bf44      	itt	mi
 800817e:	2320      	movmi	r3, #32
 8008180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008184:	0711      	lsls	r1, r2, #28
 8008186:	bf44      	itt	mi
 8008188:	232b      	movmi	r3, #43	; 0x2b
 800818a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800818e:	f89a 3000 	ldrb.w	r3, [sl]
 8008192:	2b2a      	cmp	r3, #42	; 0x2a
 8008194:	d015      	beq.n	80081c2 <_svfiprintf_r+0xf6>
 8008196:	9a07      	ldr	r2, [sp, #28]
 8008198:	4654      	mov	r4, sl
 800819a:	2000      	movs	r0, #0
 800819c:	f04f 0c0a 	mov.w	ip, #10
 80081a0:	4621      	mov	r1, r4
 80081a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081a6:	3b30      	subs	r3, #48	; 0x30
 80081a8:	2b09      	cmp	r3, #9
 80081aa:	d94e      	bls.n	800824a <_svfiprintf_r+0x17e>
 80081ac:	b1b0      	cbz	r0, 80081dc <_svfiprintf_r+0x110>
 80081ae:	9207      	str	r2, [sp, #28]
 80081b0:	e014      	b.n	80081dc <_svfiprintf_r+0x110>
 80081b2:	eba0 0308 	sub.w	r3, r0, r8
 80081b6:	fa09 f303 	lsl.w	r3, r9, r3
 80081ba:	4313      	orrs	r3, r2
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	46a2      	mov	sl, r4
 80081c0:	e7d2      	b.n	8008168 <_svfiprintf_r+0x9c>
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	1d19      	adds	r1, r3, #4
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	9103      	str	r1, [sp, #12]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	bfbb      	ittet	lt
 80081ce:	425b      	neglt	r3, r3
 80081d0:	f042 0202 	orrlt.w	r2, r2, #2
 80081d4:	9307      	strge	r3, [sp, #28]
 80081d6:	9307      	strlt	r3, [sp, #28]
 80081d8:	bfb8      	it	lt
 80081da:	9204      	strlt	r2, [sp, #16]
 80081dc:	7823      	ldrb	r3, [r4, #0]
 80081de:	2b2e      	cmp	r3, #46	; 0x2e
 80081e0:	d10c      	bne.n	80081fc <_svfiprintf_r+0x130>
 80081e2:	7863      	ldrb	r3, [r4, #1]
 80081e4:	2b2a      	cmp	r3, #42	; 0x2a
 80081e6:	d135      	bne.n	8008254 <_svfiprintf_r+0x188>
 80081e8:	9b03      	ldr	r3, [sp, #12]
 80081ea:	1d1a      	adds	r2, r3, #4
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	9203      	str	r2, [sp, #12]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bfb8      	it	lt
 80081f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80081f8:	3402      	adds	r4, #2
 80081fa:	9305      	str	r3, [sp, #20]
 80081fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082c8 <_svfiprintf_r+0x1fc>
 8008200:	7821      	ldrb	r1, [r4, #0]
 8008202:	2203      	movs	r2, #3
 8008204:	4650      	mov	r0, sl
 8008206:	f7f7 fff3 	bl	80001f0 <memchr>
 800820a:	b140      	cbz	r0, 800821e <_svfiprintf_r+0x152>
 800820c:	2340      	movs	r3, #64	; 0x40
 800820e:	eba0 000a 	sub.w	r0, r0, sl
 8008212:	fa03 f000 	lsl.w	r0, r3, r0
 8008216:	9b04      	ldr	r3, [sp, #16]
 8008218:	4303      	orrs	r3, r0
 800821a:	3401      	adds	r4, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008222:	4826      	ldr	r0, [pc, #152]	; (80082bc <_svfiprintf_r+0x1f0>)
 8008224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008228:	2206      	movs	r2, #6
 800822a:	f7f7 ffe1 	bl	80001f0 <memchr>
 800822e:	2800      	cmp	r0, #0
 8008230:	d038      	beq.n	80082a4 <_svfiprintf_r+0x1d8>
 8008232:	4b23      	ldr	r3, [pc, #140]	; (80082c0 <_svfiprintf_r+0x1f4>)
 8008234:	bb1b      	cbnz	r3, 800827e <_svfiprintf_r+0x1b2>
 8008236:	9b03      	ldr	r3, [sp, #12]
 8008238:	3307      	adds	r3, #7
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	3308      	adds	r3, #8
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008244:	4433      	add	r3, r6
 8008246:	9309      	str	r3, [sp, #36]	; 0x24
 8008248:	e767      	b.n	800811a <_svfiprintf_r+0x4e>
 800824a:	fb0c 3202 	mla	r2, ip, r2, r3
 800824e:	460c      	mov	r4, r1
 8008250:	2001      	movs	r0, #1
 8008252:	e7a5      	b.n	80081a0 <_svfiprintf_r+0xd4>
 8008254:	2300      	movs	r3, #0
 8008256:	3401      	adds	r4, #1
 8008258:	9305      	str	r3, [sp, #20]
 800825a:	4619      	mov	r1, r3
 800825c:	f04f 0c0a 	mov.w	ip, #10
 8008260:	4620      	mov	r0, r4
 8008262:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008266:	3a30      	subs	r2, #48	; 0x30
 8008268:	2a09      	cmp	r2, #9
 800826a:	d903      	bls.n	8008274 <_svfiprintf_r+0x1a8>
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0c5      	beq.n	80081fc <_svfiprintf_r+0x130>
 8008270:	9105      	str	r1, [sp, #20]
 8008272:	e7c3      	b.n	80081fc <_svfiprintf_r+0x130>
 8008274:	fb0c 2101 	mla	r1, ip, r1, r2
 8008278:	4604      	mov	r4, r0
 800827a:	2301      	movs	r3, #1
 800827c:	e7f0      	b.n	8008260 <_svfiprintf_r+0x194>
 800827e:	ab03      	add	r3, sp, #12
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	462a      	mov	r2, r5
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <_svfiprintf_r+0x1f8>)
 8008286:	a904      	add	r1, sp, #16
 8008288:	4638      	mov	r0, r7
 800828a:	f3af 8000 	nop.w
 800828e:	1c42      	adds	r2, r0, #1
 8008290:	4606      	mov	r6, r0
 8008292:	d1d6      	bne.n	8008242 <_svfiprintf_r+0x176>
 8008294:	89ab      	ldrh	r3, [r5, #12]
 8008296:	065b      	lsls	r3, r3, #25
 8008298:	f53f af2c 	bmi.w	80080f4 <_svfiprintf_r+0x28>
 800829c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800829e:	b01d      	add	sp, #116	; 0x74
 80082a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a4:	ab03      	add	r3, sp, #12
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	462a      	mov	r2, r5
 80082aa:	4b06      	ldr	r3, [pc, #24]	; (80082c4 <_svfiprintf_r+0x1f8>)
 80082ac:	a904      	add	r1, sp, #16
 80082ae:	4638      	mov	r0, r7
 80082b0:	f000 f87a 	bl	80083a8 <_printf_i>
 80082b4:	e7eb      	b.n	800828e <_svfiprintf_r+0x1c2>
 80082b6:	bf00      	nop
 80082b8:	08008dec 	.word	0x08008dec
 80082bc:	08008df6 	.word	0x08008df6
 80082c0:	00000000 	.word	0x00000000
 80082c4:	08008015 	.word	0x08008015
 80082c8:	08008df2 	.word	0x08008df2

080082cc <_printf_common>:
 80082cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	4616      	mov	r6, r2
 80082d2:	4699      	mov	r9, r3
 80082d4:	688a      	ldr	r2, [r1, #8]
 80082d6:	690b      	ldr	r3, [r1, #16]
 80082d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082dc:	4293      	cmp	r3, r2
 80082de:	bfb8      	it	lt
 80082e0:	4613      	movlt	r3, r2
 80082e2:	6033      	str	r3, [r6, #0]
 80082e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082e8:	4607      	mov	r7, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	b10a      	cbz	r2, 80082f2 <_printf_common+0x26>
 80082ee:	3301      	adds	r3, #1
 80082f0:	6033      	str	r3, [r6, #0]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	0699      	lsls	r1, r3, #26
 80082f6:	bf42      	ittt	mi
 80082f8:	6833      	ldrmi	r3, [r6, #0]
 80082fa:	3302      	addmi	r3, #2
 80082fc:	6033      	strmi	r3, [r6, #0]
 80082fe:	6825      	ldr	r5, [r4, #0]
 8008300:	f015 0506 	ands.w	r5, r5, #6
 8008304:	d106      	bne.n	8008314 <_printf_common+0x48>
 8008306:	f104 0a19 	add.w	sl, r4, #25
 800830a:	68e3      	ldr	r3, [r4, #12]
 800830c:	6832      	ldr	r2, [r6, #0]
 800830e:	1a9b      	subs	r3, r3, r2
 8008310:	42ab      	cmp	r3, r5
 8008312:	dc26      	bgt.n	8008362 <_printf_common+0x96>
 8008314:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008318:	1e13      	subs	r3, r2, #0
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	bf18      	it	ne
 800831e:	2301      	movne	r3, #1
 8008320:	0692      	lsls	r2, r2, #26
 8008322:	d42b      	bmi.n	800837c <_printf_common+0xb0>
 8008324:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008328:	4649      	mov	r1, r9
 800832a:	4638      	mov	r0, r7
 800832c:	47c0      	blx	r8
 800832e:	3001      	adds	r0, #1
 8008330:	d01e      	beq.n	8008370 <_printf_common+0xa4>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	68e5      	ldr	r5, [r4, #12]
 8008336:	6832      	ldr	r2, [r6, #0]
 8008338:	f003 0306 	and.w	r3, r3, #6
 800833c:	2b04      	cmp	r3, #4
 800833e:	bf08      	it	eq
 8008340:	1aad      	subeq	r5, r5, r2
 8008342:	68a3      	ldr	r3, [r4, #8]
 8008344:	6922      	ldr	r2, [r4, #16]
 8008346:	bf0c      	ite	eq
 8008348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800834c:	2500      	movne	r5, #0
 800834e:	4293      	cmp	r3, r2
 8008350:	bfc4      	itt	gt
 8008352:	1a9b      	subgt	r3, r3, r2
 8008354:	18ed      	addgt	r5, r5, r3
 8008356:	2600      	movs	r6, #0
 8008358:	341a      	adds	r4, #26
 800835a:	42b5      	cmp	r5, r6
 800835c:	d11a      	bne.n	8008394 <_printf_common+0xc8>
 800835e:	2000      	movs	r0, #0
 8008360:	e008      	b.n	8008374 <_printf_common+0xa8>
 8008362:	2301      	movs	r3, #1
 8008364:	4652      	mov	r2, sl
 8008366:	4649      	mov	r1, r9
 8008368:	4638      	mov	r0, r7
 800836a:	47c0      	blx	r8
 800836c:	3001      	adds	r0, #1
 800836e:	d103      	bne.n	8008378 <_printf_common+0xac>
 8008370:	f04f 30ff 	mov.w	r0, #4294967295
 8008374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008378:	3501      	adds	r5, #1
 800837a:	e7c6      	b.n	800830a <_printf_common+0x3e>
 800837c:	18e1      	adds	r1, r4, r3
 800837e:	1c5a      	adds	r2, r3, #1
 8008380:	2030      	movs	r0, #48	; 0x30
 8008382:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008386:	4422      	add	r2, r4
 8008388:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800838c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008390:	3302      	adds	r3, #2
 8008392:	e7c7      	b.n	8008324 <_printf_common+0x58>
 8008394:	2301      	movs	r3, #1
 8008396:	4622      	mov	r2, r4
 8008398:	4649      	mov	r1, r9
 800839a:	4638      	mov	r0, r7
 800839c:	47c0      	blx	r8
 800839e:	3001      	adds	r0, #1
 80083a0:	d0e6      	beq.n	8008370 <_printf_common+0xa4>
 80083a2:	3601      	adds	r6, #1
 80083a4:	e7d9      	b.n	800835a <_printf_common+0x8e>
	...

080083a8 <_printf_i>:
 80083a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083ac:	7e0f      	ldrb	r7, [r1, #24]
 80083ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083b0:	2f78      	cmp	r7, #120	; 0x78
 80083b2:	4691      	mov	r9, r2
 80083b4:	4680      	mov	r8, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	469a      	mov	sl, r3
 80083ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083be:	d807      	bhi.n	80083d0 <_printf_i+0x28>
 80083c0:	2f62      	cmp	r7, #98	; 0x62
 80083c2:	d80a      	bhi.n	80083da <_printf_i+0x32>
 80083c4:	2f00      	cmp	r7, #0
 80083c6:	f000 80d8 	beq.w	800857a <_printf_i+0x1d2>
 80083ca:	2f58      	cmp	r7, #88	; 0x58
 80083cc:	f000 80a3 	beq.w	8008516 <_printf_i+0x16e>
 80083d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083d8:	e03a      	b.n	8008450 <_printf_i+0xa8>
 80083da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083de:	2b15      	cmp	r3, #21
 80083e0:	d8f6      	bhi.n	80083d0 <_printf_i+0x28>
 80083e2:	a101      	add	r1, pc, #4	; (adr r1, 80083e8 <_printf_i+0x40>)
 80083e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083e8:	08008441 	.word	0x08008441
 80083ec:	08008455 	.word	0x08008455
 80083f0:	080083d1 	.word	0x080083d1
 80083f4:	080083d1 	.word	0x080083d1
 80083f8:	080083d1 	.word	0x080083d1
 80083fc:	080083d1 	.word	0x080083d1
 8008400:	08008455 	.word	0x08008455
 8008404:	080083d1 	.word	0x080083d1
 8008408:	080083d1 	.word	0x080083d1
 800840c:	080083d1 	.word	0x080083d1
 8008410:	080083d1 	.word	0x080083d1
 8008414:	08008561 	.word	0x08008561
 8008418:	08008485 	.word	0x08008485
 800841c:	08008543 	.word	0x08008543
 8008420:	080083d1 	.word	0x080083d1
 8008424:	080083d1 	.word	0x080083d1
 8008428:	08008583 	.word	0x08008583
 800842c:	080083d1 	.word	0x080083d1
 8008430:	08008485 	.word	0x08008485
 8008434:	080083d1 	.word	0x080083d1
 8008438:	080083d1 	.word	0x080083d1
 800843c:	0800854b 	.word	0x0800854b
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	1d1a      	adds	r2, r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	602a      	str	r2, [r5, #0]
 8008448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800844c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008450:	2301      	movs	r3, #1
 8008452:	e0a3      	b.n	800859c <_printf_i+0x1f4>
 8008454:	6820      	ldr	r0, [r4, #0]
 8008456:	6829      	ldr	r1, [r5, #0]
 8008458:	0606      	lsls	r6, r0, #24
 800845a:	f101 0304 	add.w	r3, r1, #4
 800845e:	d50a      	bpl.n	8008476 <_printf_i+0xce>
 8008460:	680e      	ldr	r6, [r1, #0]
 8008462:	602b      	str	r3, [r5, #0]
 8008464:	2e00      	cmp	r6, #0
 8008466:	da03      	bge.n	8008470 <_printf_i+0xc8>
 8008468:	232d      	movs	r3, #45	; 0x2d
 800846a:	4276      	negs	r6, r6
 800846c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008470:	485e      	ldr	r0, [pc, #376]	; (80085ec <_printf_i+0x244>)
 8008472:	230a      	movs	r3, #10
 8008474:	e019      	b.n	80084aa <_printf_i+0x102>
 8008476:	680e      	ldr	r6, [r1, #0]
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800847e:	bf18      	it	ne
 8008480:	b236      	sxthne	r6, r6
 8008482:	e7ef      	b.n	8008464 <_printf_i+0xbc>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	6820      	ldr	r0, [r4, #0]
 8008488:	1d19      	adds	r1, r3, #4
 800848a:	6029      	str	r1, [r5, #0]
 800848c:	0601      	lsls	r1, r0, #24
 800848e:	d501      	bpl.n	8008494 <_printf_i+0xec>
 8008490:	681e      	ldr	r6, [r3, #0]
 8008492:	e002      	b.n	800849a <_printf_i+0xf2>
 8008494:	0646      	lsls	r6, r0, #25
 8008496:	d5fb      	bpl.n	8008490 <_printf_i+0xe8>
 8008498:	881e      	ldrh	r6, [r3, #0]
 800849a:	4854      	ldr	r0, [pc, #336]	; (80085ec <_printf_i+0x244>)
 800849c:	2f6f      	cmp	r7, #111	; 0x6f
 800849e:	bf0c      	ite	eq
 80084a0:	2308      	moveq	r3, #8
 80084a2:	230a      	movne	r3, #10
 80084a4:	2100      	movs	r1, #0
 80084a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084aa:	6865      	ldr	r5, [r4, #4]
 80084ac:	60a5      	str	r5, [r4, #8]
 80084ae:	2d00      	cmp	r5, #0
 80084b0:	bfa2      	ittt	ge
 80084b2:	6821      	ldrge	r1, [r4, #0]
 80084b4:	f021 0104 	bicge.w	r1, r1, #4
 80084b8:	6021      	strge	r1, [r4, #0]
 80084ba:	b90e      	cbnz	r6, 80084c0 <_printf_i+0x118>
 80084bc:	2d00      	cmp	r5, #0
 80084be:	d04d      	beq.n	800855c <_printf_i+0x1b4>
 80084c0:	4615      	mov	r5, r2
 80084c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084c6:	fb03 6711 	mls	r7, r3, r1, r6
 80084ca:	5dc7      	ldrb	r7, [r0, r7]
 80084cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084d0:	4637      	mov	r7, r6
 80084d2:	42bb      	cmp	r3, r7
 80084d4:	460e      	mov	r6, r1
 80084d6:	d9f4      	bls.n	80084c2 <_printf_i+0x11a>
 80084d8:	2b08      	cmp	r3, #8
 80084da:	d10b      	bne.n	80084f4 <_printf_i+0x14c>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	07de      	lsls	r6, r3, #31
 80084e0:	d508      	bpl.n	80084f4 <_printf_i+0x14c>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	6861      	ldr	r1, [r4, #4]
 80084e6:	4299      	cmp	r1, r3
 80084e8:	bfde      	ittt	le
 80084ea:	2330      	movle	r3, #48	; 0x30
 80084ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084f4:	1b52      	subs	r2, r2, r5
 80084f6:	6122      	str	r2, [r4, #16]
 80084f8:	f8cd a000 	str.w	sl, [sp]
 80084fc:	464b      	mov	r3, r9
 80084fe:	aa03      	add	r2, sp, #12
 8008500:	4621      	mov	r1, r4
 8008502:	4640      	mov	r0, r8
 8008504:	f7ff fee2 	bl	80082cc <_printf_common>
 8008508:	3001      	adds	r0, #1
 800850a:	d14c      	bne.n	80085a6 <_printf_i+0x1fe>
 800850c:	f04f 30ff 	mov.w	r0, #4294967295
 8008510:	b004      	add	sp, #16
 8008512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008516:	4835      	ldr	r0, [pc, #212]	; (80085ec <_printf_i+0x244>)
 8008518:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800851c:	6829      	ldr	r1, [r5, #0]
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f851 6b04 	ldr.w	r6, [r1], #4
 8008524:	6029      	str	r1, [r5, #0]
 8008526:	061d      	lsls	r5, r3, #24
 8008528:	d514      	bpl.n	8008554 <_printf_i+0x1ac>
 800852a:	07df      	lsls	r7, r3, #31
 800852c:	bf44      	itt	mi
 800852e:	f043 0320 	orrmi.w	r3, r3, #32
 8008532:	6023      	strmi	r3, [r4, #0]
 8008534:	b91e      	cbnz	r6, 800853e <_printf_i+0x196>
 8008536:	6823      	ldr	r3, [r4, #0]
 8008538:	f023 0320 	bic.w	r3, r3, #32
 800853c:	6023      	str	r3, [r4, #0]
 800853e:	2310      	movs	r3, #16
 8008540:	e7b0      	b.n	80084a4 <_printf_i+0xfc>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	f043 0320 	orr.w	r3, r3, #32
 8008548:	6023      	str	r3, [r4, #0]
 800854a:	2378      	movs	r3, #120	; 0x78
 800854c:	4828      	ldr	r0, [pc, #160]	; (80085f0 <_printf_i+0x248>)
 800854e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008552:	e7e3      	b.n	800851c <_printf_i+0x174>
 8008554:	0659      	lsls	r1, r3, #25
 8008556:	bf48      	it	mi
 8008558:	b2b6      	uxthmi	r6, r6
 800855a:	e7e6      	b.n	800852a <_printf_i+0x182>
 800855c:	4615      	mov	r5, r2
 800855e:	e7bb      	b.n	80084d8 <_printf_i+0x130>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	6826      	ldr	r6, [r4, #0]
 8008564:	6961      	ldr	r1, [r4, #20]
 8008566:	1d18      	adds	r0, r3, #4
 8008568:	6028      	str	r0, [r5, #0]
 800856a:	0635      	lsls	r5, r6, #24
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	d501      	bpl.n	8008574 <_printf_i+0x1cc>
 8008570:	6019      	str	r1, [r3, #0]
 8008572:	e002      	b.n	800857a <_printf_i+0x1d2>
 8008574:	0670      	lsls	r0, r6, #25
 8008576:	d5fb      	bpl.n	8008570 <_printf_i+0x1c8>
 8008578:	8019      	strh	r1, [r3, #0]
 800857a:	2300      	movs	r3, #0
 800857c:	6123      	str	r3, [r4, #16]
 800857e:	4615      	mov	r5, r2
 8008580:	e7ba      	b.n	80084f8 <_printf_i+0x150>
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	1d1a      	adds	r2, r3, #4
 8008586:	602a      	str	r2, [r5, #0]
 8008588:	681d      	ldr	r5, [r3, #0]
 800858a:	6862      	ldr	r2, [r4, #4]
 800858c:	2100      	movs	r1, #0
 800858e:	4628      	mov	r0, r5
 8008590:	f7f7 fe2e 	bl	80001f0 <memchr>
 8008594:	b108      	cbz	r0, 800859a <_printf_i+0x1f2>
 8008596:	1b40      	subs	r0, r0, r5
 8008598:	6060      	str	r0, [r4, #4]
 800859a:	6863      	ldr	r3, [r4, #4]
 800859c:	6123      	str	r3, [r4, #16]
 800859e:	2300      	movs	r3, #0
 80085a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a4:	e7a8      	b.n	80084f8 <_printf_i+0x150>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	462a      	mov	r2, r5
 80085aa:	4649      	mov	r1, r9
 80085ac:	4640      	mov	r0, r8
 80085ae:	47d0      	blx	sl
 80085b0:	3001      	adds	r0, #1
 80085b2:	d0ab      	beq.n	800850c <_printf_i+0x164>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	079b      	lsls	r3, r3, #30
 80085b8:	d413      	bmi.n	80085e2 <_printf_i+0x23a>
 80085ba:	68e0      	ldr	r0, [r4, #12]
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	4298      	cmp	r0, r3
 80085c0:	bfb8      	it	lt
 80085c2:	4618      	movlt	r0, r3
 80085c4:	e7a4      	b.n	8008510 <_printf_i+0x168>
 80085c6:	2301      	movs	r3, #1
 80085c8:	4632      	mov	r2, r6
 80085ca:	4649      	mov	r1, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	47d0      	blx	sl
 80085d0:	3001      	adds	r0, #1
 80085d2:	d09b      	beq.n	800850c <_printf_i+0x164>
 80085d4:	3501      	adds	r5, #1
 80085d6:	68e3      	ldr	r3, [r4, #12]
 80085d8:	9903      	ldr	r1, [sp, #12]
 80085da:	1a5b      	subs	r3, r3, r1
 80085dc:	42ab      	cmp	r3, r5
 80085de:	dcf2      	bgt.n	80085c6 <_printf_i+0x21e>
 80085e0:	e7eb      	b.n	80085ba <_printf_i+0x212>
 80085e2:	2500      	movs	r5, #0
 80085e4:	f104 0619 	add.w	r6, r4, #25
 80085e8:	e7f5      	b.n	80085d6 <_printf_i+0x22e>
 80085ea:	bf00      	nop
 80085ec:	08008dfd 	.word	0x08008dfd
 80085f0:	08008e0e 	.word	0x08008e0e

080085f4 <memmove>:
 80085f4:	4288      	cmp	r0, r1
 80085f6:	b510      	push	{r4, lr}
 80085f8:	eb01 0402 	add.w	r4, r1, r2
 80085fc:	d902      	bls.n	8008604 <memmove+0x10>
 80085fe:	4284      	cmp	r4, r0
 8008600:	4623      	mov	r3, r4
 8008602:	d807      	bhi.n	8008614 <memmove+0x20>
 8008604:	1e43      	subs	r3, r0, #1
 8008606:	42a1      	cmp	r1, r4
 8008608:	d008      	beq.n	800861c <memmove+0x28>
 800860a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800860e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008612:	e7f8      	b.n	8008606 <memmove+0x12>
 8008614:	4402      	add	r2, r0
 8008616:	4601      	mov	r1, r0
 8008618:	428a      	cmp	r2, r1
 800861a:	d100      	bne.n	800861e <memmove+0x2a>
 800861c:	bd10      	pop	{r4, pc}
 800861e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008622:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008626:	e7f7      	b.n	8008618 <memmove+0x24>

08008628 <_free_r>:
 8008628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800862a:	2900      	cmp	r1, #0
 800862c:	d044      	beq.n	80086b8 <_free_r+0x90>
 800862e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008632:	9001      	str	r0, [sp, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	f1a1 0404 	sub.w	r4, r1, #4
 800863a:	bfb8      	it	lt
 800863c:	18e4      	addlt	r4, r4, r3
 800863e:	f000 f913 	bl	8008868 <__malloc_lock>
 8008642:	4a1e      	ldr	r2, [pc, #120]	; (80086bc <_free_r+0x94>)
 8008644:	9801      	ldr	r0, [sp, #4]
 8008646:	6813      	ldr	r3, [r2, #0]
 8008648:	b933      	cbnz	r3, 8008658 <_free_r+0x30>
 800864a:	6063      	str	r3, [r4, #4]
 800864c:	6014      	str	r4, [r2, #0]
 800864e:	b003      	add	sp, #12
 8008650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008654:	f000 b90e 	b.w	8008874 <__malloc_unlock>
 8008658:	42a3      	cmp	r3, r4
 800865a:	d908      	bls.n	800866e <_free_r+0x46>
 800865c:	6825      	ldr	r5, [r4, #0]
 800865e:	1961      	adds	r1, r4, r5
 8008660:	428b      	cmp	r3, r1
 8008662:	bf01      	itttt	eq
 8008664:	6819      	ldreq	r1, [r3, #0]
 8008666:	685b      	ldreq	r3, [r3, #4]
 8008668:	1949      	addeq	r1, r1, r5
 800866a:	6021      	streq	r1, [r4, #0]
 800866c:	e7ed      	b.n	800864a <_free_r+0x22>
 800866e:	461a      	mov	r2, r3
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	b10b      	cbz	r3, 8008678 <_free_r+0x50>
 8008674:	42a3      	cmp	r3, r4
 8008676:	d9fa      	bls.n	800866e <_free_r+0x46>
 8008678:	6811      	ldr	r1, [r2, #0]
 800867a:	1855      	adds	r5, r2, r1
 800867c:	42a5      	cmp	r5, r4
 800867e:	d10b      	bne.n	8008698 <_free_r+0x70>
 8008680:	6824      	ldr	r4, [r4, #0]
 8008682:	4421      	add	r1, r4
 8008684:	1854      	adds	r4, r2, r1
 8008686:	42a3      	cmp	r3, r4
 8008688:	6011      	str	r1, [r2, #0]
 800868a:	d1e0      	bne.n	800864e <_free_r+0x26>
 800868c:	681c      	ldr	r4, [r3, #0]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	6053      	str	r3, [r2, #4]
 8008692:	4421      	add	r1, r4
 8008694:	6011      	str	r1, [r2, #0]
 8008696:	e7da      	b.n	800864e <_free_r+0x26>
 8008698:	d902      	bls.n	80086a0 <_free_r+0x78>
 800869a:	230c      	movs	r3, #12
 800869c:	6003      	str	r3, [r0, #0]
 800869e:	e7d6      	b.n	800864e <_free_r+0x26>
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	1961      	adds	r1, r4, r5
 80086a4:	428b      	cmp	r3, r1
 80086a6:	bf04      	itt	eq
 80086a8:	6819      	ldreq	r1, [r3, #0]
 80086aa:	685b      	ldreq	r3, [r3, #4]
 80086ac:	6063      	str	r3, [r4, #4]
 80086ae:	bf04      	itt	eq
 80086b0:	1949      	addeq	r1, r1, r5
 80086b2:	6021      	streq	r1, [r4, #0]
 80086b4:	6054      	str	r4, [r2, #4]
 80086b6:	e7ca      	b.n	800864e <_free_r+0x26>
 80086b8:	b003      	add	sp, #12
 80086ba:	bd30      	pop	{r4, r5, pc}
 80086bc:	20000550 	.word	0x20000550

080086c0 <sbrk_aligned>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	4e0e      	ldr	r6, [pc, #56]	; (80086fc <sbrk_aligned+0x3c>)
 80086c4:	460c      	mov	r4, r1
 80086c6:	6831      	ldr	r1, [r6, #0]
 80086c8:	4605      	mov	r5, r0
 80086ca:	b911      	cbnz	r1, 80086d2 <sbrk_aligned+0x12>
 80086cc:	f000 f8bc 	bl	8008848 <_sbrk_r>
 80086d0:	6030      	str	r0, [r6, #0]
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 f8b7 	bl	8008848 <_sbrk_r>
 80086da:	1c43      	adds	r3, r0, #1
 80086dc:	d00a      	beq.n	80086f4 <sbrk_aligned+0x34>
 80086de:	1cc4      	adds	r4, r0, #3
 80086e0:	f024 0403 	bic.w	r4, r4, #3
 80086e4:	42a0      	cmp	r0, r4
 80086e6:	d007      	beq.n	80086f8 <sbrk_aligned+0x38>
 80086e8:	1a21      	subs	r1, r4, r0
 80086ea:	4628      	mov	r0, r5
 80086ec:	f000 f8ac 	bl	8008848 <_sbrk_r>
 80086f0:	3001      	adds	r0, #1
 80086f2:	d101      	bne.n	80086f8 <sbrk_aligned+0x38>
 80086f4:	f04f 34ff 	mov.w	r4, #4294967295
 80086f8:	4620      	mov	r0, r4
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	20000554 	.word	0x20000554

08008700 <_malloc_r>:
 8008700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008704:	1ccd      	adds	r5, r1, #3
 8008706:	f025 0503 	bic.w	r5, r5, #3
 800870a:	3508      	adds	r5, #8
 800870c:	2d0c      	cmp	r5, #12
 800870e:	bf38      	it	cc
 8008710:	250c      	movcc	r5, #12
 8008712:	2d00      	cmp	r5, #0
 8008714:	4607      	mov	r7, r0
 8008716:	db01      	blt.n	800871c <_malloc_r+0x1c>
 8008718:	42a9      	cmp	r1, r5
 800871a:	d905      	bls.n	8008728 <_malloc_r+0x28>
 800871c:	230c      	movs	r3, #12
 800871e:	603b      	str	r3, [r7, #0]
 8008720:	2600      	movs	r6, #0
 8008722:	4630      	mov	r0, r6
 8008724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008728:	4e2e      	ldr	r6, [pc, #184]	; (80087e4 <_malloc_r+0xe4>)
 800872a:	f000 f89d 	bl	8008868 <__malloc_lock>
 800872e:	6833      	ldr	r3, [r6, #0]
 8008730:	461c      	mov	r4, r3
 8008732:	bb34      	cbnz	r4, 8008782 <_malloc_r+0x82>
 8008734:	4629      	mov	r1, r5
 8008736:	4638      	mov	r0, r7
 8008738:	f7ff ffc2 	bl	80086c0 <sbrk_aligned>
 800873c:	1c43      	adds	r3, r0, #1
 800873e:	4604      	mov	r4, r0
 8008740:	d14d      	bne.n	80087de <_malloc_r+0xde>
 8008742:	6834      	ldr	r4, [r6, #0]
 8008744:	4626      	mov	r6, r4
 8008746:	2e00      	cmp	r6, #0
 8008748:	d140      	bne.n	80087cc <_malloc_r+0xcc>
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	4631      	mov	r1, r6
 800874e:	4638      	mov	r0, r7
 8008750:	eb04 0803 	add.w	r8, r4, r3
 8008754:	f000 f878 	bl	8008848 <_sbrk_r>
 8008758:	4580      	cmp	r8, r0
 800875a:	d13a      	bne.n	80087d2 <_malloc_r+0xd2>
 800875c:	6821      	ldr	r1, [r4, #0]
 800875e:	3503      	adds	r5, #3
 8008760:	1a6d      	subs	r5, r5, r1
 8008762:	f025 0503 	bic.w	r5, r5, #3
 8008766:	3508      	adds	r5, #8
 8008768:	2d0c      	cmp	r5, #12
 800876a:	bf38      	it	cc
 800876c:	250c      	movcc	r5, #12
 800876e:	4629      	mov	r1, r5
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff ffa5 	bl	80086c0 <sbrk_aligned>
 8008776:	3001      	adds	r0, #1
 8008778:	d02b      	beq.n	80087d2 <_malloc_r+0xd2>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	442b      	add	r3, r5
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	e00e      	b.n	80087a0 <_malloc_r+0xa0>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	1b52      	subs	r2, r2, r5
 8008786:	d41e      	bmi.n	80087c6 <_malloc_r+0xc6>
 8008788:	2a0b      	cmp	r2, #11
 800878a:	d916      	bls.n	80087ba <_malloc_r+0xba>
 800878c:	1961      	adds	r1, r4, r5
 800878e:	42a3      	cmp	r3, r4
 8008790:	6025      	str	r5, [r4, #0]
 8008792:	bf18      	it	ne
 8008794:	6059      	strne	r1, [r3, #4]
 8008796:	6863      	ldr	r3, [r4, #4]
 8008798:	bf08      	it	eq
 800879a:	6031      	streq	r1, [r6, #0]
 800879c:	5162      	str	r2, [r4, r5]
 800879e:	604b      	str	r3, [r1, #4]
 80087a0:	4638      	mov	r0, r7
 80087a2:	f104 060b 	add.w	r6, r4, #11
 80087a6:	f000 f865 	bl	8008874 <__malloc_unlock>
 80087aa:	f026 0607 	bic.w	r6, r6, #7
 80087ae:	1d23      	adds	r3, r4, #4
 80087b0:	1af2      	subs	r2, r6, r3
 80087b2:	d0b6      	beq.n	8008722 <_malloc_r+0x22>
 80087b4:	1b9b      	subs	r3, r3, r6
 80087b6:	50a3      	str	r3, [r4, r2]
 80087b8:	e7b3      	b.n	8008722 <_malloc_r+0x22>
 80087ba:	6862      	ldr	r2, [r4, #4]
 80087bc:	42a3      	cmp	r3, r4
 80087be:	bf0c      	ite	eq
 80087c0:	6032      	streq	r2, [r6, #0]
 80087c2:	605a      	strne	r2, [r3, #4]
 80087c4:	e7ec      	b.n	80087a0 <_malloc_r+0xa0>
 80087c6:	4623      	mov	r3, r4
 80087c8:	6864      	ldr	r4, [r4, #4]
 80087ca:	e7b2      	b.n	8008732 <_malloc_r+0x32>
 80087cc:	4634      	mov	r4, r6
 80087ce:	6876      	ldr	r6, [r6, #4]
 80087d0:	e7b9      	b.n	8008746 <_malloc_r+0x46>
 80087d2:	230c      	movs	r3, #12
 80087d4:	603b      	str	r3, [r7, #0]
 80087d6:	4638      	mov	r0, r7
 80087d8:	f000 f84c 	bl	8008874 <__malloc_unlock>
 80087dc:	e7a1      	b.n	8008722 <_malloc_r+0x22>
 80087de:	6025      	str	r5, [r4, #0]
 80087e0:	e7de      	b.n	80087a0 <_malloc_r+0xa0>
 80087e2:	bf00      	nop
 80087e4:	20000550 	.word	0x20000550

080087e8 <_realloc_r>:
 80087e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ec:	4680      	mov	r8, r0
 80087ee:	4614      	mov	r4, r2
 80087f0:	460e      	mov	r6, r1
 80087f2:	b921      	cbnz	r1, 80087fe <_realloc_r+0x16>
 80087f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087f8:	4611      	mov	r1, r2
 80087fa:	f7ff bf81 	b.w	8008700 <_malloc_r>
 80087fe:	b92a      	cbnz	r2, 800880c <_realloc_r+0x24>
 8008800:	f7ff ff12 	bl	8008628 <_free_r>
 8008804:	4625      	mov	r5, r4
 8008806:	4628      	mov	r0, r5
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800880c:	f000 f838 	bl	8008880 <_malloc_usable_size_r>
 8008810:	4284      	cmp	r4, r0
 8008812:	4607      	mov	r7, r0
 8008814:	d802      	bhi.n	800881c <_realloc_r+0x34>
 8008816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800881a:	d812      	bhi.n	8008842 <_realloc_r+0x5a>
 800881c:	4621      	mov	r1, r4
 800881e:	4640      	mov	r0, r8
 8008820:	f7ff ff6e 	bl	8008700 <_malloc_r>
 8008824:	4605      	mov	r5, r0
 8008826:	2800      	cmp	r0, #0
 8008828:	d0ed      	beq.n	8008806 <_realloc_r+0x1e>
 800882a:	42bc      	cmp	r4, r7
 800882c:	4622      	mov	r2, r4
 800882e:	4631      	mov	r1, r6
 8008830:	bf28      	it	cs
 8008832:	463a      	movcs	r2, r7
 8008834:	f7ff fbb0 	bl	8007f98 <memcpy>
 8008838:	4631      	mov	r1, r6
 800883a:	4640      	mov	r0, r8
 800883c:	f7ff fef4 	bl	8008628 <_free_r>
 8008840:	e7e1      	b.n	8008806 <_realloc_r+0x1e>
 8008842:	4635      	mov	r5, r6
 8008844:	e7df      	b.n	8008806 <_realloc_r+0x1e>
	...

08008848 <_sbrk_r>:
 8008848:	b538      	push	{r3, r4, r5, lr}
 800884a:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_sbrk_r+0x1c>)
 800884c:	2300      	movs	r3, #0
 800884e:	4604      	mov	r4, r0
 8008850:	4608      	mov	r0, r1
 8008852:	602b      	str	r3, [r5, #0]
 8008854:	f7f8 f9e4 	bl	8000c20 <_sbrk>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d102      	bne.n	8008862 <_sbrk_r+0x1a>
 800885c:	682b      	ldr	r3, [r5, #0]
 800885e:	b103      	cbz	r3, 8008862 <_sbrk_r+0x1a>
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	bd38      	pop	{r3, r4, r5, pc}
 8008864:	20000558 	.word	0x20000558

08008868 <__malloc_lock>:
 8008868:	4801      	ldr	r0, [pc, #4]	; (8008870 <__malloc_lock+0x8>)
 800886a:	f000 b811 	b.w	8008890 <__retarget_lock_acquire_recursive>
 800886e:	bf00      	nop
 8008870:	2000055c 	.word	0x2000055c

08008874 <__malloc_unlock>:
 8008874:	4801      	ldr	r0, [pc, #4]	; (800887c <__malloc_unlock+0x8>)
 8008876:	f000 b80c 	b.w	8008892 <__retarget_lock_release_recursive>
 800887a:	bf00      	nop
 800887c:	2000055c 	.word	0x2000055c

08008880 <_malloc_usable_size_r>:
 8008880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008884:	1f18      	subs	r0, r3, #4
 8008886:	2b00      	cmp	r3, #0
 8008888:	bfbc      	itt	lt
 800888a:	580b      	ldrlt	r3, [r1, r0]
 800888c:	18c0      	addlt	r0, r0, r3
 800888e:	4770      	bx	lr

08008890 <__retarget_lock_acquire_recursive>:
 8008890:	4770      	bx	lr

08008892 <__retarget_lock_release_recursive>:
 8008892:	4770      	bx	lr

08008894 <_init>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	bf00      	nop
 8008898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889a:	bc08      	pop	{r3}
 800889c:	469e      	mov	lr, r3
 800889e:	4770      	bx	lr

080088a0 <_fini>:
 80088a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a2:	bf00      	nop
 80088a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a6:	bc08      	pop	{r3}
 80088a8:	469e      	mov	lr, r3
 80088aa:	4770      	bx	lr
